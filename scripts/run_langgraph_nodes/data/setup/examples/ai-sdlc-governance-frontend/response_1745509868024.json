{
  "repo_url": "https://github.com/DEFRA/ai-sdlc-governance-frontend",
  "file_structure": "├── compose/\n│   ├── aws.env\n│   └── start-localstack.sh\n├── defra-ai-sdlc-playbook/\n├── governance-admin-vault/\n├── public/\n│   └── assets/\n│       └── javascripts/\n├── scripts/\n│   ├── git_cleanup.sh\n│   └── start_dev_server.sh\n├── src/\n│   ├── client/\n│   │   ├── common/\n│   │   │   ├── helpers/\n│   │   │   └── README.md\n│   │   ├── javascripts/\n│   │   │   └── application.js\n│   │   └── stylesheets/\n│   │       ├── components/\n│   │       │   └── _index.scss\n│   │       ├── core/\n│   │       │   ├── _header.scss\n│   │       │   ├── _index.scss\n│   │       │   └── _main.scss\n│   │       ├── helpers/\n│   │       │   ├── _index.scss\n│   │       │   └── _links.scss\n│   │       ├── partials/\n│   │       │   └── _index.scss\n│   │       ├── variables/\n│   │       │   ├── _colours.scss\n│   │       │   └── _index.scss\n│   │       ├── _govuk-frontend.scss\n│   │       └── application.scss\n│   ├── config/\n│   │   ├── nunjucks/\n│   │   │   ├── context/\n│   │   │   │   ├── build-navigation.js\n│   │   │   │   ├── build-navigation.test.js\n│   │   │   │   ├── context.js\n│   │   │   │   └── context.test.js\n│   │   │   ├── filters/\n│   │   │   │   ├── filters.js\n│   │   │   │   ├── format-currency.js\n│   │   │   │   ├── format-currency.test.js\n│   │   │   │   ├── format-date.js\n│   │   │   │   ├── format-date.test.js\n│   │   │   │   └── map.js\n│   │   │   ├── globals.js\n│   │   │   └── nunjucks.js\n│   │   └── config.js\n│   ├── server/\n│   │   ├── about/\n│   │   │   ├── controller.js\n│   │   │   ├── controller.test.js\n│   │   │   ├── index.js\n│   │   │   └── index.njk\n│   │   ├── checklist-item-templates/\n│   │   │   ├── views/\n│   │   │   │   ├── delete-confirmation.njk\n│   │   │   │   ├── detail.njk\n│   │   │   │   └── new.njk\n│   │   │   ├── controller.js\n│   │   │   └── index.js\n│   │   ├── common/\n│   │   │   ├── components/\n│   │   │   │   └── heading/\n│   │   │   │       ├── _heading.scss\n│   │   │   │       ├── macro.njk\n│   │   │   │       ├── template.njk\n│   │   │   │       └── template.test.js\n│   │   │   ├── constants/\n│   │   │   │   └── status-codes.js\n│   │   │   ├── helpers/\n│   │   │   │   ├── logging/\n│   │   │   │   │   ├── logger-options.js\n│   │   │   │   │   ├── logger.js\n│   │   │   │   │   └── request-logger.js\n│   │   │   │   ├── proxy/\n│   │   │   │   │   ├── setup-proxy.js\n│   │   │   │   │   └── setup-proxy.test.js\n│   │   │   │   ├── secure-context/\n│   │   │   │   │   ├── get-trust-store-certs.js\n│   │   │   │   │   ├── get-trust-store-certs.test.js\n│   │   │   │   │   ├── index.js\n│   │   │   │   │   ├── secure-context.js\n│   │   │   │   │   └── secure-context.test.js\n│   │   │   │   ├── session-cache/\n│   │   │   │   │   ├── cache-engine.js\n│   │   │   │   │   ├── cache-engine.test.js\n│   │   │   │   │   └── session-cache.js\n│   │   │   │   ├── errors.js\n│   │   │   │   ├── errors.test.js\n│   │   │   │   ├── metrics.js\n│   │   │   │   ├── metrics.test.js\n│   │   │   │   ├── pulse.js\n│   │   │   │   ├── redis-client.js\n│   │   │   │   ├── redis-client.test.js\n│   │   │   │   ├── request-tracing.js\n│   │   │   │   ├── serve-static-files.js\n│   │   │   │   ├── serve-static-files.test.js\n│   │   │   │   ├── start-server.js\n│   │   │   │   └── start-server.test.js\n│   │   │   ├── templates/\n│   │   │   │   ├── layouts/\n│   │   │   │   │   └── page.njk\n│   │   │   │   └── partials/\n│   │   │   │       └── navigation/\n│   │   │   │           ├── _navigation.scss\n│   │   │   │           └── navigation.njk\n│   │   │   ├── test-helpers/\n│   │   │   │   └── component-helpers.js\n│   │   │   └── README.md\n│   │   ├── error/\n│   │   │   └── index.njk\n│   │   ├── governance-templates/\n│   │   │   ├── views/\n│   │   │   │   ├── delete-confirmation.njk\n│   │   │   │   ├── detail.njk\n│   │   │   │   ├── diagram.njk\n│   │   │   │   ├── list.njk\n│   │   │   │   └── new.njk\n│   │   │   ├── controller.js\n│   │   │   └── index.js\n│   │   ├── health/\n│   │   │   ├── controller.js\n│   │   │   ├── controller.test.js\n│   │   │   └── index.js\n│   │   ├── home/\n│   │   │   ├── controller.js\n│   │   │   ├── controller.test.js\n│   │   │   ├── index.js\n│   │   │   └── index.njk\n│   │   ├── projects/\n│   │   │   ├── views/\n│   │   │   │   ├── delete-confirmation.njk\n│   │   │   │   ├── detail.njk\n│   │   │   │   ├── diagram.njk\n│   │   │   │   ├── list.njk\n│   │   │   │   └── new.njk\n│   │   │   ├── controller.js\n│   │   │   └── index.js\n│   │   ├── workflow-templates/\n│   │   │   ├── views/\n│   │   │   │   ├── delete-confirmation.njk\n│   │   │   │   ├── detail.njk\n│   │   │   │   ├── diagram.njk\n│   │   │   │   └── new.njk\n│   │   │   ├── controller.js\n│   │   │   └── index.js\n│   │   ├── index.js\n│   │   └── router.js\n│   └── index.js\n├── Dockerfile\n├── LICENCE\n├── README.md\n├── babel.config.cjs\n├── compose.yml\n├── jest.config.js\n├── nodemon.json\n├── package.json\n├── postcss.config.js\n├── sonar-project.properties\n├── stylelint.config.js\n├── tsconfig.json\n└── webpack.config.js",
  "languages_used": [
    "javascript"
  ],
  "ingested_repo_chunks": [
    {
      "chunk_id": "core_application_setup",
      "description": "Core application setup, configuration, and server initialization",
      "files": [
        "src/index.js",
        "src/server/index.js",
        "src/server/router.js",
        "src/config/config.js",
        "src/server/common/helpers/start-server.js",
        "src/server/common/helpers/start-server.test.js",
        "package.json",
        "Dockerfile",
        "compose.yml",
        "nodemon.json",
        "babel.config.cjs",
        "jest.config.js",
        "postcss.config.js",
        "stylelint.config.js",
        "tsconfig.json",
        "webpack.config.js"
      ],
      "content": "\n\n--- src/index.js ---\nimport process from 'node:process'\n\nimport { createLogger } from '~/src/server/common/helpers/logging/logger.js'\nimport { startServer } from '~/src/server/common/helpers/start-server.js'\n\nawait startServer()\n\nprocess.on('unhandledRejection', (error) => {\n  const logger = createLogger()\n  logger.info('Unhandled rejection')\n  logger.error(error)\n  process.exitCode = 1\n})\n\n\n--- src/server/index.js ---\nimport path from 'path'\nimport hapi from '@hapi/hapi'\n\nimport { config } from '~/src/config/config.js'\nimport { nunjucksConfig } from '~/src/config/nunjucks/nunjucks.js'\nimport { router } from './router.js'\nimport { requestLogger } from '~/src/server/common/helpers/logging/request-logger.js'\nimport { catchAll } from '~/src/server/common/helpers/errors.js'\nimport { secureContext } from '~/src/server/common/helpers/secure-context/index.js'\nimport { sessionCache } from '~/src/server/common/helpers/session-cache/session-cache.js'\nimport { getCacheEngine } from '~/src/server/common/helpers/session-cache/cache-engine.js'\nimport { pulse } from '~/src/server/common/helpers/pulse.js'\nimport { requestTracing } from '~/src/server/common/helpers/request-tracing.js'\nimport { setupProxy } from '~/src/server/common/helpers/proxy/setup-proxy.js'\n\nexport async function createServer() {\n  setupProxy()\n  const server = hapi.server({\n    port: config.get('port'),\n    routes: {\n      validate: {\n        options: {\n          abortEarly: false\n        }\n      },\n      files: {\n        relativeTo: path.resolve(config.get('root'), '.public')\n      },\n      security: {\n        hsts: {\n          maxAge: 31536000,\n          includeSubDomains: true,\n          preload: false\n        },\n        xss: 'enabled',\n        noSniff: true,\n        xframe: true\n      }\n    },\n    router: {\n      stripTrailingSlash: true\n    },\n    cache: [\n      {\n        name: config.get('session.cache.name'),\n        engine: getCacheEngine(\n          /** @type {Engine} */ (config.get('session.cache.engine'))\n        )\n      }\n    ],\n    state: {\n      strictHeader: false\n    }\n  })\n  await server.register([\n    requestLogger,\n    requestTracing,\n    secureContext,\n    pulse,\n    sessionCache,\n    nunjucksConfig,\n    router // Register all the controllers/routes defined in src/server/router.js\n  ])\n\n  server.ext('onPreResponse', catchAll)\n\n  return server\n}\n\n/**\n * @import {Engine} from '~/src/server/common/helpers/session-cache/cache-engine.js'\n */\n\n\n--- src/server/router.js ---\nimport inert from '@hapi/inert'\n\nimport { health } from '~/src/server/health/index.js'\nimport { home } from '~/src/server/home/index.js'\nimport { serveStaticFiles } from '~/src/server/common/helpers/serve-static-files.js'\nimport { about } from '~/src/server/about/index.js'\nimport { governanceTemplates } from '~/src/server/governance-templates/index.js'\nimport { workflowTemplates } from '~/src/server/workflow-templates/index.js'\nimport { checklistItemTemplates } from '~/src/server/checklist-item-templates/index.js'\nimport { projects } from '~/src/server/projects/index.js'\n\n/**\n * @satisfies {ServerRegisterPluginObject<void>}\n */\nexport const router = {\n  plugin: {\n    name: 'router',\n    async register(server) {\n      await server.register([inert])\n\n      // Health-check route. Used by platform to check if service is running, do not remove!\n      await server.register([health])\n\n      // Application specific routes, add your own routes here\n      await server.register([\n        home,\n        about,\n        governanceTemplates,\n        workflowTemplates,\n        checklistItemTemplates,\n        projects\n      ])\n\n      // Static assets\n      await server.register([serveStaticFiles])\n    }\n  }\n}\n\n/**\n * @import { ServerRegisterPluginObject } from '@hapi/hapi'\n */\n\n\n--- src/config/config.js ---\nimport convict from 'convict'\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nconst dirname = path.dirname(fileURLToPath(import.meta.url))\n\nconst fourHoursMs = 14400000\nconst oneWeekMs = 604800000\n\nconst isProduction = process.env.NODE_ENV === 'production'\nconst isTest = process.env.NODE_ENV === 'test'\nconst isDevelopment = process.env.NODE_ENV === 'development'\n\nexport const config = convict({\n  serviceVersion: {\n    doc: 'The service version, this variable is injected into your docker container in CDP environments',\n    format: String,\n    nullable: true,\n    default: null,\n    env: 'SERVICE_VERSION'\n  },\n  env: {\n    doc: 'The application environment.',\n    format: ['production', 'development', 'test'],\n    default: 'development',\n    env: 'NODE_ENV'\n  },\n  port: {\n    doc: 'The port to bind.',\n    format: 'port',\n    default: 3000,\n    env: 'PORT'\n  },\n  staticCacheTimeout: {\n    doc: 'Static cache timeout in milliseconds',\n    format: Number,\n    default: oneWeekMs,\n    env: 'STATIC_CACHE_TIMEOUT'\n  },\n  serviceName: {\n    doc: 'Applications Service Name',\n    format: String,\n    default: 'Defra SDLC Governance Checklist'\n  },\n  root: {\n    doc: 'Project root',\n    format: String,\n    default: path.resolve(dirname, '../..')\n  },\n  assetPath: {\n    doc: 'Asset path',\n    format: String,\n    default: '/public',\n    env: 'ASSET_PATH'\n  },\n  isProduction: {\n    doc: 'If this application running in the production environment',\n    format: Boolean,\n    default: isProduction\n  },\n  isDevelopment: {\n    doc: 'If this application running in the development environment',\n    format: Boolean,\n    default: isDevelopment\n  },\n  isTest: {\n    doc: 'If this application running in the test environment',\n    format: Boolean,\n    default: isTest\n  },\n  log: {\n    enabled: {\n      doc: 'Is logging enabled',\n      format: Boolean,\n      default: process.env.NODE_ENV !== 'test',\n      env: 'LOG_ENABLED'\n    },\n    level: {\n      doc: 'Logging level',\n      format: ['fatal', 'error', 'warn', 'info', 'debug', 'trace', 'silent'],\n      default: 'info',\n      env: 'LOG_LEVEL'\n    },\n    format: {\n      doc: 'Format to output logs in.',\n      format: ['ecs', 'pino-pretty'],\n      default: isProduction ? 'ecs' : 'pino-pretty',\n      env: 'LOG_FORMAT'\n    },\n    redact: {\n      doc: 'Log paths to redact',\n      format: Array,\n      default: isProduction\n        ? ['req.headers.authorization', 'req.headers.cookie', 'res.headers']\n        : []\n    }\n  },\n  httpProxy: /** @type {SchemaObj<string | null>} */ ({\n    doc: 'HTTP Proxy',\n    format: String,\n    nullable: true,\n    default: null,\n    env: 'HTTP_PROXY'\n  }),\n  isSecureContextEnabled: {\n    doc: 'Enable Secure Context',\n    format: Boolean,\n    default: isProduction,\n    env: 'ENABLE_SECURE_CONTEXT'\n  },\n  isMetricsEnabled: {\n    doc: 'Enable metrics reporting',\n    format: Boolean,\n    default: isProduction,\n    env: 'ENABLE_METRICS'\n  },\n  session: {\n    cache: {\n      engine: {\n        doc: 'backend cache is written to',\n        format: ['redis', 'memory'],\n        default: isProduction ? 'redis' : 'memory',\n        env: 'SESSION_CACHE_ENGINE'\n      },\n      name: {\n        doc: 'server side session cache name',\n        format: String,\n        default: 'session',\n        env: 'SESSION_CACHE_NAME'\n      },\n      ttl: {\n        doc: 'server side session cache ttl',\n        format: Number,\n        default: fourHoursMs,\n        env: 'SESSION_CACHE_TTL'\n      }\n    },\n    cookie: {\n      ttl: {\n        doc: 'Session cookie ttl',\n        format: Number,\n        default: fourHoursMs,\n        env: 'SESSION_COOKIE_TTL'\n      },\n      password: {\n        doc: 'session cookie password',\n        format: String,\n        default: 'the-password-must-be-at-least-32-characters-long',\n        env: 'SESSION_COOKIE_PASSWORD',\n        sensitive: true\n      },\n      secure: {\n        doc: 'set secure flag on cookie',\n        format: Boolean,\n        default: isProduction,\n        env: 'SESSION_COOKIE_SECURE'\n      }\n    }\n  },\n  redis: /** @type {Schema<RedisConfig>} */ ({\n    host: {\n      doc: 'Redis cache host',\n      format: String,\n      default: '127.0.0.1',\n      env: 'REDIS_HOST'\n    },\n    username: {\n      doc: 'Redis cache username',\n      format: String,\n      default: '',\n      env: 'REDIS_USERNAME'\n    },\n    password: {\n      doc: 'Redis cache password',\n      format: '*',\n      default: '',\n      sensitive: true,\n      env: 'REDIS_PASSWORD'\n    },\n    keyPrefix: {\n      doc: 'Redis cache key prefix name used to isolate the cached results across multiple clients',\n      format: String,\n      default: 'ai-sdlc-governance-frontend:',\n      env: 'REDIS_KEY_PREFIX'\n    },\n    useSingleInstanceCache: {\n      doc: 'Connect to a single instance of redis instead of a cluster.',\n      format: Boolean,\n      default: !isProduction,\n      env: 'USE_SINGLE_INSTANCE_CACHE'\n    },\n    useTLS: {\n      doc: 'Connect to redis using TLS',\n      format: Boolean,\n      default: isProduction,\n      env: 'REDIS_TLS'\n    }\n  }),\n  nunjucks: {\n    watch: {\n      doc: 'Reload templates when they are changed.',\n      format: Boolean,\n      default: isDevelopment\n    },\n    noCache: {\n      doc: 'Use a cache and recompile templates each time',\n      format: Boolean,\n      default: isDevelopment\n    }\n  },\n  tracing: {\n    header: {\n      doc: 'Which header to track',\n      format: String,\n      default: 'x-cdp-request-id',\n      env: 'TRACING_HEADER'\n    }\n  },\n  apiServer: {\n    doc: 'The base URL of the API server',\n    format: String,\n    default:\n      process.env.NODE_ENV === 'development'\n        ? 'http://localhost:3001'\n        : process.env.API_SERVER,\n    env: 'API_SERVER'\n  }\n})\n\nconfig.validate({ allowed: 'strict' })\n\n/**\n * @import { Schema, SchemaObj } from 'convict'\n * @import { RedisConfig } from '~/src/server/common/helpers/redis-client.js'\n */\n\n\n--- src/server/common/helpers/start-server.js ---\nimport { config } from '~/src/config/config.js'\n\nimport { createServer } from '~/src/server/index.js'\nimport { createLogger } from '~/src/server/common/helpers/logging/logger.js'\n\nasync function startServer() {\n  let server\n\n  try {\n    server = await createServer()\n    await server.start()\n\n    server.logger.info('Server started successfully')\n    server.logger.info(\n      `Access your frontend on http://localhost:${config.get('port')}`\n    )\n  } catch (error) {\n    const logger = createLogger()\n    logger.info('Server failed to start :(')\n    logger.error(error)\n  }\n\n  return server\n}\n\nexport { startServer }\n\n\n--- src/server/common/helpers/start-server.test.js ---\nimport hapi from '@hapi/hapi'\n\nconst mockLoggerInfo = jest.fn()\nconst mockLoggerError = jest.fn()\n\nconst mockHapiLoggerInfo = jest.fn()\nconst mockHapiLoggerError = jest.fn()\n\njest.mock('hapi-pino', () => ({\n  register: (server) => {\n    server.decorate('server', 'logger', {\n      info: mockHapiLoggerInfo,\n      error: mockHapiLoggerError\n    })\n  },\n  name: 'mock-hapi-pino'\n}))\njest.mock('~/src/server/common/helpers/logging/logger.js', () => ({\n  createLogger: () => ({\n    info: (...args) => mockLoggerInfo(...args),\n    error: (...args) => mockLoggerError(...args)\n  })\n}))\n\ndescribe('#startServer', () => {\n  const PROCESS_ENV = process.env\n  let createServerSpy\n  let hapiServerSpy\n  let startServerImport\n  let createServerImport\n\n  beforeAll(async () => {\n    process.env = { ...PROCESS_ENV }\n    process.env.PORT = '3097' // Set to obscure port to avoid conflicts\n\n    createServerImport = await import('~/src/server/index.js')\n    startServerImport = await import(\n      '~/src/server/common/helpers/start-server.js'\n    )\n\n    createServerSpy = jest.spyOn(createServerImport, 'createServer')\n    hapiServerSpy = jest.spyOn(hapi, 'server')\n  })\n\n  afterAll(() => {\n    process.env = PROCESS_ENV\n  })\n\n  describe('When server starts', () => {\n    let server\n\n    afterAll(async () => {\n      await server.stop({ timeout: 0 })\n    })\n\n    test('Should start up server as expected', async () => {\n      server = await startServerImport.startServer()\n\n      expect(createServerSpy).toHaveBeenCalled()\n      expect(hapiServerSpy).toHaveBeenCalled()\n      expect(mockLoggerInfo).toHaveBeenCalledWith(\n        'Using Catbox Memory session cache'\n      )\n      expect(mockHapiLoggerInfo).toHaveBeenNthCalledWith(\n        1,\n        'Custom secure context is disabled'\n      )\n      expect(mockHapiLoggerInfo).toHaveBeenNthCalledWith(\n        2,\n        'Server started successfully'\n      )\n      expect(mockHapiLoggerInfo).toHaveBeenNthCalledWith(\n        3,\n        'Access your frontend on http://localhost:3097'\n      )\n    })\n  })\n\n  describe('When server start fails', () => {\n    beforeAll(() => {\n      createServerSpy.mockRejectedValue(new Error('Server failed to start'))\n    })\n\n    test('Should log failed startup message', async () => {\n      await startServerImport.startServer()\n\n      expect(mockLoggerInfo).toHaveBeenCalledWith('Server failed to start :(')\n      expect(mockLoggerError).toHaveBeenCalledWith(\n        Error('Server failed to start')\n      )\n    })\n  })\n})\n\n\n--- package.json ---\n{\n  \"name\": \"ai-sdlc-governance-frontend\",\n  \"version\": \"0.0.0\",\n  \"description\": \"CDP Frontend Template\",\n  \"sideEffects\": false,\n  \"main\": \".server/index.js\",\n  \"type\": \"module\",\n  \"engines\": {\n    \"node\": \">=22\"\n  },\n  \"scripts\": {\n    \"build\": \"run-s build:frontend build:server\",\n    \"build:frontend\": \"NODE_ENV=production webpack\",\n    \"build:server\": \"NODE_ENV=production babel --delete-dir-on-start --ignore \\\"**/*.test.js\\\" --ignore \\\"**/test-helpers\\\" --copy-files --no-copy-ignored --out-dir ./.server ./src\",\n    \"dev\": \"run-p frontend:watch server:watch\",\n    \"dev:debug\": \"run-p frontend:watch server:debug\",\n    \"format\": \"prettier --write \\\"src/**/*.js\\\" \\\"**/*.{js,cjs,md,json,config.js,test.js}\\\"\",\n    \"format:check\": \"prettier --check \\\"src/**/*.js\\\" \\\"**/*.{js,cjs,md,json,config.js,test.js}\\\"\",\n    \"frontend:watch\": \"NODE_ENV=development webpack --watch\",\n    \"git:pre-commit-hook\": \"npm run format:check && npm run lint && npm test\",\n    \"postinstall\": \"npm run setup:husky && npm run build\",\n    \"lint\": \"run-s lint:js lint:scss lint:types\",\n    \"lint:fix\": \"eslint . --fix\",\n    \"lint:js\": \"eslint .\",\n    \"lint:types\": \"tsc --build tsconfig.json\",\n    \"lint:scss\": \"stylelint \\\"src/**/*.scss\\\" --cache --cache-location .cache/stylelint --cache-strategy content --color --ignore-path .gitignore\",\n    \"postversion\": \"git add package.json package-lock.json && git commit -m $npm_package_version\",\n    \"test\": \"jest --coverage --verbose\",\n    \"test:watch\": \"jest --watch\",\n    \"server:watch\": \"nodemon --exec tsx --enable-source-maps ./src\",\n    \"server:debug\": \"nodemon --exec tsx --enable-source-maps --inspect ./src\",\n    \"prestart\": \"npm run build\",\n    \"start\": \"NODE_ENV=production node --use-strict .\",\n    \"setup:husky\": \"node -e \\\"try { (await import('husky')).default() } catch (e) { if (e.code !== 'ERR_MODULE_NOT_FOUND') throw e }\\\" --input-type module\"\n  },\n  \"author\": \"Defra DDTS\",\n  \"license\": \"OGL-UK-3.0\",\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.26.0\",\n    \"@defra/hapi-tracing\": \"^1.0.0\",\n    \"@elastic/ecs-pino-format\": \"^1.5.0\",\n    \"@hapi/catbox-memory\": \"^6.0.2\",\n    \"@hapi/catbox-redis\": \"^7.0.2\",\n    \"@hapi/hapi\": \"^21.3.12\",\n    \"@hapi/inert\": \"^7.1.0\",\n    \"@hapi/vision\": \"^7.0.3\",\n    \"@hapi/yar\": \"^11.0.2\",\n    \"aws-embedded-metrics\": \"^4.2.0\",\n    \"babel-plugin-module-resolver\": \"^5.0.2\",\n    \"convict\": \"^6.2.4\",\n    \"cssnano\": \"^7.0.6\",\n    \"cssnano-preset-default\": \"^7.0.6\",\n    \"date-fns\": \"^4.1.0\",\n    \"global-agent\": \"^3.0.0\",\n    \"govuk-frontend\": \"^5.7.1\",\n    \"hapi-pino\": \"^12.1.0\",\n    \"hapi-pulse\": \"^3.0.1\",\n    \"ioredis\": \"^5.4.1\",\n    \"lodash\": \"^4.17.21\",\n    \"mermaid\": \"^11.4.1\",\n    \"node-fetch\": \"^3.3.2\",\n    \"nunjucks\": \"^3.2.4\",\n    \"pino\": \"^9.5.0\",\n    \"pino-pretty\": \"^13.0.0\",\n    \"undici\": \"^6.21.1\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.25.9\",\n    \"@babel/core\": \"^7.26.0\",\n    \"@babel/preset-env\": \"^7.26.0\",\n    \"@types/convict\": \"^6.1.6\",\n    \"@types/hapi__catbox-memory\": \"^4.1.8\",\n    \"@types/jest\": \"^29.5.14\",\n    \"@types/lodash\": \"^4.17.13\",\n    \"@types/node\": \"22.9.0\",\n    \"@types/nunjucks\": \"^3.2.6\",\n    \"@types/webpack-assets-manifest\": \"^5.1.4\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.17.0\",\n    \"@typescript-eslint/parser\": \"^7.17.0\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"babel-jest\": \"^29.7.0\",\n    \"babel-loader\": \"^9.2.1\",\n    \"babel-plugin-transform-import-meta\": \"^2.2.1\",\n    \"cheerio\": \"^1.0.0\",\n    \"clean-webpack-plugin\": \"^4.0.0\",\n    \"copy-webpack-plugin\": \"^12.0.2\",\n    \"eslint\": \"^8.57.0\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"eslint-config-standard\": \"^17.1.0\",\n    \"eslint-import-resolver-typescript\": \"^3.6.3\",\n    \"eslint-plugin-import\": \"^2.30.0\",\n    \"eslint-plugin-jest\": \"^28.8.3\",\n    \"eslint-plugin-jest-formatting\": \"^3.1.0\",\n    \"eslint-plugin-jsdoc\": \"^48.8.3\",\n    \"eslint-plugin-n\": \"^16.6.2\",\n    \"eslint-plugin-prettier\": \"^5.2.1\",\n    \"eslint-plugin-promise\": \"^6.4.0\",\n    \"husky\": \"^9.1.6\",\n    \"jest\": \"^29.7.0\",\n    \"jest-environment-jsdom\": \"^29.7.0\",\n    \"jest-fetch-mock\": \"3.0.3\",\n    \"nodemon\": \"^3.1.7\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"postcss-load-config\": \"^6.0.1\",\n    \"postcss-loader\": \"^8.1.1\",\n    \"prettier\": \"^3.3.3\",\n    \"sass-embedded\": \"^1.80.6\",\n    \"sass-loader\": \"^16.0.3\",\n    \"source-map-loader\": \"^5.0.0\",\n    \"stylelint\": \"^16.10.0\",\n    \"stylelint-config-gds\": \"^2.0.0\",\n    \"terser-webpack-plugin\": \"^5.3.10\",\n    \"tsx\": \"^4.19.2\",\n    \"typescript\": \"^5.6.3\",\n    \"webpack\": \"^5.96.1\",\n    \"webpack-assets-manifest\": \"^5.2.1\",\n    \"webpack-cli\": \"^5.1.4\"\n  }\n}\n\n\n--- Dockerfile ---\nARG PARENT_VERSION=latest-22\nARG PORT=3000\nARG PORT_DEBUG=9229\n\nFROM defradigital/node-development:${PARENT_VERSION} AS development\n\nENV TZ=\"Europe/London\"\n\nARG PARENT_VERSION\nLABEL uk.gov.defra.ffc.parent-image=defradigital/node-development:${PARENT_VERSION}\n\nARG PORT\nARG PORT_DEBUG\nENV PORT=${PORT}\nEXPOSE ${PORT} ${PORT_DEBUG}\n\nCOPY --chown=node:node --chmod=755 package*.json ./\nRUN npm install --ignore-scripts\nCOPY --chown=node:node --chmod=755 . .\nRUN npm run build\n\nCMD [ \"npm\", \"run\", \"dev\" ]\n\nFROM development AS production_build\n\nENV NODE_ENV=production\n\nRUN npm run build\n\nFROM defradigital/node:${PARENT_VERSION} AS production\n\nENV TZ=\"Europe/London\"\n\n# Add curl to template.\n# CDP PLATFORM HEALTHCHECK REQUIREMENT\nUSER root\nRUN apk update \\\n    && apk add curl \\\n    && apk cache clean\n\nUSER node\n\nARG PARENT_VERSION\nLABEL uk.gov.defra.ffc.parent-image=defradigital/node:${PARENT_VERSION}\n\nCOPY --from=production_build /home/node/package*.json ./\nCOPY --from=production_build /home/node/.server ./.server/\nCOPY --from=production_build /home/node/.public/ ./.public/\n\nRUN npm ci --omit=dev  --ignore-scripts\n\nARG PORT\nENV PORT=${PORT}\nEXPOSE ${PORT}\n\nCMD [ \"node\", \".\" ]\n\n\n--- compose.yml ---\nversion: '3.4'\nservices:\n\n  localstack:\n    image: localstack/localstack:3.0.2\n    ports:\n      - '4566:4566' # LocalStack Gateway\n      - '4510-4559:4510-4559' # external services port range\n    env_file:\n      - 'compose/aws.env'\n    environment:\n      DEBUG: ${DEBUG:-1}\n      LS_LOG: WARN # Localstack DEBUG Level\n      SERVICES: s3,sqs,sns,firehose\n      LOCALSTACK_HOST: 127.0.0.1\n    volumes:\n      - '${TMPDIR:-/tmp}/localstack:/var/lib/localstack'\n      - ./compose/start-localstack.sh:/etc/localstack/init/ready.d/start-localstack.sh\n    healthcheck:\n      test: ['CMD', 'curl', 'localhost:4566']\n      interval: 5s\n      start_period: 5s\n      retries: 3\n    networks:\n      - cdp-tenant\n\n  redis:\n    image: redis:7.2.3-alpine3.18\n    ports:\n      - '6379:6379'\n    restart: always\n    networks:\n      - cdp-tenant\n\n  mongodb:\n    image: mongo:6.0.13\n    networks:\n      - cdp-tenant\n    ports:\n      - '27017:27017'\n    volumes:\n      - mongodb-data:/data\n    restart: always\n\n################################################################################\n\n  your-frontend:\n    build: ./\n    ports:\n      - '3000:3000'\n    links:\n      - 'localstack:localstack'\n      - 'redis:redis'\n    depends_on:\n      localstack:\n        condition: service_healthy\n      redis:\n        condition: service_started\n    env_file:\n      - 'compose/aws.env'\n    environment:\n      PORT: 3000\n      NODE_ENV: development\n      REDIS_HOST: redis\n      LOCALSTACK_ENDPOINT: http://localstack:4566\n      USE_SINGLE_INSTANCE_CACHE: true\n    networks:\n      - cdp-tenant\n\n  # your-backend:\n  #   image: defradigital/your-backend:${YOUR_BACKEND_VERSION:-latest}\n  #   ports:\n  #     - '3555:3555'\n  #   links:\n  #     - 'localstack:localstack'\n  #     - 'mongodb:mongodb'\n  #   depends_on:\n  #     localstack:\n  #       condition: service_healthy\n  #     mongodb:\n  #       condition: service_started\n  #   env_file:\n  #     - 'compose/aws.env'\n  #   environment:\n  #     PORT: 3555\n  #     NODE_ENV: development\n  #     LOCALSTACK_ENDPOINT: http://localstack:4566\n  #   networks:\n  #     - cdp-tenant\n\n################################################################################\n\nvolumes:\n  mongodb-data:\n\nnetworks:\n  cdp-tenant:\n    driver: bridge\n\n\n--- nodemon.json ---\n{\n  \"watch\": [\"./src\"],\n  \"env\": {\n    \"NODE_ENV\": \"development\"\n  },\n  \"ignore\": [\"**/*.test.*\", \"./src/server/common/test-helpers\", \"./src/client\"],\n  \"ext\": \"cjs,js,json\",\n  \"signal\": \"SIGINT\"\n}\n\n\n--- babel.config.cjs ---\nconst { NODE_ENV } = process.env\n\n/**\n * @type {TransformOptions}\n */\nmodule.exports = {\n  browserslistEnv: 'node',\n  presets: [\n    [\n      '@babel/preset-env',\n      {\n        modules: NODE_ENV === 'test' ? 'auto' : false\n      }\n    ]\n  ],\n  plugins: [\n    [\n      'module-resolver',\n      {\n        root: ['./'],\n        alias: {\n          '~': '.'\n        }\n      }\n    ]\n  ],\n  env: {\n    test: {\n      plugins: ['babel-plugin-transform-import-meta']\n    }\n  }\n}\n\n/**\n * @import { TransformOptions } from '@babel/core'\n */\n\n\n--- jest.config.js ---\n/**\n * @type {Config}\n */\nexport default {\n  rootDir: '.',\n  verbose: true,\n  resetModules: true,\n  clearMocks: true,\n  silent: false,\n  testMatch: ['**/src/**/*.test.js'],\n  reporters: ['default', ['github-actions', { silent: false }], 'summary'],\n  setupFiles: ['<rootDir>/.jest/setup-file.js'],\n  setupFilesAfterEnv: ['<rootDir>/.jest/setup-file-after-env.js'],\n  collectCoverageFrom: ['src/**/*.js'],\n  coveragePathIgnorePatterns: [\n    '<rootDir>/node_modules/',\n    '<rootDir>/.server',\n    '<rootDir>/.public',\n    '<rootDir>/src/server/common/test-helpers',\n    '<rootDir>/src/client/javascripts/application.js',\n    '<rootDir>/src/index.js',\n    'index.js'\n  ],\n  coverageDirectory: '<rootDir>/coverage',\n  transform: {\n    '^.+\\\\.js$': 'babel-jest'\n  },\n  transformIgnorePatterns: [\n    `node_modules/(?!${[\n      '@defra/hapi-tracing', // Supports ESM only\n      'node-fetch' // Supports ESM only\n    ].join('|')}/)`\n  ]\n}\n\n/**\n * @import { Config } from 'jest'\n */\n\n\n--- postcss.config.js ---\nimport autoprefixer from 'autoprefixer'\nimport cssnano from 'cssnano'\nimport cssnanoPresetDefault from 'cssnano-preset-default'\n\n/**\n * @type {Config}\n */\nexport default {\n  plugins: [\n    // Add vendor prefixes\n    autoprefixer({\n      env: 'stylesheets'\n    }),\n\n    // Apply CSS optimisations\n    cssnano({\n      preset: cssnanoPresetDefault({\n        env: 'stylesheets'\n      })\n    })\n  ]\n}\n\n/**\n * @import { Config } from 'postcss-load-config'\n */\n\n\n--- stylelint.config.js ---\n/**\n * @type {Config}\n */\nexport default {\n  extends: ['stylelint-config-gds/scss'],\n  ignoreFiles: ['**/public/**', '**/package/**', '**/vendor/**']\n}\n\n/**\n * @import { Config } from 'stylelint'\n */\n\n\n--- tsconfig.json ---\n{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"checkJs\": false,\n    \"module\": \"NodeNext\",\n    \"noEmit\": true,\n    \"paths\": {\n      \"~/*\": [\"./*\"]\n    },\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"strictFunctionTypes\": true,\n    \"strictNullChecks\": true,\n    \"types\": [\"jest\"]\n  },\n  \"exclude\": [\".cache\", \".public\", \".server\", \"coverage\", \"node_modules\"],\n  \"include\": [\"**/*.cjs\", \"**/*.js\", \".eslintrc.*\", \".prettierrc.*\"]\n}\n\n\n--- webpack.config.js ---\nimport { createRequire } from 'node:module'\nimport { fileURLToPath } from 'node:url'\nimport path from 'path'\nimport CopyPlugin from 'copy-webpack-plugin'\nimport { CleanWebpackPlugin } from 'clean-webpack-plugin'\nimport TerserPlugin from 'terser-webpack-plugin'\nimport WebpackAssetsManifest from 'webpack-assets-manifest'\n\nconst { NODE_ENV = 'development' } = process.env\n\nconst require = createRequire(import.meta.url)\nconst dirname = path.dirname(fileURLToPath(import.meta.url))\n\nconst govukFrontendPath = path.dirname(\n  require.resolve('govuk-frontend/package.json')\n)\n\nconst ruleTypeAssetResource = 'asset/resource'\n\n/**\n * @type {Configuration}\n */\nexport default {\n  context: path.resolve(dirname, 'src/client'),\n  entry: {\n    application: {\n      import: ['./javascripts/application.js', './stylesheets/application.scss']\n    }\n  },\n  experiments: {\n    outputModule: true\n  },\n  mode: NODE_ENV === 'production' ? 'production' : 'development',\n  devtool: NODE_ENV === 'production' ? 'source-map' : 'inline-source-map',\n  watchOptions: {\n    aggregateTimeout: 200,\n    poll: 1000\n  },\n  output: {\n    filename:\n      NODE_ENV === 'production'\n        ? 'javascripts/[name].[contenthash:7].min.js'\n        : 'javascripts/[name].js',\n\n    chunkFilename:\n      NODE_ENV === 'production'\n        ? 'javascripts/[name].[chunkhash:7].min.js'\n        : 'javascripts/[name].js',\n\n    path: path.join(dirname, '.public'),\n    publicPath: '/public/',\n    libraryTarget: 'module',\n    module: true\n  },\n  resolve: {\n    alias: {\n      '/public/assets': path.join(govukFrontendPath, 'dist/govuk/assets')\n    }\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|mjs|scss)$/,\n        loader: 'source-map-loader',\n        enforce: 'pre'\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/,\n        options: {\n          browserslistEnv: 'javascripts',\n          cacheDirectory: true,\n          extends: path.join(dirname, 'babel.config.cjs'),\n          presets: [\n            [\n              '@babel/preset-env',\n              {\n                // Apply bug fixes to avoid transforms\n                bugfixes: true,\n\n                // Apply smaller \"loose\" transforms for browsers\n                loose: true,\n\n                // Skip CommonJS modules transform\n                modules: false\n              }\n            ]\n          ]\n        },\n\n        // Flag loaded modules as side effect free\n        sideEffects: false\n      },\n      {\n        test: /\\.scss$/,\n        type: ruleTypeAssetResource,\n        generator: {\n          binary: false,\n          filename:\n            NODE_ENV === 'production'\n              ? 'stylesheets/[name].[contenthash:7].min.css'\n              : 'stylesheets/[name].css'\n        },\n        use: [\n          'postcss-loader',\n          {\n            loader: 'sass-loader',\n            options: {\n              sassOptions: {\n                loadPaths: [\n                  path.join(dirname, 'src/client/stylesheets'),\n                  path.join(dirname, 'src/server/common/components'),\n                  path.join(dirname, 'src/server/common/templates/partials')\n                ],\n                quietDeps: true,\n                sourceMapIncludeSources: true,\n                style: 'expanded'\n              },\n              warnRuleAsWarning: true\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(png|svg|jpe?g|gif)$/,\n        type: ruleTypeAssetResource,\n        generator: {\n          filename: 'assets/images/[name][ext]'\n        }\n      },\n      {\n        test: /\\.(ico)$/,\n        type: ruleTypeAssetResource,\n        generator: {\n          filename: 'assets/images/[name][ext]'\n        }\n      },\n      {\n        test: /\\.(woff|woff2|eot|ttf|otf)$/,\n        type: ruleTypeAssetResource,\n        generator: {\n          filename: 'assets/fonts/[name][ext]'\n        }\n      }\n    ]\n  },\n  optimization: {\n    minimize: NODE_ENV === 'production',\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          // Use webpack default compress options\n          // https://webpack.js.org/configuration/optimization/#optimizationminimizer\n          compress: { passes: 2 },\n\n          // Allow Terser to remove @preserve comments\n          format: { comments: false },\n\n          // Include sources content from dependency source maps\n          sourceMap: {\n            includeSources: true\n          },\n\n          // Compatibility workarounds\n          safari10: true\n        }\n      })\n    ],\n\n    // Skip bundling unused modules\n    providedExports: true,\n    sideEffects: true,\n    usedExports: true\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new WebpackAssetsManifest(),\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.join(govukFrontendPath, 'dist/govuk/assets'),\n          to: 'assets'\n        },\n        {\n          from: path.resolve(\n            dirname,\n            'public/assets/javascripts/mermaid.min.js'\n          ),\n          to: 'javascripts/mermaid.min.js'\n        }\n      ]\n    })\n  ],\n  stats: {\n    errorDetails: true,\n    loggingDebug: ['sass-loader'],\n    preset: 'minimal'\n  },\n  target: 'browserslist:javascripts'\n}\n\n/**\n * @import { Configuration } from 'webpack'\n */\n"
    },
    {
      "chunk_id": "authentication_and_session_management",
      "description": "Authentication, authorization, and session management",
      "files": [
        "src/server/common/helpers/session-cache/cache-engine.js",
        "src/server/common/helpers/session-cache/cache-engine.test.js",
        "src/server/common/helpers/session-cache/session-cache.js",
        "src/server/common/helpers/redis-client.js",
        "src/server/common/helpers/redis-client.test.js"
      ],
      "content": "\n\n--- src/server/common/helpers/session-cache/cache-engine.js ---\nimport { buildRedisClient } from '~/src/server/common/helpers/redis-client.js'\nimport { Engine as CatboxRedis } from '@hapi/catbox-redis'\nimport { Engine as CatboxMemory } from '@hapi/catbox-memory'\n\nimport { config } from '~/src/config/config.js'\nimport { createLogger } from '~/src/server/common/helpers/logging/logger.js'\n\n/**\n * @typedef {'redis' | 'memory'} Engine\n */\n\n/**\n * @param {Engine} [engine]\n * @returns CatboxRedis | CatboxMemory\n */\nexport function getCacheEngine(engine) {\n  const logger = createLogger()\n\n  if (engine === 'redis') {\n    logger.info('Using Redis session cache')\n    const redisClient = buildRedisClient(config.get('redis'))\n    return new CatboxRedis({ client: redisClient })\n  }\n\n  if (config.get('isProduction')) {\n    logger.error(\n      'Catbox Memory is for local development only, it should not be used in production!'\n    )\n  }\n\n  logger.info('Using Catbox Memory session cache')\n  return new CatboxMemory()\n}\n\n\n--- src/server/common/helpers/session-cache/cache-engine.test.js ---\nimport { Engine as CatboxRedis } from '@hapi/catbox-redis'\nimport { Engine as CatboxMemory } from '@hapi/catbox-memory'\n\nimport { getCacheEngine } from '~/src/server/common/helpers/session-cache/cache-engine.js'\nimport { config } from '~/src/config/config.js'\n\nconst mockLoggerInfo = jest.fn()\nconst mockLoggerError = jest.fn()\n\njest.mock('ioredis', () => ({\n  ...jest.requireActual('ioredis'),\n  Cluster: jest.fn().mockReturnValue({ on: () => ({}) }),\n  Redis: jest.fn().mockReturnValue({ on: () => ({}) })\n}))\njest.mock('@hapi/catbox-redis')\njest.mock('@hapi/catbox-memory')\njest.mock('~/src/server/common/helpers/logging/logger.js', () => ({\n  createLogger: () => ({\n    info: (...args) => mockLoggerInfo(...args),\n    error: (...args) => mockLoggerError(...args)\n  })\n}))\n\ndescribe('#getCacheEngine', () => {\n  describe('When Redis cache engine has been requested', () => {\n    beforeEach(() => {\n      getCacheEngine('redis')\n    })\n\n    test('Should setup Redis cache', () => {\n      expect(CatboxRedis).toHaveBeenCalledWith(expect.any(Object))\n    })\n\n    test('Should log expected Redis message', () => {\n      expect(mockLoggerInfo).toHaveBeenCalledWith('Using Redis session cache')\n    })\n  })\n\n  describe('When In memory cache engine has been requested', () => {\n    beforeEach(() => {\n      getCacheEngine()\n    })\n\n    test('Should setup In memory cache', () => {\n      expect(CatboxMemory).toHaveBeenCalledTimes(1)\n    })\n\n    test('Should log expected CatBox memory message', () => {\n      expect(mockLoggerInfo).toHaveBeenCalledWith(\n        'Using Catbox Memory session cache'\n      )\n    })\n  })\n\n  describe('When In memory cache engine has been requested in Production', () => {\n    beforeEach(() => {\n      config.set('isProduction', true)\n      getCacheEngine()\n    })\n\n    test('Should log Production warning message', () => {\n      expect(mockLoggerError).toHaveBeenCalledWith(\n        'Catbox Memory is for local development only, it should not be used in production!'\n      )\n    })\n\n    test('Should setup In memory cache', () => {\n      expect(CatboxMemory).toHaveBeenCalledTimes(1)\n    })\n\n    test('Should log expected message', () => {\n      expect(mockLoggerInfo).toHaveBeenCalledWith(\n        'Using Catbox Memory session cache'\n      )\n    })\n  })\n})\n\n\n--- src/server/common/helpers/session-cache/session-cache.js ---\nimport yar from '@hapi/yar'\n\nimport { config } from '~/src/config/config.js'\n\nconst sessionConfig = config.get('session')\n\n/**\n * Set options.maxCookieSize to 0 to always use server-side storage\n * @satisfies {ServerRegisterPluginObject<YarOptions>}\n */\nexport const sessionCache = {\n  plugin: yar,\n  options: {\n    name: sessionConfig.cache.name,\n    cache: {\n      cache: sessionConfig.cache.name,\n      expiresIn: sessionConfig.cache.ttl\n    },\n    storeBlank: false,\n    errorOnCacheNotReady: true,\n    cookieOptions: {\n      password: sessionConfig.cookie.password,\n      ttl: sessionConfig.cookie.ttl,\n      isSecure: config.get('session.cookie.secure'),\n      clearInvalid: true\n    }\n  }\n}\n\n/**\n * @import { ServerRegisterPluginObject } from '@hapi/hapi'\n * @import { YarOptions } from '@hapi/yar'\n */\n\n\n--- src/server/common/helpers/redis-client.js ---\nimport { Cluster, Redis } from 'ioredis'\n\nimport { createLogger } from '~/src/server/common/helpers/logging/logger.js'\n\n/**\n * @typedef {object} RedisConfig\n * @property {string} host\n * @property {string} username\n * @property {string} password\n * @property {string} keyPrefix\n * @property {boolean} useSingleInstanceCache\n * @property {boolean} useTLS\n */\n\n/**\n * Setup Redis and provide a redis client\n *\n * Local development - 1 Redis instance\n * Environments - Elasticache / Redis Cluster with username and password\n * @param {RedisConfig} redisConfig - Redis config\n * @returns {Cluster | Redis}\n */\nexport function buildRedisClient(redisConfig) {\n  const logger = createLogger()\n  const port = 6379\n  const db = 0\n  const keyPrefix = redisConfig.keyPrefix\n  const host = redisConfig.host\n  let redisClient\n\n  const credentials =\n    redisConfig.username === ''\n      ? {}\n      : {\n          username: redisConfig.username,\n          password: redisConfig.password\n        }\n  const tls = redisConfig.useTLS ? { tls: {} } : {}\n\n  if (redisConfig.useSingleInstanceCache) {\n    redisClient = new Redis({\n      port,\n      host,\n      db,\n      keyPrefix,\n      ...credentials,\n      ...tls\n    })\n  } else {\n    redisClient = new Cluster(\n      [\n        {\n          host,\n          port\n        }\n      ],\n      {\n        keyPrefix,\n        slotsRefreshTimeout: 10000,\n        dnsLookup: (address, callback) => callback(null, address),\n        redisOptions: {\n          db,\n          ...credentials,\n          ...tls\n        }\n      }\n    )\n  }\n\n  redisClient.on('connect', () => {\n    logger.info('Connected to Redis server')\n  })\n\n  redisClient.on('error', (error) => {\n    logger.error(`Redis connection error ${error}`)\n  })\n\n  return redisClient\n}\n\n\n--- src/server/common/helpers/redis-client.test.js ---\nimport { Cluster, Redis } from 'ioredis'\n\nimport { config } from '~/src/config/config.js'\nimport { buildRedisClient } from '~/src/server/common/helpers/redis-client.js'\n\njest.mock('ioredis', () => ({\n  ...jest.requireActual('ioredis'),\n  Cluster: jest.fn().mockReturnValue({ on: () => ({}) }),\n  Redis: jest.fn().mockReturnValue({ on: () => ({}) })\n}))\n\ndescribe('#buildRedisClient', () => {\n  describe('When Redis Single InstanceCache is requested', () => {\n    beforeEach(() => {\n      buildRedisClient(config.get('redis'))\n    })\n\n    test('Should instantiate a single Redis client', () => {\n      expect(Redis).toHaveBeenCalledWith({\n        db: 0,\n        host: '127.0.0.1',\n        keyPrefix: 'ai-sdlc-governance-frontend:',\n        port: 6379\n      })\n    })\n  })\n\n  describe('When a Redis Cluster is requested', () => {\n    beforeEach(() => {\n      buildRedisClient({\n        ...config.get('redis'),\n        useSingleInstanceCache: false,\n        useTLS: true,\n        username: 'user',\n        password: 'pass'\n      })\n    })\n\n    test('Should instantiate a Redis Cluster client', () => {\n      expect(Cluster).toHaveBeenCalledWith(\n        [{ host: '127.0.0.1', port: 6379 }],\n        {\n          dnsLookup: expect.any(Function),\n          keyPrefix: 'ai-sdlc-governance-frontend:',\n          redisOptions: { db: 0, password: 'pass', tls: {}, username: 'user' },\n          slotsRefreshTimeout: 10000\n        }\n      )\n    })\n  })\n})\n"
    },
    {
      "chunk_id": "logging_and_monitoring",
      "description": "Logging, monitoring, and error handling",
      "files": [
        "src/server/common/helpers/logging/logger-options.js",
        "src/server/common/helpers/logging/logger.js",
        "src/server/common/helpers/logging/request-logger.js",
        "src/server/common/helpers/errors.js",
        "src/server/common/helpers/errors.test.js",
        "src/server/common/helpers/metrics.js",
        "src/server/common/helpers/metrics.test.js",
        "src/server/common/helpers/pulse.js",
        "src/server/health/controller.js",
        "src/server/health/controller.test.js",
        "src/server/health/index.js"
      ],
      "content": "\n\n--- src/server/common/helpers/logging/logger-options.js ---\nimport { ecsFormat } from '@elastic/ecs-pino-format'\nimport { config } from '~/src/config/config.js'\nimport { getTraceId } from '@defra/hapi-tracing'\nimport path from 'path'\n\nconst logConfig = config.get('log')\nconst serviceName = config.get('serviceName')\nconst serviceVersion = config.get('serviceVersion')\nconst isDevelopment = config.get('isDevelopment')\n\n/**\n * @type {{ecs: Omit<LoggerOptions, \"mixin\"|\"transport\">, \"pino-pretty\": {transport: {target: string}}}}\n */\nconst formatters = {\n  ecs: {\n    ...ecsFormat({\n      serviceVersion,\n      serviceName\n    })\n  },\n  'pino-pretty': {\n    transport: {\n      target: 'pino-pretty',\n      options: isDevelopment\n        ? {\n            destination: path.join(process.cwd(), 'logs', 'app.log'),\n            mkdir: true,\n            append: false\n          }\n        : undefined\n    }\n  }\n}\n\n/**\n * @satisfies {Options}\n */\nexport const loggerOptions = {\n  enabled: logConfig.enabled,\n  ignorePaths: ['/health'],\n  redact: {\n    paths: logConfig.redact,\n    remove: true\n  },\n  level: logConfig.level,\n  ...formatters[logConfig.format],\n  nesting: true,\n  mixin() {\n    const mixinValues = {}\n    const traceId = getTraceId()\n    if (traceId) {\n      mixinValues.trace = { id: traceId }\n    }\n    return mixinValues\n  }\n}\n\n/**\n * @import { Options } from 'hapi-pino'\n * @import { LoggerOptions } from 'pino'\n */\n\n\n--- src/server/common/helpers/logging/logger.js ---\nimport { pino } from 'pino'\n\nimport { loggerOptions } from '~/src/server/common/helpers/logging/logger-options.js'\n\nexport function createLogger() {\n  return pino(loggerOptions)\n}\n\n\n--- src/server/common/helpers/logging/request-logger.js ---\nimport hapiPino from 'hapi-pino'\n\nimport { loggerOptions } from '~/src/server/common/helpers/logging/logger-options.js'\n\n/**\n * @satisfies {ServerRegisterPluginObject<Options>}\n */\nexport const requestLogger = {\n  plugin: hapiPino,\n  options: loggerOptions\n}\n\n/**\n * @import { ServerRegisterPluginObject } from '@hapi/hapi'\n * @import { Options } from 'hapi-pino'\n */\n\n\n--- src/server/common/helpers/errors.js ---\nimport { statusCodes } from '~/src/server/common/constants/status-codes.js'\n\n/**\n * @param {number} statusCode\n */\nfunction statusCodeMessage(statusCode) {\n  switch (statusCode) {\n    case statusCodes.notFound:\n      return 'Page not found'\n    case statusCodes.forbidden:\n      return 'Forbidden'\n    case statusCodes.unauthorized:\n      return 'Unauthorized'\n    case statusCodes.badRequest:\n      return 'Bad Request'\n    default:\n      return 'Something went wrong'\n  }\n}\n\n/**\n * @param { Request } request\n * @param { ResponseToolkit } h\n */\nexport function catchAll(request, h) {\n  const { response } = request\n\n  if (!('isBoom' in response)) {\n    return h.continue\n  }\n\n  const statusCode = response.output.statusCode\n  const errorMessage = statusCodeMessage(statusCode)\n\n  if (statusCode >= statusCodes.internalServerError) {\n    request.logger.error(response?.stack)\n  }\n\n  return h\n    .view('error/index', {\n      pageTitle: errorMessage,\n      heading: statusCode,\n      message: errorMessage\n    })\n    .code(statusCode)\n}\n\n/**\n * @import { Request, ResponseToolkit } from '@hapi/hapi'\n */\n\n\n--- src/server/common/helpers/errors.test.js ---\nimport { createServer } from '~/src/server/index.js'\nimport { statusCodes } from '~/src/server/common/constants/status-codes.js'\nimport { catchAll } from '~/src/server/common/helpers/errors.js'\n\ndescribe('#errors', () => {\n  /** @type {Server} */\n  let server\n\n  beforeAll(async () => {\n    server = await createServer()\n    await server.initialize()\n  })\n\n  afterAll(async () => {\n    await server.stop({ timeout: 0 })\n  })\n\n  test('Should provide expected Not Found page', async () => {\n    const { result, statusCode } = await server.inject({\n      method: 'GET',\n      url: '/non-existent-path'\n    })\n\n    expect(result).toEqual(\n      expect.stringContaining(\n        'Page not found | Defra SDLC Governance Checklist'\n      )\n    )\n    expect(statusCode).toBe(statusCodes.notFound)\n  })\n})\n\ndescribe('#catchAll', () => {\n  const mockErrorLogger = jest.fn()\n  const mockStack = 'Mock error stack'\n  const errorPage = 'error/index'\n  const mockRequest = (/** @type {number} */ statusCode) => ({\n    response: {\n      isBoom: true,\n      stack: mockStack,\n      output: {\n        statusCode\n      }\n    },\n    logger: { error: mockErrorLogger }\n  })\n  const mockToolkitView = jest.fn()\n  const mockToolkitCode = jest.fn()\n  const mockToolkit = {\n    view: mockToolkitView.mockReturnThis(),\n    code: mockToolkitCode.mockReturnThis()\n  }\n\n  test('Should provide expected \"Not Found\" page', () => {\n    catchAll(mockRequest(statusCodes.notFound), mockToolkit)\n\n    expect(mockErrorLogger).not.toHaveBeenCalledWith(mockStack)\n    expect(mockToolkitView).toHaveBeenCalledWith(errorPage, {\n      pageTitle: 'Page not found',\n      heading: statusCodes.notFound,\n      message: 'Page not found'\n    })\n    expect(mockToolkitCode).toHaveBeenCalledWith(statusCodes.notFound)\n  })\n\n  test('Should provide expected \"Forbidden\" page', () => {\n    catchAll(mockRequest(statusCodes.forbidden), mockToolkit)\n\n    expect(mockErrorLogger).not.toHaveBeenCalledWith(mockStack)\n    expect(mockToolkitView).toHaveBeenCalledWith(errorPage, {\n      pageTitle: 'Forbidden',\n      heading: statusCodes.forbidden,\n      message: 'Forbidden'\n    })\n    expect(mockToolkitCode).toHaveBeenCalledWith(statusCodes.forbidden)\n  })\n\n  test('Should provide expected \"Unauthorized\" page', () => {\n    catchAll(mockRequest(statusCodes.unauthorized), mockToolkit)\n\n    expect(mockErrorLogger).not.toHaveBeenCalledWith(mockStack)\n    expect(mockToolkitView).toHaveBeenCalledWith(errorPage, {\n      pageTitle: 'Unauthorized',\n      heading: statusCodes.unauthorized,\n      message: 'Unauthorized'\n    })\n    expect(mockToolkitCode).toHaveBeenCalledWith(statusCodes.unauthorized)\n  })\n\n  test('Should provide expected \"Bad Request\" page', () => {\n    catchAll(mockRequest(statusCodes.badRequest), mockToolkit)\n\n    expect(mockErrorLogger).not.toHaveBeenCalledWith(mockStack)\n    expect(mockToolkitView).toHaveBeenCalledWith(errorPage, {\n      pageTitle: 'Bad Request',\n      heading: statusCodes.badRequest,\n      message: 'Bad Request'\n    })\n    expect(mockToolkitCode).toHaveBeenCalledWith(statusCodes.badRequest)\n  })\n\n  test('Should provide expected default page', () => {\n    catchAll(mockRequest(statusCodes.imATeapot), mockToolkit)\n\n    expect(mockErrorLogger).not.toHaveBeenCalledWith(mockStack)\n    expect(mockToolkitView).toHaveBeenCalledWith(errorPage, {\n      pageTitle: 'Something went wrong',\n      heading: statusCodes.imATeapot,\n      message: 'Something went wrong'\n    })\n    expect(mockToolkitCode).toHaveBeenCalledWith(statusCodes.imATeapot)\n  })\n\n  test('Should provide expected \"Something went wrong\" page and log error for internalServerError', () => {\n    catchAll(mockRequest(statusCodes.internalServerError), mockToolkit)\n\n    expect(mockErrorLogger).toHaveBeenCalledWith(mockStack)\n    expect(mockToolkitView).toHaveBeenCalledWith(errorPage, {\n      pageTitle: 'Something went wrong',\n      heading: statusCodes.internalServerError,\n      message: 'Something went wrong'\n    })\n    expect(mockToolkitCode).toHaveBeenCalledWith(\n      statusCodes.internalServerError\n    )\n  })\n})\n\n/**\n * @import { Server } from '@hapi/hapi'\n */\n\n\n--- src/server/common/helpers/metrics.js ---\nimport {\n  createMetricsLogger,\n  Unit,\n  StorageResolution\n} from 'aws-embedded-metrics'\n\nimport { config } from '~/src/config/config.js'\nimport { createLogger } from '~/src/server/common/helpers/logging/logger.js'\n\n/**\n * Aws embedded metrics wrapper\n * @param {string} metricName\n * @param {number} value\n * @returns {Promise<void>}\n */\nexport async function metricsCounter(metricName, value = 1) {\n  const isMetricsEnabled = config.get('isMetricsEnabled')\n\n  if (!isMetricsEnabled) {\n    return\n  }\n\n  try {\n    const metricsLogger = createMetricsLogger()\n    metricsLogger.putMetric(\n      metricName,\n      value,\n      Unit.Count,\n      StorageResolution.Standard\n    )\n    await metricsLogger.flush()\n  } catch (error) {\n    createLogger().error(error, error.message)\n  }\n}\n\n\n--- src/server/common/helpers/metrics.test.js ---\nimport { StorageResolution, Unit } from 'aws-embedded-metrics'\n\nimport { config } from '~/src/config/config.js'\nimport { metricsCounter } from '~/src/server/common/helpers/metrics.js'\n\nconst mockPutMetric = jest.fn()\nconst mockFlush = jest.fn()\nconst mockLoggerError = jest.fn()\n\njest.mock('aws-embedded-metrics', () => ({\n  ...jest.requireActual('aws-embedded-metrics'),\n  createMetricsLogger: () => ({\n    putMetric: mockPutMetric,\n    flush: mockFlush\n  })\n}))\njest.mock('~/src/server/common/helpers/logging/logger.js', () => ({\n  createLogger: () => ({ error: (...args) => mockLoggerError(...args) })\n}))\n\nconst mockMetricsName = 'mock-metrics-name'\nconst defaultMetricsValue = 1\nconst mockValue = 200\n\ndescribe('#metrics', () => {\n  describe('When metrics is not enabled', () => {\n    beforeEach(async () => {\n      config.set('isMetricsEnabled', false)\n      await metricsCounter(mockMetricsName, mockValue)\n    })\n\n    test('Should not call metric', () => {\n      expect(mockPutMetric).not.toHaveBeenCalled()\n    })\n\n    test('Should not call flush', () => {\n      expect(mockFlush).not.toHaveBeenCalled()\n    })\n  })\n\n  describe('When metrics is enabled', () => {\n    beforeEach(() => {\n      config.set('isMetricsEnabled', true)\n    })\n\n    test('Should send metric with default value', async () => {\n      await metricsCounter(mockMetricsName)\n\n      expect(mockPutMetric).toHaveBeenCalledWith(\n        mockMetricsName,\n        defaultMetricsValue,\n        Unit.Count,\n        StorageResolution.Standard\n      )\n    })\n\n    test('Should send metric', async () => {\n      await metricsCounter(mockMetricsName, mockValue)\n\n      expect(mockPutMetric).toHaveBeenCalledWith(\n        mockMetricsName,\n        mockValue,\n        Unit.Count,\n        StorageResolution.Standard\n      )\n    })\n\n    test('Should not call flush', async () => {\n      await metricsCounter(mockMetricsName, mockValue)\n      expect(mockFlush).toHaveBeenCalled()\n    })\n  })\n\n  describe('When metrics throws', () => {\n    const mockError = 'mock-metrics-put-error'\n\n    beforeEach(async () => {\n      config.set('isMetricsEnabled', true)\n      mockFlush.mockRejectedValue(new Error(mockError))\n\n      await metricsCounter(mockMetricsName, mockValue)\n    })\n\n    test('Should log expected error', () => {\n      expect(mockLoggerError).toHaveBeenCalledWith(Error(mockError), mockError)\n    })\n  })\n})\n\n/**\n * @import { Server } from '@hapi/hapi'\n */\n\n\n--- src/server/common/helpers/pulse.js ---\nimport hapiPulse from 'hapi-pulse'\nimport { createLogger } from '~/src/server/common/helpers/logging/logger.js'\n\nconst tenSeconds = 10 * 1000\n\nconst pulse = {\n  plugin: hapiPulse,\n  options: {\n    logger: createLogger(),\n    timeout: tenSeconds\n  }\n}\n\nexport { pulse }\n\n\n--- src/server/health/controller.js ---\nimport { statusCodes } from '~/src/server/common/constants/status-codes.js'\n\n/**\n * A generic health-check endpoint. Used by the platform to check if the service is up and handling requests.\n * @satisfies {Partial<ServerRoute>}\n */\nexport const healthController = {\n  handler(_request, h) {\n    return h.response({ message: 'success' }).code(statusCodes.ok)\n  }\n}\n\n/**\n * @import { ServerRoute } from '@hapi/hapi'\n */\n\n\n--- src/server/health/controller.test.js ---\nimport { createServer } from '~/src/server/index.js'\nimport { statusCodes } from '~/src/server/common/constants/status-codes.js'\n\ndescribe('#healthController', () => {\n  /** @type {Server} */\n  let server\n\n  beforeAll(async () => {\n    server = await createServer()\n    await server.initialize()\n  })\n\n  afterAll(async () => {\n    await server.stop({ timeout: 0 })\n  })\n\n  test('Should provide expected response', async () => {\n    const { result, statusCode } = await server.inject({\n      method: 'GET',\n      url: '/health'\n    })\n\n    expect(result).toEqual({ message: 'success' })\n    expect(statusCode).toBe(statusCodes.ok)\n  })\n})\n\n/**\n * @import { Server } from '@hapi/hapi'\n */\n\n\n--- src/server/health/index.js ---\nimport { healthController } from '~/src/server/health/controller.js'\n\n/**\n * @satisfies {ServerRegisterPluginObject<void>}\n */\nexport const health = {\n  plugin: {\n    name: 'health',\n    register(server) {\n      server.route({\n        method: 'GET',\n        path: '/health',\n        ...healthController\n      })\n    }\n  }\n}\n\n/**\n * @import { ServerRegisterPluginObject } from '@hapi/hapi'\n */\n"
    },
    {
      "chunk_id": "security_and_networking",
      "description": "Security configurations and networking setup",
      "files": [
        "src/server/common/helpers/secure-context/get-trust-store-certs.js",
        "src/server/common/helpers/secure-context/get-trust-store-certs.test.js",
        "src/server/common/helpers/secure-context/index.js",
        "src/server/common/helpers/secure-context/secure-context.js",
        "src/server/common/helpers/secure-context/secure-context.test.js",
        "src/server/common/helpers/proxy/setup-proxy.js",
        "src/server/common/helpers/proxy/setup-proxy.test.js",
        "src/server/common/constants/status-codes.js"
      ],
      "content": "\n\n--- src/server/common/helpers/secure-context/get-trust-store-certs.js ---\n/**\n * Get base64 certs from all environment variables starting with TRUSTSTORE_\n * @param {NodeJS.ProcessEnv} envs\n * @returns {string[]}\n */\nexport function getTrustStoreCerts(envs) {\n  return Object.entries(envs)\n    .map(([key, value]) => key.startsWith('TRUSTSTORE_') && value)\n    .filter(\n      /** @returns {envValue is string} */\n      (envValue) => Boolean(envValue)\n    )\n    .map((envValue) => Buffer.from(envValue, 'base64').toString().trim())\n}\n\n\n--- src/server/common/helpers/secure-context/get-trust-store-certs.test.js ---\nimport { getTrustStoreCerts } from '~/src/server/common/helpers/secure-context/get-trust-store-certs.js'\n\ndescribe('#getTrustStoreCerts', () => {\n  const mockProcessEnvWithCerts = {\n    TRUSTSTORE_CA_ONE:\n      'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCm1vY2stY2VydC1kb3JpcwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==',\n    UNRELATED_ENV: 'not-a-cert'\n  }\n\n  test('Should provide expected result with \"certs\"', () => {\n    expect(getTrustStoreCerts(mockProcessEnvWithCerts)).toEqual([\n      '-----BEGIN CERTIFICATE-----\\nmock-cert-doris\\n-----END CERTIFICATE-----'\n    ])\n  })\n\n  test('Should provide expected empty array', () => {\n    expect(getTrustStoreCerts({})).toEqual([])\n  })\n})\n\n\n--- src/server/common/helpers/secure-context/index.js ---\nexport { secureContext } from '~/src/server/common/helpers/secure-context/secure-context.js'\n\n\n--- src/server/common/helpers/secure-context/secure-context.js ---\nimport tls from 'node:tls'\n\nimport { config } from '~/src/config/config.js'\nimport { getTrustStoreCerts } from '~/src/server/common/helpers/secure-context/get-trust-store-certs.js'\n\n/**\n * Creates a new secure context loaded from Base64 encoded certs\n * @satisfies {ServerRegisterPluginObject<void>}\n */\nexport const secureContext = {\n  plugin: {\n    name: 'secure-context',\n    register(server) {\n      if (config.get('isSecureContextEnabled')) {\n        const originalTlsCreateSecureContext = tls.createSecureContext\n\n        tls.createSecureContext = function (options = {}) {\n          const trustStoreCerts = getTrustStoreCerts(process.env)\n\n          if (!trustStoreCerts.length) {\n            server.logger.info('Could not find any TRUSTSTORE_ certificates')\n          }\n\n          const tlsSecureContext = originalTlsCreateSecureContext(options)\n\n          trustStoreCerts.forEach((cert) => {\n            tlsSecureContext.context.addCACert(cert)\n          })\n\n          return tlsSecureContext\n        }\n\n        server.decorate('server', 'secureContext', tls.createSecureContext())\n      } else {\n        server.logger.info('Custom secure context is disabled')\n      }\n    }\n  }\n}\n\n/**\n * @import { ServerRegisterPluginObject } from '@hapi/hapi'\n */\n\n\n--- src/server/common/helpers/secure-context/secure-context.test.js ---\nimport hapi from '@hapi/hapi'\n\nimport { secureContext } from '~/src/server/common/helpers/secure-context/secure-context.js'\nimport { requestLogger } from '~/src/server/common/helpers/logging/request-logger.js'\nimport { config } from '~/src/config/config.js'\n\nconst mockAddCACert = jest.fn()\nconst mockTlsCreateSecureContext = jest\n  .fn()\n  .mockReturnValue({ context: { addCACert: mockAddCACert } })\n\njest.mock('hapi-pino', () => ({\n  register: (server) => {\n    server.decorate('server', 'logger', {\n      info: jest.fn(),\n      error: jest.fn()\n    })\n  },\n  name: 'mock-hapi-pino'\n}))\njest.mock('node:tls', () => ({\n  ...jest.requireActual('node:tls'),\n  createSecureContext: (...args) => mockTlsCreateSecureContext(...args)\n}))\n\ndescribe('#secureContext', () => {\n  let server\n\n  describe('When secure context is disabled', () => {\n    beforeEach(async () => {\n      config.set('isSecureContextEnabled', false)\n      server = hapi.server()\n      await server.register([requestLogger, secureContext])\n    })\n\n    afterEach(async () => {\n      config.set('isSecureContextEnabled', false)\n      await server.stop({ timeout: 0 })\n    })\n\n    test('secureContext decorator should not be available', () => {\n      expect(server.logger.info).toHaveBeenCalledWith(\n        'Custom secure context is disabled'\n      )\n    })\n\n    test('Logger should give us disabled message', () => {\n      expect(server.secureContext).toBeUndefined()\n    })\n  })\n\n  describe('When secure context is enabled', () => {\n    const PROCESS_ENV = process.env\n\n    beforeAll(() => {\n      process.env = { ...PROCESS_ENV }\n      process.env.TRUSTSTORE_ONE = 'mock-trust-store-cert-one'\n    })\n\n    beforeEach(async () => {\n      config.set('isSecureContextEnabled', true)\n      server = hapi.server()\n      await server.register([requestLogger, secureContext])\n    })\n\n    afterEach(async () => {\n      config.set('isSecureContextEnabled', false)\n      await server.stop({ timeout: 0 })\n    })\n\n    afterAll(() => {\n      process.env = PROCESS_ENV\n    })\n\n    test('Original tls.createSecureContext should have been called', () => {\n      expect(mockTlsCreateSecureContext).toHaveBeenCalledWith({})\n    })\n\n    test('addCACert should have been called', () => {\n      expect(mockAddCACert).toHaveBeenCalled()\n    })\n\n    test('secureContext decorator should be available', () => {\n      expect(server.secureContext).toEqual({\n        context: { addCACert: expect.any(Function) }\n      })\n    })\n  })\n\n  describe('When secure context is enabled without TRUSTSTORE_ certs', () => {\n    beforeEach(async () => {\n      config.set('isSecureContextEnabled', true)\n      server = hapi.server()\n      await server.register([requestLogger, secureContext])\n    })\n\n    afterEach(async () => {\n      config.set('isSecureContextEnabled', false)\n      await server.stop({ timeout: 0 })\n    })\n\n    test('Should log about not finding any TRUSTSTORE_ certs', () => {\n      expect(server.logger.info).toHaveBeenCalledWith(\n        'Could not find any TRUSTSTORE_ certificates'\n      )\n    })\n  })\n})\n\n\n--- src/server/common/helpers/proxy/setup-proxy.js ---\nimport { ProxyAgent, setGlobalDispatcher } from 'undici'\nimport { bootstrap } from 'global-agent'\nimport { createLogger } from '~/src/server/common/helpers/logging/logger.js'\nimport { config } from '~/src/config/config.js'\nconst logger = createLogger()\n\n/**\n * If HTTP_PROXY is set setupProxy() will enable it globally\n * for a number of http clients.\n * Node Fetch will still need to pass a ProxyAgent in on each call.\n */\nexport function setupProxy() {\n  const proxyUrl = config.get('httpProxy')\n\n  if (proxyUrl) {\n    logger.info('setting up global proxies')\n\n    // Undici proxy\n    setGlobalDispatcher(new ProxyAgent(proxyUrl))\n\n    // global-agent (axios/request/and others)\n    bootstrap()\n    global.GLOBAL_AGENT.HTTP_PROXY = proxyUrl\n  }\n}\n\n\n--- src/server/common/helpers/proxy/setup-proxy.test.js ---\nimport { config } from '~/src/config/config.js'\nimport { setupProxy } from '~/src/server/common/helpers/proxy/setup-proxy.js'\nimport { getGlobalDispatcher, ProxyAgent } from 'undici'\n\ndescribe('setupProxy', () => {\n  afterEach(() => {\n    config.set('httpProxy', null)\n  })\n\n  test('Should not setup proxy if the environment variable is not set', () => {\n    config.set('httpProxy', null)\n    setupProxy()\n\n    expect(global?.GLOBAL_AGENT?.HTTP_PROXY).toBeUndefined()\n\n    const undiciDispatcher = getGlobalDispatcher()\n\n    expect(undiciDispatcher).not.toBeInstanceOf(ProxyAgent)\n  })\n\n  test('Should setup proxy if the environment variable is set', () => {\n    config.set('httpProxy', 'http://localhost:8080')\n    setupProxy()\n    expect(global?.GLOBAL_AGENT?.HTTP_PROXY).toBe('http://localhost:8080')\n    const undiciDispatcher = getGlobalDispatcher()\n    expect(undiciDispatcher).toBeInstanceOf(ProxyAgent)\n  })\n})\n\n\n--- src/server/common/constants/status-codes.js ---\n/**\n * @typedef {Record<string, number>} StatusCodes\n */\nexport const statusCodes = {\n  ok: 200,\n  noContent: 204,\n  badRequest: 400,\n  unauthorized: 401,\n  forbidden: 403,\n  notFound: 404,\n  imATeapot: 418,\n  internalServerError: 500\n}\n"
    },
    {
      "chunk_id": "template_engine_and_view_helpers",
      "description": "Template engine configuration and view helpers",
      "files": [
        "src/config/nunjucks/nunjucks.js",
        "src/config/nunjucks/context/build-navigation.js",
        "src/config/nunjucks/context/build-navigation.test.js",
        "src/config/nunjucks/context/context.js",
        "src/config/nunjucks/context/context.test.js",
        "src/config/nunjucks/filters/filters.js",
        "src/config/nunjucks/filters/format-currency.js",
        "src/config/nunjucks/filters/format-currency.test.js",
        "src/config/nunjucks/filters/format-date.js",
        "src/config/nunjucks/filters/format-date.test.js",
        "src/config/nunjucks/filters/map.js",
        "src/config/nunjucks/globals.js",
        "src/server/common/components/heading/template.test.js",
        "src/server/common/components/heading/_heading.scss",
        "src/server/common/components/heading/macro.njk",
        "src/server/common/components/heading/template.njk",
        "src/server/common/test-helpers/component-helpers.js"
      ],
      "content": "\n\n--- src/config/nunjucks/nunjucks.js ---\nimport { fileURLToPath } from 'node:url'\nimport path from 'path'\nimport nunjucks from 'nunjucks'\nimport hapiVision from '@hapi/vision'\n\nimport { config } from '~/src/config/config.js'\nimport { context } from './context/context.js'\nimport * as filters from './filters/filters.js'\nimport * as globals from './globals.js'\n\nconst dirname = path.dirname(fileURLToPath(import.meta.url))\nconst nunjucksEnvironment = nunjucks.configure(\n  [\n    'node_modules/govuk-frontend/dist/',\n    path.resolve(dirname, '../../views'),\n    path.resolve(dirname, '../../server/common/templates'),\n    path.resolve(dirname, '../../server/common/components')\n  ],\n  {\n    autoescape: true,\n    throwOnUndefined: false,\n    trimBlocks: true,\n    lstripBlocks: true,\n    watch: config.get('nunjucks.watch'),\n    noCache: config.get('nunjucks.noCache')\n  }\n)\n\n/**\n * @satisfies {ServerRegisterPluginObject<ServerViewsConfiguration>}\n */\nexport const nunjucksConfig = {\n  plugin: hapiVision,\n  options: {\n    engines: {\n      njk: {\n        /**\n         * @param {string} src\n         * @param {{ environment: typeof nunjucksEnvironment }} options\n         * @returns {(options: ReturnType<Awaited<typeof context>>) => string}\n         */\n        compile(src, options) {\n          const template = nunjucks.compile(src, options.environment)\n          return (ctx) => template.render(ctx)\n        }\n      }\n    },\n    compileOptions: {\n      environment: nunjucksEnvironment\n    },\n    relativeTo: path.resolve(dirname, '../..'),\n    path: 'server',\n    isCached: config.get('isProduction'),\n    context\n  }\n}\n\nObject.entries(globals).forEach(([name, global]) => {\n  nunjucksEnvironment.addGlobal(name, global)\n})\n\nObject.entries(filters).forEach(([name, filter]) => {\n  nunjucksEnvironment.addFilter(name, filter)\n})\n\n/**\n * @import { ServerRegisterPluginObject } from '@hapi/hapi'\n * @import { ServerViewsConfiguration } from '@hapi/vision'\n */\n\n\n--- src/config/nunjucks/context/build-navigation.js ---\n/**\n * @param {Partial<import('@hapi/hapi').Request> | null} request\n */\nexport function buildNavigation(request) {\n  return [\n    {\n      text: 'Home',\n      url: '/',\n      isActive: request?.path === '/'\n    },\n    {\n      text: 'Projects',\n      url: '/projects',\n      isActive: request?.path?.startsWith('/projects')\n    }\n  ]\n}\n\n\n--- src/config/nunjucks/context/build-navigation.test.js ---\nimport { buildNavigation } from '~/src/config/nunjucks/context/build-navigation.js'\n\n/**\n * @param {Partial<Request>} [options]\n */\nfunction mockRequest(options) {\n  return { ...options }\n}\n\ndescribe('#buildNavigation', () => {\n  test('Should provide expected navigation details', () => {\n    expect(\n      buildNavigation(mockRequest({ path: '/non-existent-path' }))\n    ).toEqual([\n      {\n        isActive: false,\n        text: 'Home',\n        url: '/'\n      },\n      {\n        isActive: false,\n        text: 'Projects',\n        url: '/projects'\n      }\n    ])\n  })\n\n  test('Should mark projects as active when on projects path', () => {\n    expect(buildNavigation(mockRequest({ path: '/projects' }))).toEqual([\n      {\n        isActive: false,\n        text: 'Home',\n        url: '/'\n      },\n      {\n        isActive: true,\n        text: 'Projects',\n        url: '/projects'\n      }\n    ])\n  })\n\n  test('should build navigation with correct structure', () => {\n    const mockConfig = {\n      path: '/'\n    }\n\n    const result = buildNavigation(mockConfig)\n    expect(result).toEqual([\n      {\n        text: 'Home',\n        url: '/',\n        isActive: true\n      },\n      {\n        text: 'Projects',\n        url: '/projects',\n        isActive: false\n      }\n    ])\n  })\n})\n\n/**\n * @import { Request } from '@hapi/hapi'\n */\n\n\n--- src/config/nunjucks/context/context.js ---\nimport path from 'node:path'\nimport { readFileSync } from 'node:fs'\n\nimport { config } from '~/src/config/config.js'\nimport { createLogger } from '~/src/server/common/helpers/logging/logger.js'\nimport { buildNavigation } from '~/src/config/nunjucks/context/build-navigation.js'\n\nconst logger = createLogger()\nconst assetPath = config.get('assetPath')\nconst manifestPath = path.join(\n  config.get('root'),\n  '.public/assets-manifest.json'\n)\n\n/** @type {Record<string, string> | undefined} */\nlet webpackManifest\n\n/**\n * @param {Request | null} request\n */\nexport function context(request) {\n  if (!webpackManifest) {\n    try {\n      webpackManifest = JSON.parse(readFileSync(manifestPath, 'utf-8'))\n    } catch (error) {\n      logger.error(`Webpack ${path.basename(manifestPath)} not found`)\n    }\n  }\n\n  return {\n    assetPath: `${assetPath}/assets`,\n    serviceName: config.get('serviceName'),\n    serviceUrl: '/',\n    breadcrumbs: [],\n    navigation: buildNavigation(request),\n\n    /**\n     * @param {string} asset\n     */\n    getAssetPath(asset) {\n      const webpackAssetPath = webpackManifest?.[asset]\n      return `${assetPath}/${webpackAssetPath ?? asset}`\n    }\n  }\n}\n\n/**\n * @import { Request } from '@hapi/hapi'\n */\n\n\n--- src/config/nunjucks/context/context.test.js ---\nconst mockReadFileSync = jest.fn()\nconst mockLoggerError = jest.fn()\n\njest.mock('node:fs', () => ({\n  ...jest.requireActual('node:fs'),\n  readFileSync: () => mockReadFileSync()\n}))\njest.mock('~/src/server/common/helpers/logging/logger.js', () => ({\n  createLogger: () => ({ error: (...args) => mockLoggerError(...args) })\n}))\n\ndescribe('#context', () => {\n  describe('When webpack manifest file read succeeds', () => {\n    let contextImport\n\n    beforeAll(async () => {\n      contextImport = await import('~/src/config/nunjucks/context/context.js')\n    })\n\n    test('Should provide expected context', () => {\n      const contextResult = contextImport.context({\n        path: '/non-existent-path'\n      })\n      expect(contextResult).toEqual({\n        assetPath: '/public/assets',\n        breadcrumbs: [],\n        getAssetPath: expect.any(Function),\n        navigation: [\n          {\n            isActive: false,\n            text: 'Home',\n            url: '/'\n          },\n          {\n            isActive: false,\n            text: 'Projects',\n            url: '/projects'\n          }\n        ],\n        serviceName: 'Defra SDLC Governance Checklist',\n        serviceUrl: '/'\n      })\n    })\n\n    describe('With valid asset path', () => {\n      test('Should provide expected asset path', () => {\n        const contextResult = contextImport.context({\n          path: '/non-existent-path'\n        })\n        expect(contextResult.getAssetPath('test.js')).toBe('/public/test.js')\n      })\n    })\n\n    describe('With invalid asset path', () => {\n      test('Should provide expected asset', () => {\n        const contextResult = contextImport.context({\n          path: '/non-existent-path'\n        })\n        expect(contextResult.getAssetPath()).toBe('/public/undefined')\n      })\n    })\n  })\n\n  describe('When webpack manifest file read fails', () => {\n    let contextImport\n\n    beforeAll(async () => {\n      contextImport = await import('~/src/config/nunjucks/context/context.js')\n    })\n\n    test('Should log that the Webpack Manifest file is not available', () => {\n      mockReadFileSync.mockImplementation(() => {\n        throw new Error('File not found')\n      })\n      contextImport.context({ path: '/non-existent-path' })\n      expect(mockLoggerError).toHaveBeenCalledWith(\n        'Webpack assets-manifest.json not found'\n      )\n    })\n  })\n})\n\ndescribe('#context cache', () => {\n  describe('Webpack manifest file cache', () => {\n    let contextImport\n\n    beforeAll(async () => {\n      contextImport = await import('~/src/config/nunjucks/context/context.js')\n    })\n\n    test('Should read file', () => {\n      mockReadFileSync.mockReturnValue('{}')\n      contextImport.context({ path: '/non-existent-path' })\n      expect(mockReadFileSync).toHaveBeenCalled()\n    })\n\n    test('Should use cache', () => {\n      mockReadFileSync.mockReturnValue('{}')\n      const firstCall = contextImport.context({ path: '/non-existent-path' })\n      mockReadFileSync.mockClear()\n      const secondCall = contextImport.context({ path: '/non-existent-path' })\n      expect(mockReadFileSync).not.toHaveBeenCalled()\n      expect(JSON.stringify(firstCall)).toBe(JSON.stringify(secondCall))\n    })\n\n    test('Should provide expected context', () => {\n      mockReadFileSync.mockReturnValue('{}')\n      const contextResult = contextImport.context({ path: '/' })\n      expect(contextResult).toEqual({\n        assetPath: '/public/assets',\n        breadcrumbs: [],\n        getAssetPath: expect.any(Function),\n        navigation: [\n          {\n            isActive: true,\n            text: 'Home',\n            url: '/'\n          },\n          {\n            isActive: false,\n            text: 'Projects',\n            url: '/projects'\n          }\n        ],\n        serviceName: 'Defra SDLC Governance Checklist',\n        serviceUrl: '/'\n      })\n    })\n  })\n})\n\n\n--- src/config/nunjucks/filters/filters.js ---\nexport { formatDate } from '~/src/config/nunjucks/filters/format-date.js'\nexport { formatCurrency } from '~/src/config/nunjucks/filters/format-currency.js'\nexport { map } from '~/src/config/nunjucks/filters/map.js'\n\n\n--- src/config/nunjucks/filters/format-currency.js ---\n/**\n * @param {Parameters<Intl.NumberFormat['format']>[0]} value\n * @param {Intl.LocalesArgument} locale\n * @param {string} currency\n */\nexport function formatCurrency(value, locale = 'en-GB', currency = 'GBP') {\n  const formatter = new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency\n  })\n\n  return formatter.format(value)\n}\n\n\n--- src/config/nunjucks/filters/format-currency.test.js ---\nimport { formatCurrency } from '~/src/config/nunjucks/filters/format-currency.js'\n\ndescribe('#formatCurrency', () => {\n  describe('With defaults', () => {\n    test('Currency should be in expected format', () => {\n      expect(formatCurrency('20000000')).toBe('£20,000,000.00')\n    })\n  })\n\n  describe('With Currency attributes', () => {\n    test('Currency should be in provided format', () => {\n      expect(formatCurrency('5500000', 'en-US', 'USD')).toBe('$5,500,000.00')\n    })\n  })\n})\n\n\n--- src/config/nunjucks/filters/format-date.js ---\nimport { format, isDate, parseISO } from 'date-fns'\n\n/**\n * @param {string | Date} value\n * @param {string} formattedDateStr\n */\nexport function formatDate(value, formattedDateStr = 'EEE do MMMM yyyy') {\n  const date = isDate(value) ? value : parseISO(value)\n\n  return format(date, formattedDateStr)\n}\n\n\n--- src/config/nunjucks/filters/format-date.test.js ---\nimport { formatDate } from '~/src/config/nunjucks/filters/format-date.js'\n\ndescribe('#formatDate', () => {\n  beforeAll(() => {\n    jest.useFakeTimers({\n      now: new Date('2023-02-01')\n    })\n  })\n\n  afterAll(() => {\n    jest.useRealTimers()\n  })\n\n  describe('With defaults', () => {\n    test('Date should be in expected format', () => {\n      expect(formatDate('2023-02-01T11:40:02.242Z')).toBe(\n        'Wed 1st February 2023'\n      )\n    })\n  })\n\n  describe('With Date object', () => {\n    test('Date should be in expected format', () => {\n      expect(formatDate(new Date())).toBe('Wed 1st February 2023')\n    })\n  })\n\n  describe('With format attribute', () => {\n    test('Date should be in provided format', () => {\n      expect(\n        formatDate(\n          '2023-02-01T11:40:02.242Z',\n          \"h:mm aaa 'on' EEEE do MMMM yyyy\"\n        )\n      ).toBe('11:40 am on Wednesday 1st February 2023')\n    })\n  })\n})\n\n\n--- src/config/nunjucks/filters/map.js ---\n/**\n * Maps an array of objects to an array of values for a specific attribute\n * @param {Array<any>} array - The array to map\n * @param {object} options - The options object containing the attribute name\n * @returns {Array<any>}\n */\nexport function map(array, options) {\n  if (!Array.isArray(array)) {\n    return []\n  }\n\n  // Handle the way Nunjucks passes the attribute parameter\n  const attribute = options?.attribute || options\n\n  if (typeof attribute !== 'string') {\n    return array\n  }\n\n  return array\n    .map((item) => {\n      const keys = attribute.split('.')\n      return keys.reduce(\n        (obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined),\n        item\n      )\n    })\n    .filter((item) => item !== undefined)\n}\n\n\n--- src/config/nunjucks/globals.js ---\nexport { default as assign } from 'lodash/assign.js'\n\n\n--- src/server/common/components/heading/template.test.js ---\nimport { renderComponent } from '~/src/server/common/test-helpers/component-helpers.js'\n\ndescribe('Heading Component', () => {\n  /** @type {CheerioAPI} */\n  let $heading\n\n  describe('With caption', () => {\n    beforeEach(() => {\n      $heading = renderComponent('heading', {\n        text: 'Services',\n        caption: 'A page showing available services'\n      })\n    })\n\n    test('Should render app heading component', () => {\n      expect($heading('[data-testid=\"app-heading\"]')).toHaveLength(1)\n    })\n\n    test('Should contain expected heading', () => {\n      expect($heading('[data-testid=\"app-heading-title\"]').text().trim()).toBe(\n        'Services'\n      )\n    })\n\n    test('Should have expected heading caption', () => {\n      expect(\n        $heading('[data-testid=\"app-heading-caption\"]').text().trim()\n      ).toBe('A page showing available services')\n    })\n  })\n})\n\n/**\n * @import { CheerioAPI } from 'cheerio'\n */\n\n\n--- src/server/common/components/heading/_heading.scss ---\n@use \"govuk-frontend\" as *;\n\n.app-heading {\n  display: flex;\n  margin-bottom: govuk-spacing(4);\n}\n\n.app-heading-secondary-info {\n  display: flex;\n  align-items: flex-end;\n  justify-content: flex-end;\n}\n\n.app-heading-entities {\n  display: flex;\n  margin-top: govuk-spacing(2);\n  margin-bottom: govuk-spacing(4);\n}\n\n\n--- src/server/common/components/heading/macro.njk ---\n{% macro appHeading(params) %}\n    {%- include \"./template.njk\" -%}\n{% endmacro %}\n\n\n--- src/server/common/components/heading/template.njk ---\n<div class=\"govuk-grid-row app-heading\" data-testid=\"app-heading\">\n  <div class=\"govuk-grid-column-two-thirds\">\n    <h1 class=\"govuk-heading-xl govuk-!-margin-bottom-2\"\n        data-testid=\"app-heading-title\">{{ params.text }}</h1>\n\n    {% if params.caption %}\n      <span class=\"govuk-caption-m\"\n            data-testid=\"app-heading-caption\">{{ params.caption }}</span>\n    {% endif %}\n  </div>\n</div>\n\n\n--- src/server/common/test-helpers/component-helpers.js ---\nimport { fileURLToPath } from 'node:url'\nimport path from 'path'\nimport nunjucks from 'nunjucks'\nimport { load } from 'cheerio'\nimport { camelCase } from 'lodash'\nimport * as filters from '~/src/config/nunjucks/filters/filters.js'\nimport * as globals from '~/src/config/nunjucks/globals.js'\n\nconst dirname = path.dirname(fileURLToPath(import.meta.url))\nconst nunjucksTestEnv = nunjucks.configure(\n  [\n    '~/node_modules/govuk-frontend/dist/',\n    path.normalize(path.resolve(dirname, '../templates')),\n    path.normalize(path.resolve(dirname, '../components'))\n  ],\n  {\n    trimBlocks: true,\n    lstripBlocks: true\n  }\n)\n\nObject.entries(globals).forEach(([name, global]) => {\n  nunjucksTestEnv.addGlobal(name, global)\n})\n\nObject.entries(filters).forEach(([name, filter]) => {\n  nunjucksTestEnv.addFilter(name, filter)\n})\n\n/**\n * @param {string} componentName\n * @param {object} params\n * @param {string} [callBlock]\n */\nexport function renderComponent(componentName, params, callBlock) {\n  const macroPath = `${componentName}/macro.njk`\n  const macroName = `app${\n    componentName.charAt(0).toUpperCase() + camelCase(componentName.slice(1))\n  }`\n  const macroParams = JSON.stringify(params, null, 2)\n  let macroString = `{%- from \"${macroPath}\" import ${macroName} -%}`\n\n  if (callBlock) {\n    macroString += `{%- call ${macroName}(${macroParams}) -%}${callBlock}{%- endcall -%}`\n  } else {\n    macroString += `{{- ${macroName}(${macroParams}) -}}`\n  }\n\n  return load(nunjucksTestEnv.renderString(macroString, {}))\n}\n"
    },
    {
      "chunk_id": "static_asset_management",
      "description": "Static asset management and serving",
      "files": [
        "src/server/common/helpers/serve-static-files.js",
        "src/server/common/helpers/serve-static-files.test.js",
        "src/client/javascripts/application.js",
        "src/client/stylesheets/application.scss",
        "src/client/stylesheets/_govuk-frontend.scss",
        "src/client/stylesheets/components/_index.scss",
        "src/client/stylesheets/core/_header.scss",
        "src/client/stylesheets/core/_index.scss",
        "src/client/stylesheets/core/_main.scss",
        "src/client/stylesheets/helpers/_index.scss",
        "src/client/stylesheets/helpers/_links.scss",
        "src/client/stylesheets/partials/_index.scss",
        "src/client/stylesheets/variables/_colours.scss",
        "src/client/stylesheets/variables/_index.scss"
      ],
      "content": "\n\n--- src/server/common/helpers/serve-static-files.js ---\nimport { config } from '~/src/config/config.js'\nimport { statusCodes } from '~/src/server/common/constants/status-codes.js'\n\n/**\n * @satisfies {ServerRegisterPluginObject<void>}\n */\nexport const serveStaticFiles = {\n  plugin: {\n    name: 'staticFiles',\n    register(server) {\n      server.route([\n        {\n          options: {\n            auth: false,\n            cache: {\n              expiresIn: config.get('staticCacheTimeout'),\n              privacy: 'private'\n            }\n          },\n          method: 'GET',\n          path: '/favicon.ico',\n          handler(_request, h) {\n            return h.response().code(statusCodes.noContent).type('image/x-icon')\n          }\n        },\n        {\n          options: {\n            auth: false,\n            cache: {\n              expiresIn: config.get('staticCacheTimeout'),\n              privacy: 'private'\n            }\n          },\n          method: 'GET',\n          path: `${config.get('assetPath')}/{param*}`,\n          handler: {\n            directory: {\n              path: '.',\n              redirectToSlash: true\n            }\n          }\n        }\n      ])\n    }\n  }\n}\n\n/**\n * @import { ServerRegisterPluginObject } from '@hapi/hapi'\n */\n\n\n--- src/server/common/helpers/serve-static-files.test.js ---\nimport { statusCodes } from '~/src/server/common/constants/status-codes.js'\nimport { startServer } from '~/src/server/common/helpers/start-server.js'\n\ndescribe('#serveStaticFiles', () => {\n  let server\n\n  describe('When secure context is disabled', () => {\n    beforeEach(async () => {\n      server = await startServer()\n    })\n\n    afterEach(async () => {\n      await server.stop({ timeout: 0 })\n    })\n\n    test('Should serve favicon as expected', async () => {\n      const { statusCode } = await server.inject({\n        method: 'GET',\n        url: '/favicon.ico'\n      })\n\n      expect(statusCode).toBe(statusCodes.noContent)\n    })\n\n    test('Should serve assets as expected', async () => {\n      // Note npm run build is ran in the postinstall hook in package.json to make sure there is always a file\n      // available for this test. Remove as you see fit\n      const { statusCode } = await server.inject({\n        method: 'GET',\n        url: '/public/assets/images/govuk-crest.svg'\n      })\n\n      expect(statusCode).toBe(statusCodes.ok)\n    })\n  })\n})\n\n\n--- src/client/javascripts/application.js ---\nimport {\n  createAll,\n  Button,\n  Checkboxes,\n  ErrorSummary,\n  Header,\n  Radios,\n  SkipLink\n} from 'govuk-frontend'\n\ncreateAll(Button)\ncreateAll(Checkboxes)\ncreateAll(ErrorSummary)\ncreateAll(Header)\ncreateAll(Radios)\ncreateAll(SkipLink)\n\n\n--- src/client/stylesheets/application.scss ---\n@use \"govuk-frontend\";\n\n@use \"variables\";\n@use \"helpers\";\n@use \"core\";\n@use \"components\";\n@use \"partials\";\n\n\n--- src/client/stylesheets/_govuk-frontend.scss ---\n@forward \"pkg:govuk-frontend\" with (\n  $govuk-assets-path: \"/public/assets/\",\n  $govuk-new-organisation-colours: true,\n  $govuk-global-styles: true\n);\n\n\n--- src/client/stylesheets/components/_index.scss ---\n// import custom component styles\n@use \"heading/heading\";\n\n\n--- src/client/stylesheets/core/_header.scss ---\n@use \"variables/colours\" as *;\n\n// Example namespaced custom element style CSS classes\n\n.app-header {\n  border-bottom-color: $app-light-grey;\n}\n\n\n--- src/client/stylesheets/core/_index.scss ---\n@use \"header\";\n@use \"main\";\n\n\n--- src/client/stylesheets/core/_main.scss ---\n@use \"govuk-frontend\" as *;\n\n// Example namespaced custom element style CSS classes\n\n.app-main-wrapper {\n  display: block;\n  padding-top: govuk-spacing(4);\n  padding-bottom: govuk-spacing(3);\n}\n\n\n--- src/client/stylesheets/helpers/_index.scss ---\n@forward \"links\";\n\n\n--- src/client/stylesheets/helpers/_links.scss ---\n// Example SASS helpers\n\n@mixin app-link-style {\n  text-decoration: none;\n\n  &:hover {\n    text-decoration: underline;\n  }\n\n  &:focus {\n    text-decoration: none;\n  }\n}\n\n\n--- src/client/stylesheets/partials/_index.scss ---\n// import custom partial styles\n@use \"navigation/navigation\";\n\n\n--- src/client/stylesheets/variables/_colours.scss ---\n// Example custom CSS variables\n$app-light-grey: #f8f8f8;\n\n\n--- src/client/stylesheets/variables/_index.scss ---\n@forward \"colours\";\n"
    },
    {
      "chunk_id": "home_page",
      "description": "Home page functionality",
      "files": [
        "src/server/home/controller.js",
        "src/server/home/controller.test.js",
        "src/server/home/index.js",
        "src/server/home/index.njk"
      ],
      "content": "\n\n--- src/server/home/controller.js ---\n/**\n * A GDS styled example home page controller.\n * Provided as an example, remove or modify as required.\n * @satisfies {Partial<ServerRoute>}\n */\nexport const homeController = {\n  handler(_request, h) {\n    return h.view('home/index', {\n      pageTitle: 'Home',\n      heading: 'Home'\n    })\n  }\n}\n\n/**\n * @import { ServerRoute } from '@hapi/hapi'\n */\n\n\n--- src/server/home/controller.test.js ---\nimport { createServer } from '~/src/server/index.js'\nimport { statusCodes } from '~/src/server/common/constants/status-codes.js'\n\ndescribe('#homeController', () => {\n  /** @type {Server} */\n  let server\n\n  beforeAll(async () => {\n    server = await createServer()\n    await server.initialize()\n  })\n\n  afterAll(async () => {\n    await server.stop({ timeout: 0 })\n  })\n\n  test('Should provide expected response', async () => {\n    const { result, statusCode } = await server.inject({\n      method: 'GET',\n      url: '/'\n    })\n\n    expect(result).toEqual(expect.stringContaining('Home |'))\n    expect(statusCode).toBe(statusCodes.ok)\n  })\n})\n\n/**\n * @import { Server } from '@hapi/hapi'\n */\n\n\n--- src/server/home/index.js ---\nimport { homeController } from '~/src/server/home/controller.js'\n\n/**\n * Sets up the routes used in the home page.\n * These routes are registered in src/server/router.js.\n */\n\n/**\n * @satisfies {ServerRegisterPluginObject<void>}\n */\nexport const home = {\n  plugin: {\n    name: 'home',\n    register(server) {\n      server.route([\n        {\n          method: 'GET',\n          path: '/',\n          ...homeController\n        }\n      ])\n    }\n  }\n}\n\n/**\n * @import { ServerRegisterPluginObject } from '@hapi/hapi'\n */\n\n\n--- src/server/home/index.njk ---\n{% extends 'layouts/page.njk' %}\n\n{% block content %}\n  {{ appHeading({\n    text: heading,\n    caption: \"Governance Checklist Tool\"\n  }) }}\n\n  <div class=\"govuk-grid-row\">\n    <div class=\"govuk-grid-column-two-thirds\">\n      <div class=\"govuk-body\" data-testid=\"app-page-body\">\n        <p>\n          Welcome to the Governance Checklist Tool, a tool designed to standardise and manage governance processes across projects.\n        </p>\n        <p>\n          Create and manage version-controlled governance templates, instantiate project-specific workflows, and track compliance with ease.\n        </p>\n        <div class=\"govuk-button-group\">\n          <a href=\"/projects\" role=\"button\" draggable=\"false\" class=\"govuk-button\" data-module=\"govuk-button\">\n            View Projects\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n{% endblock %}\n"
    },
    {
      "chunk_id": "about_page",
      "description": "About page functionality",
      "files": [
        "src/server/about/controller.js",
        "src/server/about/controller.test.js",
        "src/server/about/index.js",
        "src/server/about/index.njk"
      ],
      "content": "\n\n--- src/server/about/controller.js ---\n/**\n * A GDS styled example about page controller.\n * Provided as an example, remove or modify as required.\n * @satisfies {Partial<ServerRoute>}\n */\nexport const aboutController = {\n  handler(_request, h) {\n    return h.view('about/index', {\n      pageTitle: 'About',\n      heading: 'About',\n      breadcrumbs: [\n        {\n          text: 'Home',\n          href: '/'\n        },\n        {\n          text: 'About'\n        }\n      ]\n    })\n  }\n}\n\n/**\n * @import { ServerRoute } from '@hapi/hapi'\n */\n\n\n--- src/server/about/controller.test.js ---\nimport { createServer } from '~/src/server/index.js'\nimport { statusCodes } from '~/src/server/common/constants/status-codes.js'\n\ndescribe('#aboutController', () => {\n  /** @type {Server} */\n  let server\n\n  beforeAll(async () => {\n    server = await createServer()\n    await server.initialize()\n  })\n\n  afterAll(async () => {\n    await server.stop({ timeout: 0 })\n  })\n\n  test('Should provide expected response', async () => {\n    const { result, statusCode } = await server.inject({\n      method: 'GET',\n      url: '/about'\n    })\n\n    expect(result).toEqual(expect.stringContaining('About |'))\n    expect(statusCode).toBe(statusCodes.ok)\n  })\n})\n\n/**\n * @import { Server } from '@hapi/hapi'\n */\n\n\n--- src/server/about/index.js ---\nimport { aboutController } from '~/src/server/about/controller.js'\n\n/**\n * Sets up the routes used in the /about page.\n * These routes are registered in src/server/router.js.\n * @satisfies {ServerRegisterPluginObject<void>}\n */\nexport const about = {\n  plugin: {\n    name: 'about',\n    register(server) {\n      server.route([\n        {\n          method: 'GET',\n          path: '/about',\n          ...aboutController\n        }\n      ])\n    }\n  }\n}\n\n/**\n * @import { ServerRegisterPluginObject } from '@hapi/hapi'\n */\n\n\n--- src/server/about/index.njk ---\n{% extends 'layouts/page.njk' %}\n\n{% block content %}\n  {{ appHeading({\n    text: heading,\n    caption: \"Core delivery platform Node.js Frontend Template.\"\n  }) }}\n\n  <div class=\"govuk-grid-row\">\n    <div class=\"govuk-grid-column-two-thirds\">\n      <div class=\"govuk-body\" data-testid=\"app-page-body\">\n        <p>\n          Based on <a href=\"https://defra.github.io/software-development-standards\">DEFRA</a> and <a\n            href=\"https://design-system.service.gov.uk/\">GOV.UK</a> best practices this starter kit provides you with\n          a deployable, production ready template 🙌🏻 to start your new service with.\n        </p>\n      </div>\n    </div>\n  </div>\n\n{% endblock %}\n"
    },
    {
      "chunk_id": "project_management",
      "description": "Project management functionality",
      "files": [
        "src/server/projects/controller.js",
        "src/server/projects/index.js",
        "src/server/projects/views/delete-confirmation.njk",
        "src/server/projects/views/detail.njk",
        "src/server/projects/views/diagram.njk",
        "src/server/projects/views/list.njk",
        "src/server/projects/views/new.njk"
      ],
      "content": "\n\n--- src/server/projects/controller.js ---\nimport { config } from '~/src/config/config.js'\n\nexport const projectsController = {\n  async list(request, h) {\n    try {\n      const response = await fetch(\n        `${config.get('apiServer')}/api/v1/projects`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      const projects = await response.json()\n\n      // Fetch governance templates to get names and versions\n      const templatesResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/governance-templates`\n      )\n\n      if (!templatesResponse.ok) {\n        throw new Error('Failed to fetch governance templates')\n      }\n\n      const templates = await templatesResponse.json()\n      const templatesMap = new Map(templates.map((t) => [t._id, t]))\n\n      // Enhance projects with template information\n      const enhancedProjects = projects.map((project) => ({\n        ...project,\n        governanceTemplateName: project.governanceTemplateId\n          ? `${templatesMap.get(project.governanceTemplateId)?.name} (v${templatesMap.get(project.governanceTemplateId)?.version})`\n          : null\n      }))\n\n      return h.view('projects/views/list', {\n        pageTitle: 'Projects',\n        projects: enhancedProjects\n      })\n    } catch (error) {\n      request.logger.error(error)\n      return h.view('projects/views/list', {\n        pageTitle: 'Projects',\n        projects: [],\n        error: 'Unable to load projects'\n      })\n    }\n  },\n\n  async new(request, h) {\n    try {\n      // Fetch available governance templates\n      const templatesResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/governance-templates`\n      )\n\n      if (!templatesResponse.ok) {\n        throw new Error('Failed to fetch governance templates')\n      }\n\n      const governanceTemplates = await templatesResponse.json()\n\n      // If a governance template is selected, fetch its workflows\n      let workflows = []\n      const selectedTemplateId = request.query.governanceTemplateId\n      if (selectedTemplateId) {\n        const workflowsResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/workflow-templates?governanceTemplateId=${selectedTemplateId}`\n        )\n        if (workflowsResponse.ok) {\n          workflows = await workflowsResponse.json()\n        }\n      }\n\n      return h.view('projects/views/new', {\n        pageTitle: 'Create New Project',\n        governanceTemplates,\n        workflows,\n        values: {\n          name: request.query.name || '',\n          description: request.query.description || '',\n          governanceTemplateId: selectedTemplateId,\n          selectedWorkflowTemplateIds:\n            request.query.selectedWorkflowTemplateIds || []\n        }\n      })\n    } catch (error) {\n      request.logger.error('Error loading new project form:', error)\n      return h.view('projects/views/new', {\n        pageTitle: 'Create New Project',\n        error: 'Unable to load governance templates. Please try again.',\n        governanceTemplates: [],\n        workflows: [],\n        values: {}\n      })\n    }\n  },\n\n  async create(request, h) {\n    try {\n      const {\n        name,\n        description,\n        governanceTemplateId,\n        selectedWorkflowTemplateIds = []\n      } = request.payload\n\n      // Validate required fields\n      if (!name || !governanceTemplateId) {\n        throw new Error('Name and governance template are required')\n      }\n\n      const apiUrl = `${config.get('apiServer')}/api/v1/projects`\n\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          name: name.trim(),\n          description: description ? description.trim() : '',\n          governanceTemplateId,\n          selectedWorkflowTemplateIds: Array.isArray(\n            selectedWorkflowTemplateIds\n          )\n            ? selectedWorkflowTemplateIds\n            : selectedWorkflowTemplateIds\n              ? [selectedWorkflowTemplateIds]\n              : [],\n          metadata: {}\n        })\n      })\n\n      if (!response.ok) {\n        const errorText = await response.text()\n        request.logger.error('API Error Response:', {\n          status: response.status,\n          statusText: response.statusText,\n          url: apiUrl,\n          body: errorText\n        })\n        throw new Error(\n          `API call failed with status: ${response.status}. Response: ${errorText}`\n        )\n      }\n\n      const project = await response.json()\n      return h.redirect(`/projects/${project._id}`)\n    } catch (error) {\n      request.logger.error('Error creating project:', {\n        error: error.message,\n        stack: error.stack,\n        payload: request.payload\n      })\n\n      // Re-fetch governance templates and workflows for the error case\n      try {\n        const templatesResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/governance-templates`\n        )\n        const governanceTemplates = await templatesResponse.json()\n\n        let workflows = []\n        if (request.payload.governanceTemplateId) {\n          const workflowsResponse = await fetch(\n            `${config.get('apiServer')}/api/v1/workflow-templates?governanceTemplateId=${request.payload.governanceTemplateId}`\n          )\n          if (workflowsResponse.ok) {\n            workflows = await workflowsResponse.json()\n          }\n        }\n\n        return h.view('projects/views/new', {\n          pageTitle: 'Create New Project',\n          error: 'Unable to create project. Please try again.',\n          governanceTemplates,\n          workflows,\n          values: request.payload\n        })\n      } catch (fetchError) {\n        request.logger.error('Error fetching governance templates:', fetchError)\n        return h.view('projects/views/new', {\n          pageTitle: 'Create New Project',\n          error: 'Unable to create project. Please try again.',\n          governanceTemplates: [],\n          workflows: [],\n          values: request.payload\n        })\n      }\n    }\n  },\n\n  async detail(request, h) {\n    try {\n      const { id } = request.params\n\n      // Fetch project details\n      const projectResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/projects/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!projectResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${projectResponse.status}`\n        )\n      }\n\n      const project = await projectResponse.json()\n\n      // Fetch governance template details\n      const templateResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/governance-templates/${project.governanceTemplateId}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!templateResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${templateResponse.status}`\n        )\n      }\n\n      const governanceTemplate = await templateResponse.json()\n      project.governanceTemplate = governanceTemplate\n\n      // Fetch workflow instances\n      const workflowInstancesResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-instances?projectId=${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!workflowInstancesResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${workflowInstancesResponse.status}`\n        )\n      }\n\n      const workflowInstances = await workflowInstancesResponse.json()\n\n      // Fetch checklist item instances for each workflow\n      for (const workflow of workflowInstances) {\n        const checklistResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/checklist-item-instances?workflowInstanceId=${workflow._id}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }\n        )\n\n        if (!checklistResponse.ok) {\n          throw new Error(\n            `API call failed with status: ${checklistResponse.status}`\n          )\n        }\n\n        workflow.checklistItems = await checklistResponse.json()\n      }\n\n      project.workflowInstances = workflowInstances\n\n      return h.view('projects/views/detail', {\n        pageTitle: project.name,\n        project\n      })\n    } catch (error) {\n      request.logger.error('Error loading project details:', error)\n      return h.view('projects/views/detail', {\n        pageTitle: 'Project Not Found',\n        error: 'Unable to load project details'\n      })\n    }\n  },\n\n  async updateChecklistStatus(request, h) {\n    try {\n      const { id } = request.params\n      const { status } = request.payload\n\n      request.logger.info(`Updating checklist item ${id} status to ${status}`)\n\n      const response = await fetch(\n        `${config.get('apiServer')}/api/v1/checklist-item-instances/${id}`,\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json'\n          },\n          body: JSON.stringify({ status })\n        }\n      )\n\n      if (!response.ok) {\n        const errorText = await response.text()\n        request.logger.error('API Error Response:', {\n          status: response.status,\n          statusText: response.statusText,\n          body: errorText\n        })\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      // Only return success status, not the full response\n      return h.response({ success: true }).code(200)\n    } catch (error) {\n      request.logger.error('Error updating checklist item status:', error)\n      return h.response({ error: 'Unable to update status' }).code(500)\n    }\n  },\n\n  async diagram(request, h) {\n    try {\n      const { id } = request.params\n\n      // Fetch project details\n      const projectResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/projects/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!projectResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${projectResponse.status}`\n        )\n      }\n\n      const project = await projectResponse.json()\n\n      // Fetch governance template details\n      const templateResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/governance-templates/${project.governanceTemplateId}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!templateResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${templateResponse.status}`\n        )\n      }\n\n      const governanceTemplate = await templateResponse.json()\n      project.governanceTemplate = governanceTemplate\n\n      // Fetch workflow instances\n      const workflowInstancesResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-instances?projectId=${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!workflowInstancesResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${workflowInstancesResponse.status}`\n        )\n      }\n\n      const workflowInstances = await workflowInstancesResponse.json()\n\n      // Fetch checklist item instances for each workflow\n      for (const workflow of workflowInstances) {\n        const checklistResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/checklist-item-instances?workflowInstanceId=${workflow._id}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }\n        )\n\n        if (!checklistResponse.ok) {\n          throw new Error(\n            `API call failed with status: ${checklistResponse.status}`\n          )\n        }\n\n        workflow.checklistItems = await checklistResponse.json()\n      }\n\n      project.workflowInstances = workflowInstances\n\n      return h.view('projects/views/diagram', {\n        pageTitle: project.name,\n        project\n      })\n    } catch (error) {\n      request.logger.error('Error loading project diagram:', error)\n      return h.view('projects/views/diagram', {\n        pageTitle: 'Project Not Found',\n        error: 'Unable to load project diagram'\n      })\n    }\n  },\n\n  async deleteConfirmation(request, h) {\n    try {\n      const { id } = request.params\n\n      // Fetch project details\n      const response = await fetch(\n        `${config.get('apiServer')}/api/v1/projects/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      const project = await response.json()\n\n      return h.view('projects/views/delete-confirmation', {\n        pageTitle: 'Delete Project',\n        project\n      })\n    } catch (error) {\n      request.logger.error('Error loading project for deletion:', error)\n      return h.view('projects/views/delete-confirmation', {\n        pageTitle: 'Project Not Found',\n        error: 'Unable to load project details'\n      })\n    }\n  },\n\n  async delete(request, h) {\n    try {\n      const { id } = request.params\n\n      const response = await fetch(\n        `${config.get('apiServer')}/api/v1/projects/${id}`,\n        {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      return h.redirect('/projects')\n    } catch (error) {\n      request.logger.error('Error deleting project:', error)\n\n      // Fetch project details again to redisplay the confirmation page with error\n      try {\n        const projectResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/projects/${request.params.id}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }\n        )\n\n        const project = await projectResponse.json()\n\n        return h.view('projects/views/delete-confirmation', {\n          pageTitle: 'Delete Project',\n          project,\n          error: 'Unable to delete project. Please try again.'\n        })\n      } catch (fetchError) {\n        return h.view('projects/views/delete-confirmation', {\n          pageTitle: 'Project Not Found',\n          error: 'Unable to delete project. Please try again.'\n        })\n      }\n    }\n  }\n}\n\n\n--- src/server/projects/index.js ---\nimport { projectsController } from './controller.js'\n\n/**\n * @type {import('@hapi/hapi').ServerRegisterPluginObject<void>}\n */\nexport const projects = {\n  plugin: {\n    name: 'projects',\n    register(server) {\n      server.route([\n        {\n          method: 'GET',\n          path: '/projects',\n          handler: projectsController.list.bind(projectsController),\n          options: {\n            description: 'List all projects',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/projects/new',\n          handler: projectsController.new.bind(projectsController),\n          options: {\n            description: 'New project form',\n            auth: false\n          }\n        },\n        {\n          method: 'POST',\n          path: '/projects',\n          handler: projectsController.create.bind(projectsController),\n          options: {\n            description: 'Create new project',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/projects/{id}',\n          handler: projectsController.detail.bind(projectsController),\n          options: {\n            description: 'View project details',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/projects/{id}/delete',\n          handler:\n            projectsController.deleteConfirmation.bind(projectsController),\n          options: {\n            description: 'Show project deletion confirmation',\n            auth: false\n          }\n        },\n        {\n          method: 'POST',\n          path: '/projects/{id}/delete',\n          handler: projectsController.delete.bind(projectsController),\n          options: {\n            description: 'Delete project',\n            auth: false\n          }\n        },\n        {\n          method: 'POST',\n          path: '/checklist-item-instances/{id}/status',\n          handler:\n            projectsController.updateChecklistStatus.bind(projectsController),\n          options: {\n            description: 'Update checklist item status',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/projects/{id}/diagram',\n          handler: projectsController.diagram.bind(projectsController),\n          options: {\n            description: 'View project dependencies diagram',\n            auth: false\n          }\n        }\n      ])\n    }\n  }\n}\n\n\n--- src/server/projects/views/delete-confirmation.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n{% from \"govuk/components/warning-text/macro.njk\" import govukWarningText %}\n\n{% block pageTitle %}Delete Project - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-two-thirds\">\n        <a href=\"/projects/{{ project._id }}\" class=\"govuk-back-link\">Back to project</a>\n\n        {% if error %}\n          <div class=\"govuk-error-summary\" role=\"alert\" tabindex=\"-1\">\n            <h2 class=\"govuk-error-summary__title\">Error</h2>\n            <div class=\"govuk-error-summary__body\">\n              <p>{{ error }}</p>\n            </div>\n          </div>\n        {% endif %}\n\n        <h1 class=\"govuk-heading-xl\">Delete Project</h1>\n        \n        {{ govukWarningText({\n          text: \"This action cannot be undone. All associated workflow instances and checklist items will also be deleted.\",\n          iconFallbackText: \"Warning\"\n        }) }}\n\n        <p class=\"govuk-body\">Are you sure you want to delete the project: <strong>{{ project.name }}</strong>?</p>\n\n        <form method=\"POST\" action=\"/projects/{{ project._id }}/delete\" novalidate>\n          <div class=\"govuk-button-group\">\n            {{ govukButton({\n              text: \"Yes, delete project\",\n              classes: \"govuk-button--warning\",\n              attributes: {\n                \"data-testid\": \"confirm-delete-button\"\n              }\n            }) }}\n\n            <a href=\"/projects/{{ project._id }}\" class=\"govuk-link\">\n              Cancel\n            </a>\n          </div>\n        </form>\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/projects/views/detail.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n{% from \"govuk/components/checkboxes/macro.njk\" import govukCheckboxes %}\n{% from \"govuk/components/error-summary/macro.njk\" import govukErrorSummary %}\n{% from \"govuk/components/tag/macro.njk\" import govukTag %}\n\n{% block pageTitle %}{{ pageTitle }} - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-full\">\n        <a href=\"/projects\" class=\"govuk-back-link\">Back to projects</a>\n\n        {% if error %}\n          {{ govukErrorSummary({\n            titleText: \"There is a problem\",\n            errorList: [\n              {\n                text: error,\n                href: \"#\"\n              }\n            ]\n          }) }}\n        {% endif %}\n\n        {% if project %}\n          <h1 class=\"govuk-heading-xl\">Project: {{ project.name }}</h1>\n          <p class=\"govuk-body-l\">{{ project.governanceTemplate.name }} - v{{ project.governanceTemplate.version }}</p>\n\n          <div class=\"govuk-button-group\">\n            {{ govukButton({\n              text: \"View Dependencies Diagram\",\n              href: \"/projects/\" + project._id + \"/diagram\",\n              classes: \"govuk-button--secondary\",\n              attributes: {\n                \"data-testid\": \"view-diagram-button\"\n              }\n            }) }}\n\n            {{ govukButton({\n              text: \"Delete Project\",\n              href: \"/projects/\" + project._id + \"/delete\",\n              classes: \"govuk-button--warning\",\n              attributes: {\n                \"data-testid\": \"delete-project-button\"\n              }\n            }) }}\n          </div>\n\n          {% if project.workflowInstances and project.workflowInstances.length > 0 %}\n            {% for workflow in project.workflowInstances %}\n              <div class=\"govuk-!-margin-bottom-9\">\n                <h2 class=\"govuk-heading-l\">{{ workflow.name }}</h2>\n\n                {% if workflow.checklistItems and workflow.checklistItems.length > 0 %}\n                  <div class=\"checklist-items\">\n                    {% for item in workflow.checklistItems %}\n                      <div class=\"checklist-item govuk-!-margin-bottom-4\">\n                        <div class=\"govuk-checkboxes govuk-checkboxes--small\">\n                          <div class=\"govuk-checkboxes__item\">\n                            {% set hasUnmetDependencies = false %}\n                            {% if item.dependencies_requires %}\n                              {% for dep in item.dependencies_requires %}\n                                {% if not dep.status or dep.status != \"complete\" %}\n                                  {% set hasUnmetDependencies = true %}\n                                {% endif %}\n                              {% endfor %}\n                            {% endif %}\n                            <input class=\"govuk-checkboxes__input\" \n                                   id=\"status-{{ item._id }}\" \n                                   name=\"status\" \n                                   type=\"checkbox\" \n                                   value=\"complete\"\n                                   {% if item.status == \"complete\" %}checked{% endif %}\n                                   {% if hasUnmetDependencies %}disabled{% endif %}\n                                   data-testid=\"status-checkbox-{{ item._id }}\"\n                                   data-item-id=\"{{ item._id }}\"\n                                   onchange=\"handleStatusChange(this)\">\n                            <label class=\"govuk-label govuk-checkboxes__label\" for=\"status-{{ item._id }}\">\n                              {{ item.name }}\n                            </label>\n                          </div>\n                        </div>\n\n                        {% if item.type == \"document\" %}\n                          <div class=\"govuk-!-margin-left-7\">\n                            {% if item.documentUrl %}\n                              <a href=\"{{ item.documentUrl }}\" class=\"govuk-link govuk-!-margin-right-2\">{{ item.documentName }}</a>\n                              <span class=\"govuk-body-s\">({{ item.uploadedAt | date }})</span>\n                            {% else %}\n                              {{ govukButton({\n                                text: \"Generate\",\n                                href: \"/checklist-item-instances/\" + item._id + \"/generate\",\n                                classes: \"govuk-button--secondary govuk-!-margin-bottom-0 govuk-!-margin-left-2\",\n                                attributes: {\n                                  \"data-testid\": \"generate-button-\" + item._id\n                                }\n                              }) }}\n                            {% endif %}\n                          </div>\n                        {% endif %}\n\n                        {% if item.type == \"approval\" %}\n                          <div class=\"govuk-!-margin-left-7\">\n                            {% if item.approvalStatus %}\n                              <span class=\"govuk-body-s\">Approved by {{ item.approvedBy }} on {{ item.approvedAt | date }}</span>\n                            {% else %}\n                              {{ govukButton({\n                                text: \"Upload Approval\",\n                                href: \"/checklist-item-instances/\" + item._id + \"/upload\",\n                                classes: \"govuk-button--secondary govuk-!-margin-bottom-0 govuk-!-margin-left-2\",\n                                attributes: {\n                                  \"data-testid\": \"upload-button-\" + item._id\n                                }\n                              }) }}\n                            {% endif %}\n                          </div>\n                        {% endif %}\n\n                        {% if item.dependencies_requires and item.dependencies_requires.length > 0 %}\n                          <div class=\"govuk-!-margin-left-7\">\n                            <p class=\"govuk-body-s govuk-!-margin-bottom-0\">\n                              <span class=\"govuk-hint\">Requires:</span>\n                              {% for dep in item.dependencies_requires %}\n                                <span class=\"govuk-body-s\">\n                                  {{ dep.name }} \n                                  {{ govukTag({\n                                    text: \"Done\" if dep.status == \"complete\" else \"To do\",\n                                    classes: \"govuk-tag--\" + (\"green\" if dep.status == \"complete\" else \"grey\")\n                                  }) }}\n                                  {% if not loop.last %}, {% endif %}\n                                </span>\n                              {% endfor %}\n                            </p>\n                          </div>\n                        {% endif %}\n                      </div>\n                    {% endfor %}\n                  </div>\n                {% else %}\n                  <p class=\"govuk-body\">No checklist items found for this workflow.</p>\n                {% endif %}\n              </div>\n            {% endfor %}\n          {% else %}\n            <p class=\"govuk-body\">No workflow instances found for this project.</p>\n          {% endif %}\n\n          <script>\n            function handleStatusChange(checkbox) {\n              const itemId = checkbox.dataset.itemId;\n              const status = checkbox.checked ? 'complete' : 'incomplete';\n              \n              fetch(`/checklist-item-instances/${itemId}/status`, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  Accept: 'application/json'\n                },\n                body: JSON.stringify({ status })\n              })\n              .then(response => {\n                if (!response.ok) {\n                  throw new Error('Network response was not ok');\n                }\n                return response.json();\n              })\n              .then(data => {\n                if (!data.success) {\n                  throw new Error('Update failed');\n                }\n                // Reload the page to show updated dependencies\n                window.location.reload();\n              })\n              .catch(error => {\n                console.error('Error:', error);\n                // Revert checkbox state\n                checkbox.checked = !checkbox.checked;\n                // Show error message\n                const errorDiv = document.createElement('div');\n                errorDiv.className = 'govuk-error-summary';\n                errorDiv.innerHTML = `\n                  <div role=\"alert\">\n                    <h2 class=\"govuk-error-summary__title\">There is a problem</h2>\n                    <div class=\"govuk-error-summary__body\">\n                      <p>Unable to update status. Please try again.</p>\n                    </div>\n                  </div>\n                `;\n                checkbox.closest('.checklist-item').insertBefore(errorDiv, checkbox.closest('.govuk-checkboxes'));\n                // Remove error message after 5 seconds\n                setTimeout(() => errorDiv.remove(), 5000);\n              });\n            }\n          </script>\n        {% endif %}\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/projects/views/diagram.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% block pageTitle %}{{ project.name }} Dependencies - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-full\">\n        <a href=\"/projects/{{ project._id }}\" class=\"govuk-back-link\">Back to project</a>\n\n        <h1 class=\"govuk-heading-xl\">{{ project.name }} - Dependencies Diagram</h1>\n\n        <div class=\"diagram-container govuk-body\">\n          <pre class=\"mermaid\">\n            %%{\n              init: {\n                'flowchart': {\n                  'nodeSpacing': 50,\n                  'rankSpacing': 100,\n                  'htmlLabels': true\n                },\n                'theme': 'base',\n                'themeVariables': {\n                  'fontFamily': 'GDS Transport'\n                }\n              }\n            }%%\n            graph LR\n            \n            %% Sort workflows by order number\n            {% set sortedWorkflows = project.workflowInstances | sort(attribute='orderNumber') %}\n\n            %% Define all nodes first, sorted by checklist item order\n            {% for workflow in sortedWorkflows %}\n              {% set sortedItems = workflow.checklistItems | sort(attribute='orderNumber') %}\n              {% for item in sortedItems %}\n                {{ item._id }}[\"{{ item.name }}<br/><small>({{ item.type }})</small><br/><small>{{ 'Complete' if item.status == 'complete' else 'Incomplete' }}</small>\"]:::{{ 'complete' if item.status == 'complete' else 'incomplete' }}\n              {% endfor %}\n            {% endfor %}\n\n            %% Group items by workflow\n            {% for workflow in sortedWorkflows %}\n              subgraph {{ workflow._id }}[{{ workflow.name }}]\n                {% set sortedItems = workflow.checklistItems | sort(attribute='orderNumber') %}\n                {% for item in sortedItems %}\n                  {{ item._id }}\n                {% endfor %}\n              end\n            {% endfor %}\n\n            %% Stack subgraphs horizontally by workflow order\n            {% for workflow in sortedWorkflows %}\n              {% if not loop.first %}\n                {{ workflow._id }} ~~~ {{ sortedWorkflows[loop.index0 - 1]._id }}\n              {% endif %}\n            {% endfor %}\n\n            %% Add all dependencies\n            {% for workflow in sortedWorkflows %}\n              {% for item in workflow.checklistItems %}\n                {% if item.dependencies_requires %}\n                  {% for dep in item.dependencies_requires %}\n                    {% if dep._id %}\n                      {{ dep._id }} --> {{ item._id }}\n                    {% else %}\n                      {% for depItem in workflow.checklistItems %}\n                        {% if depItem._id == dep %}\n                          {{ depItem._id }} --> {{ item._id }}\n                        {% endif %}\n                      {% endfor %}\n                    {% endif %}\n                  {% endfor %}\n                {% endif %}\n              {% endfor %}\n            {% endfor %}\n            \n            classDef default fill:#f8f8f8,stroke:#505a5f,stroke-width:2px,rx:4,ry:4;\n            classDef complete fill:#00703c,stroke:#00703c,stroke-width:2px,rx:4,ry:4,color:#ffffff;\n            classDef incomplete fill:#f8f8f8,stroke:#505a5f,stroke-width:2px,rx:4,ry:4;\n            classDef subgraphStyle fill:#ffffff,stroke:#1d70b8,stroke-width:2px;\n            linkStyle default stroke:#1d70b8,stroke-width:2px;\n            {% for workflow in sortedWorkflows %}\n            class {{ workflow._id }} subgraphStyle;\n            {% endfor %}\n          </pre>\n        </div>\n\n        <style>\n          .diagram-container {\n            background: white;\n            padding: 20px;\n            border: 1px solid #b1b4b6;\n            margin: 30px 0;\n            overflow-x: auto;\n          }\n          .mermaid {\n            text-align: center;\n            min-width: 800px;\n          }\n        </style>\n\n        <script src=\"{{ getAssetPath('javascripts/mermaid.min.js') }}\"></script>\n        <script>\n          mermaid.initialize({\n            startOnLoad: true,\n            theme: 'default',\n            securityLevel: 'loose',\n            flowchart: {\n              useMaxWidth: false,\n              htmlLabels: true,\n              curve: 'basis'\n            }\n          });\n        </script>\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/projects/views/list.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n\n{% block pageTitle %}Projects - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-full\">\n        <h1 class=\"govuk-heading-xl\">Projects</h1>\n\n        {{ govukButton({\n          text: \"Create new project\",\n          href: \"/projects/new\",\n          classes: \"govuk-button\",\n          attributes: {\n            \"data-testid\": \"create-project-button\"\n          }\n        }) }}\n        \n        {% if projects and projects.length %}\n          <table class=\"govuk-table\">\n            <thead class=\"govuk-table__head\">\n              <tr class=\"govuk-table__row\">\n                <th scope=\"col\" class=\"govuk-table__header\">Project Name</th>\n                <th scope=\"col\" class=\"govuk-table__header\">Governance Template</th>\n                <th scope=\"col\" class=\"govuk-table__header\">Description</th>\n              </tr>\n            </thead>\n            <tbody class=\"govuk-table__body\">\n              {% for project in projects %}\n                <tr class=\"govuk-table__row\">\n                  <td class=\"govuk-table__cell\">\n                    <a href=\"/projects/{{ project._id }}\" class=\"govuk-link\">{{ project.name }}</a>\n                  </td>\n                  <td class=\"govuk-table__cell\">\n                    {% if project.governanceTemplateId %}\n                      {{ project.governanceTemplateName }}\n                    {% else %}\n                      <span class=\"govuk-hint\">No template assigned</span>\n                    {% endif %}\n                  </td>\n                  <td class=\"govuk-table__cell\">\n                    {% if project.description %}\n                      {{ project.description }}\n                    {% else %}\n                      <span class=\"govuk-hint\">No description available</span>\n                    {% endif %}\n                  </td>\n                </tr>\n              {% endfor %}\n            </tbody>\n          </table>\n        {% else %}\n          <p class=\"govuk-body\">No projects found.</p>\n        {% endif %}\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/projects/views/new.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/input/macro.njk\" import govukInput %}\n{% from \"govuk/components/textarea/macro.njk\" import govukTextarea %}\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n{% from \"govuk/components/error-summary/macro.njk\" import govukErrorSummary %}\n{% from \"govuk/components/select/macro.njk\" import govukSelect %}\n{% from \"govuk/components/checkboxes/macro.njk\" import govukCheckboxes %}\n\n{% block pageTitle %}{{ pageTitle }} - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-two-thirds\">\n        <a href=\"/projects\" class=\"govuk-back-link\">Back to projects</a>\n\n        {% if error %}\n          {{ govukErrorSummary({\n            titleText: \"There is a problem\",\n            errorList: [\n              {\n                text: error,\n                href: \"#name\"\n              }\n            ]\n          }) }}\n        {% endif %}\n\n        <h1 class=\"govuk-heading-xl\">Create New Project</h1>\n\n        <form method=\"POST\" action=\"/projects\" novalidate>\n          {{ govukInput({\n            label: {\n              text: \"Project Name\",\n              classes: \"govuk-label--m\"\n            },\n            id: \"name\",\n            name: \"name\",\n            value: values.name if values else \"\",\n            errorMessage: {\n              text: \"Enter a project name\"\n            } if error,\n            attributes: {\n              \"data-testid\": \"project-name\",\n              \"required\": \"required\",\n              \"aria-required\": \"true\"\n            }\n          }) }}\n\n          {{ govukTextarea({\n            label: {\n              text: \"Description\",\n              classes: \"govuk-label--m\"\n            },\n            id: \"description\",\n            name: \"description\",\n            value: values.description if values else \"\",\n            attributes: {\n              \"data-testid\": \"project-description\"\n            }\n          }) }}\n\n          {% if governanceTemplates and governanceTemplates.length > 0 %}\n            {% set templateItems = [{\n              value: \"\",\n              text: \"Select a template\"\n            }] %}\n            {% for template in governanceTemplates %}\n              {% set _ = templateItems.push({\n                value: template._id,\n                text: template.name + \" (v\" + template.version + \")\",\n                selected: values.governanceTemplateId == template._id\n              }) %}\n            {% endfor %}\n\n            {{ govukSelect({\n              id: \"governanceTemplateId\",\n              name: \"governanceTemplateId\",\n              label: {\n                text: \"Governance Template\",\n                classes: \"govuk-label--m\"\n              },\n              items: templateItems,\n              errorMessage: {\n                text: \"Select a governance template\"\n              } if error,\n              attributes: {\n                \"data-testid\": \"governance-template-select\",\n                \"onchange\": \"handleTemplateChange(this.value)\"\n              }\n            }) }}\n          {% endif %}\n\n          {% if workflows and workflows.length > 0 %}\n            {% set workflowItems = [] %}\n            {% for workflow in workflows %}\n              {% set workflowItems = workflowItems.concat([{\n                value: workflow._id,\n                text: workflow.name,\n                checked: values.governanceTemplateId is not undefined\n              }]) %}\n            {% endfor %}\n\n            <div class=\"govuk-form-group govuk-!-margin-bottom-6\">\n              {{ govukCheckboxes({\n                name: \"selectedWorkflowTemplateIds\",\n                idPrefix: \"selectedWorkflowTemplateIds\",\n                fieldset: {\n                  legend: {\n                    text: \"Select Workflows\",\n                    classes: \"govuk-fieldset__legend--m\"\n                  }\n                },\n                hint: {\n                  text: \"Select the workflows to include in this project\"\n                },\n                items: workflowItems,\n                attributes: {\n                  \"data-testid\": \"workflow-checkboxes\"\n                }\n              }) }}\n            </div>\n          {% endif %}\n\n          {{ govukButton({\n            text: \"Create project\",\n            attributes: {\n              \"data-testid\": \"submit-button\"\n            }\n          }) }}\n        </form>\n\n        <script>\n          function validateForm(event) {\n            const errors = [];\n            const nameField = document.getElementById('name');\n            const governanceTemplateField = document.getElementById('governanceTemplateId');\n            const workflowCheckboxes = document.querySelectorAll('input[name=\"selectedWorkflowTemplateIds\"]:checked');\n\n            if (!nameField.value.trim()) {\n              errors.push({\n                field: 'name',\n                message: 'Enter a project name'\n              });\n              nameField.closest('.govuk-form-group').classList.add('govuk-form-group--error');\n              nameField.classList.add('govuk-input--error');\n            }\n\n            if (!governanceTemplateField?.value) {\n              errors.push({\n                field: 'governanceTemplateId',\n                message: 'Select a governance template'\n              });\n              governanceTemplateField.closest('.govuk-form-group').classList.add('govuk-form-group--error');\n              governanceTemplateField.classList.add('govuk-select--error');\n            }\n\n            if (workflowCheckboxes.length === 0) {\n              errors.push({\n                field: 'selectedWorkflowTemplateIds',\n                message: 'Select at least one workflow'\n              });\n              const workflowGroup = document.querySelector('[data-testid=\"workflow-checkboxes\"]');\n              if (workflowGroup) {\n                workflowGroup.closest('.govuk-form-group').classList.add('govuk-form-group--error');\n              }\n            }\n\n            if (errors.length > 0) {\n              event.preventDefault();\n              const errorSummary = document.createElement('div');\n              errorSummary.className = 'govuk-error-summary';\n              errorSummary.setAttribute('data-module', 'govuk-error-summary');\n              errorSummary.innerHTML = `\n                <div role=\"alert\">\n                  <h2 class=\"govuk-error-summary__title\">There is a problem</h2>\n                  <div class=\"govuk-error-summary__body\">\n                    <ul class=\"govuk-list govuk-error-summary__list\">\n                      ${errors.map(error => `<li><a href=\"#${error.field}\">${error.message}</a></li>`).join('')}\n                    </ul>\n                  </div>\n                </div>`;\n              const form = document.querySelector('form');\n              form.parentNode.insertBefore(errorSummary, form);\n              document.getElementById(errors[0].field)?.focus();\n              return false;\n            }\n            return true;\n          }\n\n          function handleTemplateChange(governanceTemplateId) {\n            const name = document.getElementById('name').value;\n            const description = document.getElementById('description').value;\n            const params = new URLSearchParams();\n            \n            if (governanceTemplateId) {\n              params.append('governanceTemplateId', governanceTemplateId);\n            }\n            if (name) {\n              params.append('name', name);\n            }\n            if (description) {\n              params.append('description', description);\n            }\n\n            window.location.href = `/projects/new${params.toString() ? '?' + params.toString() : ''}`;\n          }\n        </script>\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} "
    },
    {
      "chunk_id": "governance_template_management",
      "description": "Governance template management functionality",
      "files": [
        "src/server/governance-templates/controller.js",
        "src/server/governance-templates/index.js",
        "src/server/governance-templates/views/delete-confirmation.njk",
        "src/server/governance-templates/views/detail.njk",
        "src/server/governance-templates/views/diagram.njk",
        "src/server/governance-templates/views/list.njk",
        "src/server/governance-templates/views/new.njk"
      ],
      "content": "\n\n--- src/server/governance-templates/controller.js ---\nimport { config } from '~/src/config/config.js'\n\nexport const governanceTemplatesController = {\n  async list(request, h) {\n    try {\n      const response = await fetch(\n        `${config.get('apiServer')}/api/v1/governance-templates`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      const templates = await response.json()\n\n      return h.view('governance-templates/views/list', {\n        pageTitle: 'Governance Templates',\n        templates\n      })\n    } catch (error) {\n      request.logger.error(error)\n      return h.view('governance-templates/views/list', {\n        pageTitle: 'Governance Templates',\n        templates: [],\n        error: 'Unable to load governance templates'\n      })\n    }\n  },\n\n  new(request, h) {\n    return h.view('governance-templates/views/new', {\n      pageTitle: 'Create New Governance Template'\n    })\n  },\n\n  async create(request, h) {\n    try {\n      const { name, version, description } = request.payload\n\n      const response = await fetch(\n        `${config.get('apiServer')}/api/v1/governance-templates`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name,\n            version,\n            description\n          })\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      const template = await response.json()\n      return h.redirect(`/governance-templates/${template._id}`)\n    } catch (error) {\n      request.logger.error(error)\n      return h.view('governance-templates/views/new', {\n        pageTitle: 'Create New Governance Template',\n        error: 'Unable to create governance template',\n        values: request.payload\n      })\n    }\n  },\n\n  async detail(request, h) {\n    try {\n      const { id } = request.params\n\n      // First get the governance template\n      const templateResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/governance-templates/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!templateResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${templateResponse.status}`\n        )\n      }\n\n      const template = await templateResponse.json()\n\n      // Then get associated workflow templates\n      const workflowsResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-templates?governanceTemplateId=${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!workflowsResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${workflowsResponse.status}`\n        )\n      }\n\n      const workflowTemplates = await workflowsResponse.json()\n\n      // Sort workflow templates by order if available, otherwise keep the original order\n      template.workflowTemplates = workflowTemplates.sort((a, b) => {\n        // If both have order, sort by order\n        if (a.order !== undefined && b.order !== undefined) {\n          return a.order - b.order\n        }\n        // If only a has order, a comes first\n        if (a.order !== undefined) {\n          return -1\n        }\n        // If only b has order, b comes first\n        if (b.order !== undefined) {\n          return 1\n        }\n        // If neither has order, maintain original order\n        return 0\n      })\n\n      request.logger.info(\n        `Found ${workflowTemplates.length} workflow templates for governance template ${id}`\n      )\n\n      return h.view('governance-templates/views/detail', {\n        pageTitle: `${template.name} (${template.version})`,\n        template,\n        request\n      })\n    } catch (error) {\n      request.logger.error('Error loading governance template:', error)\n      return h.view('governance-templates/views/detail', {\n        pageTitle: 'Template Not Found',\n        error: 'Unable to load governance template',\n        request\n      })\n    }\n  },\n\n  async diagram(request, h) {\n    try {\n      const { id } = request.params\n\n      // Fetch governance template details\n      const templateResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/governance-templates/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!templateResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${templateResponse.status}`\n        )\n      }\n\n      const template = await templateResponse.json()\n\n      // Fetch all workflows for this template\n      const workflowsResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-templates?governanceTemplateId=${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!workflowsResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${workflowsResponse.status}`\n        )\n      }\n\n      const workflows = await workflowsResponse.json()\n      template.workflowTemplates = workflows\n\n      // Fetch checklist items for each workflow\n      for (const workflow of template.workflowTemplates) {\n        const checklistItemsResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/checklist-item-templates?workflowTemplateId=${workflow._id}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }\n        )\n\n        if (checklistItemsResponse.ok) {\n          workflow.checklistItemTemplates = await checklistItemsResponse.json()\n        } else {\n          workflow.checklistItemTemplates = []\n        }\n      }\n\n      return h.view('governance-templates/views/diagram', {\n        pageTitle: `${template.name} Dependencies`,\n        template\n      })\n    } catch (error) {\n      request.logger.error(error)\n      return h.view('governance-templates/views/diagram', {\n        pageTitle: 'Governance Template Not Found',\n        error: 'Unable to load governance template'\n      })\n    }\n  },\n\n  async deleteConfirmation(request, h) {\n    try {\n      const { id } = request.params\n\n      // Fetch governance template details\n      const templateResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/governance-templates/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!templateResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${templateResponse.status}`\n        )\n      }\n\n      const template = await templateResponse.json()\n\n      return h.view('governance-templates/views/delete-confirmation', {\n        pageTitle: 'Delete Governance Template',\n        template\n      })\n    } catch (error) {\n      request.logger.error(\n        'Error fetching governance template for deletion:',\n        error\n      )\n      return h.view('governance-templates/views/delete-confirmation', {\n        pageTitle: 'Delete Governance Template',\n        error: 'Unable to load governance template details. Please try again.',\n        template: { _id: request.params.id }\n      })\n    }\n  },\n\n  async delete(request, h) {\n    try {\n      const { id } = request.params\n\n      // Delete the governance template\n      const response = await fetch(\n        `${config.get('apiServer')}/api/v1/governance-templates/${id}`,\n        {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      return h.redirect('/governance-templates')\n    } catch (error) {\n      request.logger.error('Error deleting governance template:', error)\n\n      // Try to fetch the template again to show the error page\n      try {\n        const templateResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/governance-templates/${request.params.id}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }\n        )\n\n        const template = templateResponse.ok\n          ? await templateResponse.json()\n          : { _id: request.params.id }\n\n        return h.view('governance-templates/views/delete-confirmation', {\n          pageTitle: 'Delete Governance Template',\n          error: 'Unable to delete governance template. Please try again.',\n          template\n        })\n      } catch (fetchError) {\n        request.logger.error(\n          'Error fetching template after delete failure:',\n          fetchError\n        )\n        return h.view('governance-templates/views/delete-confirmation', {\n          pageTitle: 'Delete Governance Template',\n          error: 'Unable to delete governance template. Please try again.',\n          template: { _id: request.params.id }\n        })\n      }\n    }\n  },\n\n  async reorderWorkflow(request, h) {\n    try {\n      const { id, workflowId } = request.params\n      const { direction } = request.payload\n\n      // Call the API to reorder the workflow\n      const response = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-templates/${workflowId}/reorder`,\n        {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            governanceTemplateId: id,\n            direction\n          })\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      // Redirect back to the governance template detail page\n      return h.redirect(`/governance-templates/${id}`)\n    } catch (error) {\n      request.logger.error('Error reordering workflow:', error)\n\n      // Redirect back to the governance template detail page with an error\n      return h.redirect(\n        `/governance-templates/${request.params.id}?error=Unable to reorder workflow. Please try again.`\n      )\n    }\n  }\n}\n\n\n--- src/server/governance-templates/index.js ---\nimport { governanceTemplatesController } from './controller.js'\n\n/**\n * @type {import('@hapi/hapi').ServerRegisterPluginObject<void>}\n */\nexport const governanceTemplates = {\n  plugin: {\n    name: 'governance-templates',\n    register(server) {\n      server.route([\n        {\n          method: 'GET',\n          path: '/governance-templates',\n          handler: governanceTemplatesController.list.bind(\n            governanceTemplatesController\n          ),\n          options: {\n            description: 'List all governance templates',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/governance-templates/new',\n          handler: governanceTemplatesController.new.bind(\n            governanceTemplatesController\n          ),\n          options: {\n            description: 'Create new governance template',\n            auth: false\n          }\n        },\n        {\n          method: 'POST',\n          path: '/governance-templates',\n          handler: governanceTemplatesController.create.bind(\n            governanceTemplatesController\n          ),\n          options: {\n            description: 'Create new governance template',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/governance-templates/{id}',\n          handler: governanceTemplatesController.detail.bind(\n            governanceTemplatesController\n          ),\n          options: {\n            description: 'View governance template details',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/governance-templates/{id}/diagram',\n          handler: governanceTemplatesController.diagram.bind(\n            governanceTemplatesController\n          ),\n          options: {\n            description: 'View governance template dependencies diagram',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/governance-templates/{id}/delete',\n          handler: governanceTemplatesController.deleteConfirmation.bind(\n            governanceTemplatesController\n          ),\n          options: {\n            description: 'Governance template delete confirmation',\n            auth: false\n          }\n        },\n        {\n          method: 'POST',\n          path: '/governance-templates/{id}/delete',\n          handler: governanceTemplatesController.delete.bind(\n            governanceTemplatesController\n          ),\n          options: {\n            description: 'Delete governance template',\n            auth: false\n          }\n        },\n        {\n          method: 'POST',\n          path: '/governance-templates/{id}/workflows/{workflowId}/reorder',\n          handler: governanceTemplatesController.reorderWorkflow.bind(\n            governanceTemplatesController\n          ),\n          options: {\n            description: 'Reorder workflow in governance template',\n            auth: false\n          }\n        }\n      ])\n    }\n  }\n}\n\n\n--- src/server/governance-templates/views/delete-confirmation.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n{% from \"govuk/components/warning-text/macro.njk\" import govukWarningText %}\n\n{% block pageTitle %}Delete Governance Template - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-two-thirds\">\n        <a href=\"/governance-templates/{{ template._id }}\" class=\"govuk-back-link\">Back to template</a>\n\n        {% if error %}\n          <div class=\"govuk-error-summary\" role=\"alert\" tabindex=\"-1\">\n            <h2 class=\"govuk-error-summary__title\">Error</h2>\n            <div class=\"govuk-error-summary__body\">\n              <p>{{ error }}</p>\n            </div>\n          </div>\n        {% endif %}\n\n        <h1 class=\"govuk-heading-xl\">Delete Governance Template</h1>\n        \n        {{ govukWarningText({\n          text: \"This action cannot be undone. All associated workflows and checklist items will also be deleted.\",\n          iconFallbackText: \"Warning\"\n        }) }}\n\n        <p class=\"govuk-body\">Are you sure you want to delete the governance template: <strong>{{ template.name }}</strong>?</p>\n\n        <form method=\"POST\" action=\"/governance-templates/{{ template._id }}/delete\" novalidate>\n          <div class=\"govuk-button-group\">\n            {{ govukButton({\n              text: \"Yes, delete template\",\n              classes: \"govuk-button--warning\",\n              attributes: {\n                \"data-testid\": \"confirm-delete-button\"\n              }\n            }) }}\n\n            <a href=\"/governance-templates/{{ template._id }}\" class=\"govuk-link\">\n              Cancel\n            </a>\n          </div>\n        </form>\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/governance-templates/views/detail.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n\n{% block pageTitle %}{{ pageTitle }} - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-two-thirds\">\n        <a href=\"/governance-templates\" class=\"govuk-back-link\">Back to templates</a>\n\n        {% if error %}\n          <div class=\"govuk-error-summary\" role=\"alert\" tabindex=\"-1\">\n            <h2 class=\"govuk-error-summary__title\">Error</h2>\n            <div class=\"govuk-error-summary__body\">\n              <p>{{ error }}</p>\n            </div>\n          </div>\n        {% elif request.query.error %}\n          <div class=\"govuk-error-summary\" role=\"alert\" tabindex=\"-1\">\n            <h2 class=\"govuk-error-summary__title\">Error</h2>\n            <div class=\"govuk-error-summary__body\">\n              <p>{{ request.query.error }}</p>\n            </div>\n          </div>\n        {% else %}\n          <h1 class=\"govuk-heading-xl\">{{ template.name }}</h1>\n          \n          <dl class=\"govuk-summary-list\">\n            <div class=\"govuk-summary-list__row\">\n              <dt class=\"govuk-summary-list__key\">Version</dt>\n              <dd class=\"govuk-summary-list__value\">{{ template.version }}</dd>\n            </div>\n            {% if template.description %}\n              <div class=\"govuk-summary-list__row\">\n                <dt class=\"govuk-summary-list__key\">Description</dt>\n                <dd class=\"govuk-summary-list__value\">{{ template.description }}</dd>\n              </div>\n            {% endif %}\n          </dl>\n\n          <div class=\"govuk-button-group\">\n            {{ govukButton({\n              text: \"Add new workflow\",\n              href: \"/governance-templates/\" + template._id + \"/workflows/new\",\n              classes: \"govuk-button--secondary\",\n              attributes: {\n                \"data-testid\": \"add-workflow-button\"\n              }\n            }) }}\n\n            {{ govukButton({\n              text: \"View Dependencies Diagram\",\n              href: \"/governance-templates/\" + template._id + \"/diagram\",\n              classes: \"govuk-button--secondary\",\n              attributes: {\n                \"data-testid\": \"view-diagram-button\"\n              }\n            }) }}\n\n            {{ govukButton({\n              text: \"Delete Template\",\n              classes: \"govuk-button--warning\",\n              href: \"/governance-templates/\" + template._id + \"/delete\",\n              attributes: {\n                \"data-testid\": \"delete-template-button-\" + template._id\n              }\n            }) }}\n          </div>\n\n          <h2 class=\"govuk-heading-l\">Associated Workflows</h2>\n          \n          {% if template.workflowTemplates and template.workflowTemplates.length > 1 %}\n            <p class=\"govuk-hint\">Use the up and down arrows to reorder workflows.</p>\n          {% endif %}\n\n          {% if template.workflowTemplates and template.workflowTemplates.length > 0 %}\n            <table class=\"govuk-table\">\n              <thead class=\"govuk-table__head\">\n                <tr class=\"govuk-table__row\">\n                  <th scope=\"col\" class=\"govuk-table__header\">Workflow Name</th>\n                  <th scope=\"col\" class=\"govuk-table__header\">Description</th>\n                  <th scope=\"col\" class=\"govuk-table__header\">Reorder</th>\n                </tr>\n              </thead>\n              <tbody class=\"govuk-table__body\">\n                {% for workflow in template.workflowTemplates %}\n                  <tr class=\"govuk-table__row\">\n\n                    <td class=\"govuk-table__cell\">\n                      <a href=\"/workflow-templates/{{ workflow._id }}\" class=\"govuk-link\">{{ workflow.name }}</a>\n                    </td>\n                    <td class=\"govuk-table__cell\">\n                      {% if workflow.description %}\n                        {{ workflow.description }}\n                      {% else %}\n                        <span class=\"govuk-hint\">No description available</span>\n                      {% endif %}\n                    </td>\n                    <td class=\"govuk-table__cell\">\n                      <div class=\"govuk-button-group\">\n                        {% if not loop.first %}\n                          <form method=\"POST\" action=\"/api/v1/workflow-templates/{{ workflow._id }}\" class=\"govuk-!-margin-bottom-0 govuk-!-margin-right-2\" style=\"display: inline-block;\">\n                            <input type=\"hidden\" name=\"order\" value=\"{{ (workflow.order if workflow.order is defined else loop.index) - 1 }}\">\n                            <button type=\"submit\" class=\"govuk-button govuk-button--secondary govuk-!-margin-bottom-0 govuk-!-padding-left-2 govuk-!-padding-right-2\" data-module=\"govuk-button\" aria-label=\"Move {{ workflow.name }} up\" data-testid=\"move-up-button-{{ workflow._id }}\">\n                              <span aria-hidden=\"true\">↑</span>\n                            </button>\n                          </form>\n                        {% endif %}\n                        \n                        {% if not loop.last %}\n                          <form method=\"POST\" action=\"/api/v1/workflow-templates/{{ workflow._id }}\" class=\"govuk-!-margin-bottom-0\" style=\"display: inline-block;\">\n                            <input type=\"hidden\" name=\"order\" value=\"{{ (workflow.order if workflow.order is defined else loop.index) + 1 }}\">\n                            <button type=\"submit\" class=\"govuk-button govuk-button--secondary govuk-!-margin-bottom-0 govuk-!-padding-left-2 govuk-!-padding-right-2\" data-module=\"govuk-button\" aria-label=\"Move {{ workflow.name }} down\" data-testid=\"move-down-button-{{ workflow._id }}\">\n                              <span aria-hidden=\"true\">↓</span>\n                            </button>\n                          </form>\n                        {% endif %}\n                      </div>\n                    </td>\n                  </tr>\n                {% endfor %}\n              </tbody>\n            </table>\n          {% else %}\n            <p class=\"govuk-body\">No workflows associated with this template.</p>\n          {% endif %}\n\n          {% if template.content %}\n            <div class=\"govuk-body\">\n              {{ template.content | safe }}\n            </div>\n          {% endif %}\n        {% endif %}\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/governance-templates/views/diagram.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% block pageTitle %}{{ template.name }} Dependencies - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-full\">\n        <a href=\"/governance-templates/{{ template._id }}\" class=\"govuk-back-link\">Back to template</a>\n\n        <h1 class=\"govuk-heading-xl\">{{ template.name }} - Dependencies Diagram</h1>\n\n        <div class=\"diagram-container govuk-body\">\n          <pre class=\"mermaid\">\n            %%{\n              init: {\n                'flowchart': {\n                  'nodeSpacing': 50,\n                  'rankSpacing': 100,\n                  'htmlLabels': true\n                },\n                'theme': 'base',\n                'themeVariables': {\n                  'fontFamily': 'GDS Transport'\n                }\n              }\n            }%%\n            graph LR\n            \n            %% Sort workflows by order number\n            {% set sortedWorkflows = template.workflowTemplates | sort(attribute='orderNumber') %}\n\n            %% Define all nodes first, sorted by checklist item order\n            {% for workflow in sortedWorkflows %}\n              {% set sortedItems = workflow.checklistItemTemplates | sort(attribute='orderNumber') %}\n              {% for item in sortedItems %}\n                {{ item._id }}[\"{{ item.name }}<br/><small>({{ item.type }})</small>\"]:::default\n              {% endfor %}\n            {% endfor %}\n\n            %% Group items by workflow\n            {% for workflow in sortedWorkflows %}\n              subgraph {{ workflow._id }}[{{ workflow.name }}]\n                {% set sortedItems = workflow.checklistItemTemplates | sort(attribute='orderNumber') %}\n                {% for item in sortedItems %}\n                  {{ item._id }}\n                {% endfor %}\n              end\n            {% endfor %}\n\n            %% Stack subgraphs horizontally by workflow order\n            {% for workflow in sortedWorkflows %}\n              {% if not loop.first %}\n                {{ workflow._id }} ~~~ {{ sortedWorkflows[loop.index0 - 1]._id }}\n              {% endif %}\n            {% endfor %}\n\n            %% Add all dependencies\n            {% for workflow in sortedWorkflows %}\n              {% for item in workflow.checklistItemTemplates %}\n                {% for dep in item.dependencies_requires %}\n                  {% if dep._id %}\n                    {{ dep._id }} --> {{ item._id }}\n                  {% else %}\n                    {% for depItem in workflow.checklistItemTemplates %}\n                      {% if depItem._id == dep %}\n                        {{ depItem._id }} --> {{ item._id }}\n                      {% endif %}\n                    {% endfor %}\n                  {% endif %}\n                {% endfor %}\n              {% endfor %}\n            {% endfor %}\n            \n            classDef default fill:#f8f8f8,stroke:#505a5f,stroke-width:2px,rx:4,ry:4;\n            classDef subgraphStyle fill:#ffffff,stroke:#1d70b8,stroke-width:2px;\n            linkStyle default stroke:#1d70b8,stroke-width:2px;\n            {% for workflow in sortedWorkflows %}\n            class {{ workflow._id }} subgraphStyle;\n            {% endfor %}\n          </pre>\n        </div>\n\n        <style>\n          .diagram-container {\n            background: white;\n            padding: 20px;\n            border: 1px solid #b1b4b6;\n            margin: 30px 0;\n            overflow-x: auto;\n          }\n          .mermaid {\n            text-align: center;\n            min-width: 800px;\n          }\n        </style>\n\n        <script src=\"{{ getAssetPath('javascripts/mermaid.min.js') }}\"></script>\n        <script>\n          mermaid.initialize({\n            startOnLoad: true,\n            theme: 'default',\n            securityLevel: 'loose',\n            flowchart: {\n              useMaxWidth: false,\n              htmlLabels: true,\n              curve: 'basis'\n            }\n          });\n        </script>\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/governance-templates/views/list.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n\n{% block pageTitle %}Governance Templates - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-full\">\n        <h1 class=\"govuk-heading-xl\">Governance Templates</h1>\n\n        {{ govukButton({\n          text: \"Create new template\",\n          href: \"/governance-templates/new\",\n          classes: \"govuk-button\",\n          attributes: {\n            \"data-testid\": \"create-template-button\"\n          }\n        }) }}\n        \n        {% if templates and templates.length %}\n          <table class=\"govuk-table\">\n            <thead class=\"govuk-table__head\">\n              <tr class=\"govuk-table__row\">\n                <th scope=\"col\" class=\"govuk-table__header\">Template Name</th>\n                <th scope=\"col\" class=\"govuk-table__header\">Version</th>\n                <th scope=\"col\" class=\"govuk-table__header\">Description</th>\n              </tr>\n            </thead>\n            <tbody class=\"govuk-table__body\">\n              {% for template in templates %}\n                <tr class=\"govuk-table__row\">\n                  <td class=\"govuk-table__cell\">\n                    <a href=\"/governance-templates/{{ template._id }}\" class=\"govuk-link\">{{ template.name }}</a>\n                  </td>\n                  <td class=\"govuk-table__cell\">\n                    <strong class=\"govuk-tag\">{{ template.version }}</strong>\n                  </td>\n                  <td class=\"govuk-table__cell\">\n                    {% if template.description %}\n                      {{ template.description }}\n                    {% else %}\n                      <span class=\"govuk-hint\">No description available</span>\n                    {% endif %}\n                  </td>\n                </tr>\n              {% endfor %}\n            </tbody>\n          </table>\n        {% else %}\n          <p class=\"govuk-body\">No governance templates found.</p>\n        {% endif %}\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/governance-templates/views/new.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/input/macro.njk\" import govukInput %}\n{% from \"govuk/components/textarea/macro.njk\" import govukTextarea %}\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n{% from \"govuk/components/error-summary/macro.njk\" import govukErrorSummary %}\n\n{% block pageTitle %}{{ pageTitle }} - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-two-thirds\">\n        <a href=\"/governance-templates\" class=\"govuk-back-link\">Back to templates</a>\n\n        {% if error %}\n          {{ govukErrorSummary({\n            titleText: \"There is a problem\",\n            errorList: [\n              {\n                text: error,\n                href: \"#name\"\n              }\n            ]\n          }) }}\n        {% endif %}\n\n        <h1 class=\"govuk-heading-xl\">Create New Governance Template</h1>\n\n        <form method=\"POST\" action=\"/governance-templates\" novalidate>\n          {{ govukInput({\n            label: {\n              text: \"Template Name\",\n              classes: \"govuk-label--m\"\n            },\n            id: \"name\",\n            name: \"name\",\n            value: values.name if values else \"\",\n            errorMessage: {\n              text: \"Enter a template name\"\n            } if error,\n            attributes: {\n              \"data-testid\": \"template-name\"\n            }\n          }) }}\n\n          {{ govukInput({\n            label: {\n              text: \"Version\",\n              classes: \"govuk-label--m\"\n            },\n            id: \"version\",\n            name: \"version\",\n            value: values.version if values else \"\",\n            errorMessage: {\n              text: \"Enter a version\"\n            } if error,\n            attributes: {\n              \"data-testid\": \"template-version\"\n            }\n          }) }}\n\n          {{ govukTextarea({\n            label: {\n              text: \"Description\",\n              classes: \"govuk-label--m\"\n            },\n            id: \"description\",\n            name: \"description\",\n            value: values.description if values else \"\",\n            attributes: {\n              \"data-testid\": \"template-description\"\n            }\n          }) }}\n\n          {{ govukButton({\n            text: \"Create template\",\n            attributes: {\n              \"data-testid\": \"submit-button\"\n            }\n          }) }}\n        </form>\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} "
    },
    {
      "chunk_id": "workflow_template_management",
      "description": "Workflow template management functionality",
      "files": [
        "src/server/workflow-templates/controller.js",
        "src/server/workflow-templates/index.js",
        "src/server/workflow-templates/views/delete-confirmation.njk",
        "src/server/workflow-templates/views/detail.njk",
        "src/server/workflow-templates/views/diagram.njk",
        "src/server/workflow-templates/views/new.njk"
      ],
      "content": "\n\n--- src/server/workflow-templates/controller.js ---\nimport { config } from '~/src/config/config.js'\n\nexport const workflowTemplatesController = {\n  new(request, h) {\n    const { governanceTemplateId } = request.params\n    return h.view('workflow-templates/views/new', {\n      pageTitle: 'Create New Workflow Template',\n      governanceTemplateId\n    })\n  },\n\n  async create(request, h) {\n    try {\n      const { governanceTemplateId } = request.params\n      const { name, description } = request.payload\n\n      request.logger.info(\n        `Creating workflow template for governance template ${governanceTemplateId}`\n      )\n\n      const apiUrl = `${config.get('apiServer')}/api/v1/workflow-templates`\n      const requestBody = {\n        governanceTemplateId,\n        name,\n        description\n      }\n\n      request.logger.info(\n        `Making POST request to ${apiUrl} with body:`,\n        requestBody\n      )\n\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      })\n\n      if (!response.ok) {\n        const errorText = await response.text()\n        request.logger.error(\n          `API call failed with status: ${response.status}, body: ${errorText}`\n        )\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      const createdWorkflow = await response.json()\n      request.logger.info(\n        `Successfully created workflow template with ID: ${createdWorkflow._id}`\n      )\n\n      return h.redirect(`/governance-templates/${governanceTemplateId}`)\n    } catch (error) {\n      request.logger.error('Error creating workflow template:', error)\n      return h.view('workflow-templates/views/new', {\n        pageTitle: 'Create New Workflow Template',\n        error: 'Unable to create workflow template. Please try again.',\n        values: request.payload,\n        governanceTemplateId: request.params.governanceTemplateId\n      })\n    }\n  },\n\n  async detail(request, h) {\n    try {\n      const { id } = request.params\n\n      // Fetch workflow template details\n      const workflowResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-templates/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!workflowResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${workflowResponse.status}`\n        )\n      }\n\n      const workflow = await workflowResponse.json()\n\n      // Fetch associated checklist items\n      const checklistItemsResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/checklist-item-templates?workflowTemplateId=${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!checklistItemsResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${checklistItemsResponse.status}`\n        )\n      }\n\n      const checklistItems = await checklistItemsResponse.json()\n      workflow.checklistItemTemplates = checklistItems\n\n      request.logger.info(\n        `Found ${checklistItems.length} checklist items for workflow template ${id}`\n      )\n\n      return h.view('workflow-templates/views/detail', {\n        pageTitle: workflow.name,\n        workflow\n      })\n    } catch (error) {\n      request.logger.error(error)\n      return h.view('workflow-templates/views/detail', {\n        pageTitle: 'Workflow Template Not Found',\n        error: 'Unable to load workflow template'\n      })\n    }\n  },\n\n  async diagram(request, h) {\n    try {\n      const { id } = request.params\n\n      // Fetch workflow template details\n      const workflowResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-templates/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!workflowResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${workflowResponse.status}`\n        )\n      }\n\n      const workflow = await workflowResponse.json()\n\n      // Fetch associated checklist items\n      const checklistItemsResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/checklist-item-templates?workflowTemplateId=${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!checklistItemsResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${checklistItemsResponse.status}`\n        )\n      }\n\n      const checklistItems = await checklistItemsResponse.json()\n      workflow.checklistItemTemplates = checklistItems\n\n      // Get unique external workflow IDs from dependencies\n      const externalWorkflowIds = new Set()\n      checklistItems.forEach((item) => {\n        if (item.dependencies_requires) {\n          item.dependencies_requires.forEach((dep) => {\n            if (\n              dep._id &&\n              dep.workflowTemplateId &&\n              dep.workflowTemplateId !== id\n            ) {\n              externalWorkflowIds.add(dep.workflowTemplateId)\n            }\n          })\n        }\n      })\n\n      // Fetch external workflow details\n      const externalWorkflows = []\n      for (const workflowId of externalWorkflowIds) {\n        const externalWorkflowResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/workflow-templates/${workflowId}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }\n        )\n\n        if (externalWorkflowResponse.ok) {\n          const externalWorkflow = await externalWorkflowResponse.json()\n          externalWorkflows.push(externalWorkflow)\n        }\n      }\n\n      return h.view('workflow-templates/views/diagram', {\n        pageTitle: `${workflow.name} Dependencies`,\n        workflow,\n        externalWorkflows\n      })\n    } catch (error) {\n      request.logger.error(error)\n      return h.view('workflow-templates/views/diagram', {\n        pageTitle: 'Workflow Template Not Found',\n        error: 'Unable to load workflow template'\n      })\n    }\n  },\n\n  async deleteConfirmation(request, h) {\n    try {\n      const { id } = request.params\n\n      // Fetch workflow template details\n      const workflowResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-templates/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!workflowResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${workflowResponse.status}`\n        )\n      }\n\n      const workflow = await workflowResponse.json()\n\n      return h.view('workflow-templates/views/delete-confirmation', {\n        pageTitle: 'Delete Workflow Template',\n        workflow\n      })\n    } catch (error) {\n      request.logger.error(\n        'Error fetching workflow template for deletion:',\n        error\n      )\n      return h.view('workflow-templates/views/delete-confirmation', {\n        pageTitle: 'Delete Workflow Template',\n        error: 'Unable to load workflow template details. Please try again.',\n        workflow: { _id: request.params.id }\n      })\n    }\n  },\n\n  async delete(request, h) {\n    try {\n      const { id } = request.params\n\n      // Get the workflow first to know where to redirect after deletion\n      const workflowResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-templates/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      let governanceTemplateId = null\n      if (workflowResponse.ok) {\n        const workflow = await workflowResponse.json()\n        governanceTemplateId = workflow.governanceTemplateId\n      }\n\n      // Delete the workflow template\n      const response = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-templates/${id}`,\n        {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!response.ok) {\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      // Redirect to the governance template if we have its ID, otherwise to the workflows list\n      if (governanceTemplateId) {\n        return h.redirect(`/governance-templates/${governanceTemplateId}`)\n      } else {\n        return h.redirect('/governance-templates')\n      }\n    } catch (error) {\n      request.logger.error('Error deleting workflow template:', error)\n\n      // Try to fetch the workflow again to show the error page\n      try {\n        const workflowResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/workflow-templates/${request.params.id}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }\n        )\n\n        const workflow = workflowResponse.ok\n          ? await workflowResponse.json()\n          : { _id: request.params.id }\n\n        return h.view('workflow-templates/views/delete-confirmation', {\n          pageTitle: 'Delete Workflow Template',\n          error: 'Unable to delete workflow template. Please try again.',\n          workflow\n        })\n      } catch (fetchError) {\n        request.logger.error(\n          'Error fetching workflow after delete failure:',\n          fetchError\n        )\n        return h.view('workflow-templates/views/delete-confirmation', {\n          pageTitle: 'Delete Workflow Template',\n          error: 'Unable to delete workflow template. Please try again.',\n          workflow: { _id: request.params.id }\n        })\n      }\n    }\n  },\n\n  async updateOrder(request, h) {\n    try {\n      const { id } = request.params\n      const { order } = request.payload\n\n      request.logger.info(\n        `Updating order for workflow template ${id} to ${order}`\n      )\n\n      const apiUrl = `${config.get('apiServer')}/api/v1/workflow-templates/${id}`\n      const requestBody = {\n        order: parseInt(order, 10)\n      }\n\n      request.logger.info(\n        `Making PUT request to ${apiUrl} with body:`,\n        requestBody\n      )\n\n      const response = await fetch(apiUrl, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      })\n\n      if (!response.ok) {\n        const errorText = await response.text()\n        request.logger.error(\n          `API call failed with status: ${response.status}, body: ${errorText}`\n        )\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      const updatedWorkflow = await response.json()\n      request.logger.info(\n        `Successfully updated workflow template order for ID: ${updatedWorkflow._id}`\n      )\n\n      // Get the governance template ID to redirect back to the template detail page\n      const workflowResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-templates/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (workflowResponse.ok) {\n        const workflow = await workflowResponse.json()\n        if (workflow.governanceTemplateId) {\n          return h.redirect(\n            `/governance-templates/${workflow.governanceTemplateId}`\n          )\n        }\n      }\n\n      // Fallback redirect if we can't get the governance template ID\n      return h.redirect('/governance-templates')\n    } catch (error) {\n      request.logger.error('Error updating workflow template order:', error)\n\n      // Try to get the governance template ID for redirection with error\n      try {\n        const workflowResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/workflow-templates/${request.params.id}`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }\n        )\n\n        if (workflowResponse.ok) {\n          const workflow = await workflowResponse.json()\n          if (workflow.governanceTemplateId) {\n            return h.redirect(\n              `/governance-templates/${workflow.governanceTemplateId}?error=Unable to update workflow order. Please try again.`\n            )\n          }\n        }\n      } catch (fetchError) {\n        request.logger.error(\n          'Error fetching workflow after update failure:',\n          fetchError\n        )\n      }\n\n      // Fallback redirect with error\n      return h.redirect(\n        '/governance-templates?error=Unable to update workflow order. Please try again.'\n      )\n    }\n  }\n}\n\n\n--- src/server/workflow-templates/index.js ---\nimport { workflowTemplatesController } from './controller.js'\n\n/**\n * @type {import('@hapi/hapi').ServerRegisterPluginObject<void>}\n */\nexport const workflowTemplates = {\n  plugin: {\n    name: 'workflow-templates',\n    register(server) {\n      server.route([\n        {\n          method: 'GET',\n          path: '/workflow-templates/{id}',\n          handler: workflowTemplatesController.detail.bind(\n            workflowTemplatesController\n          ),\n          options: {\n            description: 'View workflow template details',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/governance-templates/{governanceTemplateId}/workflows/new',\n          handler: workflowTemplatesController.new.bind(\n            workflowTemplatesController\n          ),\n          options: {\n            description: 'New workflow template form',\n            auth: false\n          }\n        },\n        {\n          method: 'POST',\n          path: '/governance-templates/{governanceTemplateId}/workflows',\n          handler: workflowTemplatesController.create.bind(\n            workflowTemplatesController\n          ),\n          options: {\n            description: 'Create new workflow template',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/workflow-templates/{id}/delete',\n          handler: workflowTemplatesController.deleteConfirmation.bind(\n            workflowTemplatesController\n          ),\n          options: {\n            description: 'Workflow template delete confirmation',\n            auth: false\n          }\n        },\n        {\n          method: 'POST',\n          path: '/workflow-templates/{id}/delete',\n          handler: workflowTemplatesController.delete.bind(\n            workflowTemplatesController\n          ),\n          options: {\n            description: 'Delete workflow template',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/governance-templates/{governanceTemplateId}/workflows/{id}/diagram',\n          handler: workflowTemplatesController.diagram.bind(\n            workflowTemplatesController\n          ),\n          options: {\n            description: 'View workflow dependencies diagram',\n            auth: false\n          }\n        },\n        {\n          method: ['POST', 'PUT'],\n          path: '/api/v1/workflow-templates/{id}',\n          handler: workflowTemplatesController.updateOrder.bind(\n            workflowTemplatesController\n          ),\n          options: {\n            description: 'Update workflow template order',\n            auth: false\n          }\n        }\n      ])\n    }\n  }\n}\n\n\n--- src/server/workflow-templates/views/delete-confirmation.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n{% from \"govuk/components/warning-text/macro.njk\" import govukWarningText %}\n\n{% block pageTitle %}Delete Workflow Template - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-two-thirds\">\n        <a href=\"/workflow-templates/{{ workflow._id }}\" class=\"govuk-back-link\">Back to workflow</a>\n\n        {% if error %}\n          <div class=\"govuk-error-summary\" role=\"alert\" tabindex=\"-1\">\n            <h2 class=\"govuk-error-summary__title\">Error</h2>\n            <div class=\"govuk-error-summary__body\">\n              <p>{{ error }}</p>\n            </div>\n          </div>\n        {% endif %}\n\n        <h1 class=\"govuk-heading-xl\">Delete Workflow Template</h1>\n        \n        {{ govukWarningText({\n          text: \"This action cannot be undone. All associated checklist items will also be deleted.\",\n          iconFallbackText: \"Warning\"\n        }) }}\n\n        <p class=\"govuk-body\">Are you sure you want to delete the workflow template: <strong>{{ workflow.name }}</strong>?</p>\n\n        <form method=\"POST\" action=\"/workflow-templates/{{ workflow._id }}/delete\" novalidate>\n          <div class=\"govuk-button-group\">\n            {{ govukButton({\n              text: \"Yes, delete workflow\",\n              classes: \"govuk-button--warning\",\n              attributes: {\n                \"data-testid\": \"confirm-delete-button\"\n              }\n            }) }}\n\n            <a href=\"/workflow-templates/{{ workflow._id }}\" class=\"govuk-link\">\n              Cancel\n            </a>\n          </div>\n        </form>\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/workflow-templates/views/detail.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n{% from \"govuk/components/table/macro.njk\" import govukTable %}\n\n{% block pageTitle %}{{ pageTitle }} - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-two-thirds\">\n        <a href=\"/governance-templates/{{ workflow.governanceTemplateId }}\" class=\"govuk-back-link\">Back to template</a>\n\n        {% if error %}\n          <div class=\"govuk-error-summary\" role=\"alert\" tabindex=\"-1\">\n            <h2 class=\"govuk-error-summary__title\">Error</h2>\n            <div class=\"govuk-error-summary__body\">\n              <p>{{ error }}</p>\n            </div>\n          </div>\n        {% else %}\n          <h1 class=\"govuk-heading-xl\">{{ workflow.name }}</h1>\n          \n          <dl class=\"govuk-summary-list\">\n            {% if workflow.description %}\n              <div class=\"govuk-summary-list__row\">\n                <dt class=\"govuk-summary-list__key\">Description</dt>\n                <dd class=\"govuk-summary-list__value\">{{ workflow.description }}</dd>\n              </div>\n            {% endif %}\n          </dl>\n\n          <div class=\"govuk-button-group\">\n            {{ govukButton({\n              text: \"Add new checklist item\",\n              href: \"/governance-templates/\" + workflow.governanceTemplateId + \"/workflows/\" + workflow._id + \"/checklist-items/new\",\n              classes: \"govuk-button--secondary\",\n              attributes: {\n                \"data-testid\": \"add-checklist-item-button\"\n              }\n            }) }}\n\n            {{ govukButton({\n              text: \"View Dependencies Diagram\",\n              href: \"/governance-templates/\" + workflow.governanceTemplateId + \"/workflows/\" + workflow._id + \"/diagram\",\n              classes: \"govuk-button--secondary\",\n              attributes: {\n                \"data-testid\": \"view-diagram-button\"\n              }\n            }) }}\n\n            {{ govukButton({\n              text: \"Delete Workflow\",\n              classes: \"govuk-button--warning\",\n              href: \"/workflow-templates/\" + workflow._id + \"/delete\",\n              attributes: {\n                \"data-testid\": \"delete-workflow-button-\" + workflow._id\n              }\n            }) }}\n          </div>\n\n          <h2 class=\"govuk-heading-l\">Checklist Items</h2>\n\n          {% if workflow.checklistItemTemplates and workflow.checklistItemTemplates.length > 1 %}\n            <p class=\"govuk-hint\">Use the up and down arrows to reorder checklist items.</p>\n          {% endif %}\n\n          {% if workflow.checklistItemTemplates and workflow.checklistItemTemplates.length > 0 %}\n            <table class=\"govuk-table\">\n              <thead class=\"govuk-table__head\">\n                <tr class=\"govuk-table__row\">\n                  <th scope=\"col\" class=\"govuk-table__header\">Name</th>\n                  <th scope=\"col\" class=\"govuk-table__header\">Type</th>\n                  <th scope=\"col\" class=\"govuk-table__header\">Description</th>\n                  <th scope=\"col\" class=\"govuk-table__header\">Requires</th>\n                  <th scope=\"col\" class=\"govuk-table__header\">Required By</th>\n                  <th scope=\"col\" class=\"govuk-table__header\">Reorder</th>\n                </tr>\n              </thead>\n              <tbody class=\"govuk-table__body\">\n                {% for item in workflow.checklistItemTemplates %}\n                  {% set dependenciesRequires = [] %}\n                  {% if item.dependencies_requires %}\n                    {% for dep in item.dependencies_requires %}\n                      {% if dep.name %}\n                        {% set _ = dependenciesRequires.push(dep.name) %}\n                      {% else %}\n                        {% for depItem in workflow.checklistItemTemplates %}\n                          {% if depItem._id == dep %}\n                            {% set _ = dependenciesRequires.push(depItem.name) %}\n                          {% endif %}\n                        {% endfor %}\n                      {% endif %}\n                    {% endfor %}\n                  {% endif %}\n\n                  {% set dependenciesRequiredBy = [] %}\n                  {% if item.dependencies_requiredBy %}\n                    {% for dep in item.dependencies_requiredBy %}\n                      {% set _ = dependenciesRequiredBy.push(dep.name) %}\n                    {% endfor %}\n                  {% else %}\n                    {% for depItem in workflow.checklistItemTemplates %}\n                      {% if depItem.dependencies_requires %}\n                        {% for dep in depItem.dependencies_requires %}\n                          {% if (dep._id and dep._id == item._id) or dep == item._id %}\n                            {% set _ = dependenciesRequiredBy.push(depItem.name) %}\n                          {% endif %}\n                        {% endfor %}\n                      {% endif %}\n                    {% endfor %}\n                  {% endif %}\n\n                  <tr class=\"govuk-table__row\">\n                    <td class=\"govuk-table__cell govuk-!-font-weight-bold\">\n                      <a href=\"/checklist-item-templates/{{ item._id }}\" class=\"govuk-link\" data-testid=\"checklist-item-link\">{{ item.name }}</a>\n                    </td>\n                    <td class=\"govuk-table__cell\">\n                      {{ item.type if item.type else \"Not specified\" }}\n                    </td>\n                    <td class=\"govuk-table__cell\">\n                      {{ item.description if item.description else \"No description provided\" }}\n                    </td>\n                    <td class=\"govuk-table__cell\">\n                      {{ dependenciesRequires | join(\", \") if dependenciesRequires.length else \"None\" }}\n                    </td>\n                    <td class=\"govuk-table__cell\">\n                      {{ dependenciesRequiredBy | join(\", \") if dependenciesRequiredBy.length else \"None\" }}\n                    </td>\n                    <td class=\"govuk-table__cell\">\n                      <div class=\"govuk-button-group\">\n                        {% if not loop.first %}\n                          <form method=\"POST\" action=\"/api/v1/checklist-item-templates/{{ item._id }}\" class=\"govuk-!-margin-bottom-0 govuk-!-margin-right-2\" style=\"display: inline-block;\">\n                            <input type=\"hidden\" name=\"order\" value=\"{{ (item.order if item.order is defined else loop.index) - 1 }}\">\n                            <button type=\"submit\" class=\"govuk-button govuk-button--secondary govuk-!-margin-bottom-0 govuk-!-padding-left-2 govuk-!-padding-right-2\" data-module=\"govuk-button\" aria-label=\"Move {{ item.name }} up\" data-testid=\"move-up-button-{{ item._id }}\">\n                              <span aria-hidden=\"true\">↑</span>\n                            </button>\n                          </form>\n                        {% endif %}\n                        \n                        {% if not loop.last %}\n                          <form method=\"POST\" action=\"/api/v1/checklist-item-templates/{{ item._id }}\" class=\"govuk-!-margin-bottom-0\" style=\"display: inline-block;\">\n                            <input type=\"hidden\" name=\"order\" value=\"{{ (item.order if item.order is defined else loop.index) + 1 }}\">\n                            <button type=\"submit\" class=\"govuk-button govuk-button--secondary govuk-!-margin-bottom-0 govuk-!-padding-left-2 govuk-!-padding-right-2\" data-module=\"govuk-button\" aria-label=\"Move {{ item.name }} down\" data-testid=\"move-down-button-{{ item._id }}\">\n                              <span aria-hidden=\"true\">↓</span>\n                            </button>\n                          </form>\n                        {% endif %}\n                      </div>\n                    </td>\n                  </tr>\n                {% endfor %}\n              </tbody>\n            </table>\n          {% else %}\n            <p class=\"govuk-body\">No checklist items defined for this workflow.</p>\n          {% endif %}\n        {% endif %}\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/workflow-templates/views/diagram.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% block pageTitle %}{{ workflow.name }} Dependencies - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-full\">\n        <a href=\"/workflow-templates/{{ workflow._id }}\" class=\"govuk-back-link\">Back to workflow</a>\n\n        <h1 class=\"govuk-heading-xl\">{{ workflow.name }} - Dependencies Diagram</h1>\n\n        <div class=\"diagram-container govuk-body\">\n          <pre class=\"mermaid\">\n            %%{\n              init: {\n                'flowchart': {\n                  'nodeSpacing': 50,\n                  'rankSpacing': 100,\n                  'htmlLabels': true\n                },\n                'theme': 'base',\n                'themeVariables': {\n                  'fontFamily': 'GDS Transport'\n                }\n              }\n            }%%\n            graph LR\n            \n            %% Sort external workflows by order number if available\n            {% set sortedExternalWorkflows = externalWorkflows | sort(attribute='orderNumber') %}\n\n            %% Define all nodes first, sorted by checklist item order\n            {% set sortedItems = workflow.checklistItemTemplates | sort(attribute='orderNumber') %}\n            {% for item in sortedItems %}\n              {{ item._id }}[\"{{ item.name }}<br/><small>({{ item.type }})</small>\"]:::default\n            {% endfor %}\n            {% for dep in workflow.checklistItemTemplates %}\n              {% for depItem in dep.dependencies_requires %}\n                {% if depItem._id %}\n                  {{ depItem._id }}[\"{{ depItem.name }}<br/><small>({{ depItem.type }})</small>\"]:::default\n                {% endif %}\n              {% endfor %}\n            {% endfor %}\n\n            %% Create external workflow swimlanes first (will appear at left)\n            {% for extWorkflow in sortedExternalWorkflows %}\n              subgraph {{ extWorkflow._id }}[{{ extWorkflow.name }}]\n                {% set extItems = [] %}\n                {% for item in workflow.checklistItemTemplates %}\n                  {% for dep in item.dependencies_requires %}\n                    {% if dep._id and dep.workflowTemplateId == extWorkflow._id %}\n                      {% set extItems = extItems.concat([dep]) %}\n                    {% endif %}\n                  {% endfor %}\n                {% endfor %}\n                {% set sortedExtItems = extItems | sort(attribute='orderNumber') %}\n                {% for item in sortedExtItems %}\n                  {{ item._id }}\n                {% endfor %}\n              end\n            {% endfor %}\n\n            %% Group items by current workflow (will appear at right)\n            subgraph {{ workflow._id }}[{{ workflow.name }}]\n              {% for item in sortedItems %}\n                {{ item._id }}\n              {% endfor %}\n            end\n\n            %% Stack subgraphs horizontally\n            {% for extWorkflow in sortedExternalWorkflows %}\n              {% if not loop.first %}\n                {{ extWorkflow._id }} ~~~ {{ sortedExternalWorkflows[loop.index0 - 1]._id }}\n              {% endif %}\n            {% endfor %}\n            {% if sortedExternalWorkflows.length > 0 %}\n              {{ workflow._id }} ~~~ {{ sortedExternalWorkflows[sortedExternalWorkflows.length - 1]._id }}\n            {% endif %}\n\n            %% Add all dependencies\n            {% for item in workflow.checklistItemTemplates %}\n              {% for dep in item.dependencies_requires %}\n                {% if dep._id %}\n                  {{ dep._id }} --> {{ item._id }}\n                {% else %}\n                  {% for depItem in workflow.checklistItemTemplates %}\n                    {% if depItem._id == dep %}\n                      {{ depItem._id }} --> {{ item._id }}\n                    {% endif %}\n                  {% endfor %}\n                {% endif %}\n              {% endfor %}\n            {% endfor %}\n            \n            classDef default fill:#f8f8f8,stroke:#505a5f,stroke-width:2px,rx:4,ry:4;\n            classDef subgraphStyle fill:#ffffff,stroke:#1d70b8,stroke-width:2px;\n            linkStyle default stroke:#1d70b8,stroke-width:2px;\n            class {{ workflow._id }} subgraphStyle;\n            {% for extWorkflow in sortedExternalWorkflows %}\n            class {{ extWorkflow._id }} subgraphStyle;\n            {% endfor %}\n          </pre>\n        </div>\n\n        <style>\n          .diagram-container {\n            background: white;\n            padding: 20px;\n            border: 1px solid #b1b4b6;\n            margin: 30px 0;\n            overflow-x: auto;\n          }\n          .mermaid {\n            text-align: center;\n            min-width: 800px;\n          }\n        </style>\n\n        <script src=\"{{ getAssetPath('javascripts/mermaid.min.js') }}\"></script>\n        <script>\n          mermaid.initialize({\n            startOnLoad: true,\n            theme: 'default',\n            securityLevel: 'loose',\n            flowchart: {\n              useMaxWidth: false,\n              htmlLabels: true,\n              curve: 'basis'\n            }\n          });\n        </script>\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/workflow-templates/views/new.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/input/macro.njk\" import govukInput %}\n{% from \"govuk/components/textarea/macro.njk\" import govukTextarea %}\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n{% from \"govuk/components/error-summary/macro.njk\" import govukErrorSummary %}\n\n{% block pageTitle %}{{ pageTitle }} - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-two-thirds\">\n        <a href=\"/governance-templates/{{ governanceTemplateId }}\" class=\"govuk-back-link\">Back to template</a>\n\n        {% if error %}\n          {{ govukErrorSummary({\n            titleText: \"There is a problem\",\n            errorList: [\n              {\n                text: error,\n                href: \"#name\"\n              }\n            ]\n          }) }}\n        {% endif %}\n\n        <h1 class=\"govuk-heading-xl\">Create New Workflow Template</h1>\n\n        <form method=\"POST\" action=\"/governance-templates/{{ governanceTemplateId }}/workflows\" novalidate>\n          {{ govukInput({\n            label: {\n              text: \"Workflow Name\",\n              classes: \"govuk-label--m\"\n            },\n            id: \"name\",\n            name: \"name\",\n            value: values.name if values else \"\",\n            errorMessage: {\n              text: \"Enter a workflow name\"\n            } if error,\n            attributes: {\n              \"data-testid\": \"workflow-name\"\n            }\n          }) }}\n\n          {{ govukTextarea({\n            label: {\n              text: \"Description\",\n              classes: \"govuk-label--m\"\n            },\n            id: \"description\",\n            name: \"description\",\n            value: values.description if values else \"\",\n            attributes: {\n              \"data-testid\": \"workflow-description\"\n            }\n          }) }}\n\n          {{ govukButton({\n            text: \"Create workflow\",\n            attributes: {\n              \"data-testid\": \"submit-button\"\n            }\n          }) }}\n        </form>\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} "
    },
    {
      "chunk_id": "checklist_item_template_management",
      "description": "Checklist item template management functionality",
      "files": [
        "src/server/checklist-item-templates/controller.js",
        "src/server/checklist-item-templates/index.js",
        "src/server/checklist-item-templates/views/delete-confirmation.njk",
        "src/server/checklist-item-templates/views/detail.njk",
        "src/server/checklist-item-templates/views/new.njk"
      ],
      "content": "\n\n--- src/server/checklist-item-templates/controller.js ---\nimport { config } from '~/src/config/config.js'\nimport Boom from '@hapi/boom'\n\nexport const checklistItemTemplatesController = {\n  async detail(request, h) {\n    const { id } = request.params\n\n    try {\n      // Fetch checklist item template details\n      const checklistItemResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/checklist-item-templates/${id}`\n      )\n\n      if (!checklistItemResponse.ok) {\n        throw new Error('Failed to fetch checklist item template')\n      }\n\n      const checklistItem = await checklistItemResponse.json()\n      request.logger.info('Fetched checklist item:', {\n        id: checklistItem._id,\n        name: checklistItem.name,\n        dependencies: checklistItem.dependencies_requires\n      })\n      const workflowTemplateId = checklistItem.workflowTemplateId\n\n      // Fetch workflow template details\n      const workflowResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-templates/${workflowTemplateId}`\n      )\n\n      if (!workflowResponse.ok) {\n        throw new Error('Failed to fetch workflow template')\n      }\n\n      const workflow = await workflowResponse.json()\n\n      // Fetch all workflows in the governance template for workflow name mapping\n      const workflowsApiUrl = `${config.get('apiServer')}/api/v1/workflow-templates?governanceTemplateId=${workflow.governanceTemplateId}`\n      const allWorkflowsResponse = await fetch(workflowsApiUrl)\n\n      if (!allWorkflowsResponse.ok) {\n        throw new Error('Failed to fetch workflows')\n      }\n\n      const allWorkflows = await allWorkflowsResponse.json()\n\n      // Create a map of workflow IDs to names for quick lookup\n      const workflowMap = {}\n      allWorkflows.forEach((w) => {\n        if (w?._id && w.name) {\n          workflowMap[w._id] = w.name\n        }\n      })\n\n      // Fetch all checklist items for dependencies\n      const checklistItemsApiUrl = `${config.get('apiServer')}/api/v1/checklist-item-templates?governanceTemplateId=${workflow.governanceTemplateId}`\n      const checklistItemsResponse = await fetch(checklistItemsApiUrl)\n\n      if (!checklistItemsResponse.ok) {\n        throw new Error('Failed to fetch checklist items')\n      }\n\n      const allChecklistItems = await checklistItemsResponse.json()\n      request.logger.info('Available dependencies:', {\n        count: allChecklistItems.length,\n        items: allChecklistItems.map((item) => ({\n          id: item._id,\n          name: item.name,\n          workflowId: item.workflowTemplateId\n        }))\n      })\n\n      // Add workflow names to all checklist items\n      const availableDependencies = allChecklistItems\n        .filter((item) => item?.workflowTemplateId)\n        .map((item) => ({\n          _id: item._id,\n          name: item.name || 'Unnamed Item',\n          workflowName:\n            workflowMap[item.workflowTemplateId] || 'Unknown Workflow'\n        }))\n\n      request.logger.info('Template data:', {\n        checklistItemId: checklistItem._id,\n        dependencies: checklistItem.dependencies_requires,\n        availableDependenciesCount: availableDependencies.length,\n        value: {\n          name: checklistItem.name,\n          description: checklistItem.description,\n          type: checklistItem.type,\n          dependenciesRequires: (checklistItem.dependencies_requires || []).map(\n            (dep) => dep._id || dep\n          )\n        }\n      })\n\n      return h.view('checklist-item-templates/views/detail', {\n        pageTitle: 'Edit Checklist Item Template',\n        checklistItem,\n        workflow,\n        workflowTemplateId,\n        governanceTemplateId: workflow.governanceTemplateId,\n        availableDependencies,\n        value: {\n          name: checklistItem.name,\n          description: checklistItem.description,\n          type: checklistItem.type,\n          dependenciesRequires: (checklistItem.dependencies_requires || []).map(\n            (dep) => dep._id || dep\n          )\n        }\n      })\n    } catch (error) {\n      request.logger.error('Error fetching checklist item template:', error)\n      return h.view('checklist-item-templates/views/detail', {\n        pageTitle: 'Edit Checklist Item Template',\n        error:\n          'Unable to load checklist item template details. Please try again.',\n        checklistItem: { _id: id },\n        availableDependencies: [],\n        value: {\n          name: '',\n          description: '',\n          type: '',\n          dependenciesRequires: []\n        }\n      })\n    }\n  },\n\n  async update(request, h) {\n    const { id } = request.params\n    const {\n      name,\n      description,\n      type,\n      dependenciesRequires = [],\n      order\n    } = request.payload\n    let workflowTemplateId\n\n    try {\n      request.logger.info(`Updating checklist item template ${id}`)\n\n      // First get the checklist item to get the workflow ID\n      const checklistItemResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/checklist-item-templates/${id}`\n      )\n\n      if (!checklistItemResponse.ok) {\n        throw new Error('Failed to fetch checklist item template')\n      }\n\n      const checklistItem = await checklistItemResponse.json()\n      workflowTemplateId = checklistItem.workflowTemplateId\n\n      // If only order is provided, delegate to updateOrder method\n      if (\n        order !== undefined &&\n        !name &&\n        !description &&\n        !type &&\n        (!dependenciesRequires || dependenciesRequires.length === 0)\n      ) {\n        return this.updateOrder(request, h)\n      }\n\n      // Ensure dependencies_requires is always an array and properly formatted\n      const dependencies = (\n        Array.isArray(dependenciesRequires)\n          ? dependenciesRequires\n          : [dependenciesRequires]\n      )\n        .filter(Boolean)\n        .map((dep) => (typeof dep === 'object' ? dep._id : dep))\n\n      // Make the update API call\n      const updateResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/checklist-item-templates/${id}`,\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name,\n            description,\n            type,\n            dependencies_requires: dependencies\n          })\n        }\n      )\n\n      if (!updateResponse.ok) {\n        throw new Error('Failed to update checklist item template')\n      }\n\n      // Redirect back to the workflow template page\n      return h.redirect(`/workflow-templates/${workflowTemplateId}`)\n    } catch (error) {\n      request.logger.error('Error updating checklist item template:', error)\n\n      // Fetch workflow and dependencies again for error case\n      try {\n        // Get the workflow to get the governance template ID\n        const workflowResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/workflow-templates/${workflowTemplateId}`\n        )\n        const workflow = await workflowResponse.json()\n\n        // Fetch all checklist items for dependencies\n        const checklistItemsApiUrl = `${config.get('apiServer')}/api/v1/checklist-item-templates?governanceTemplateId=${workflow.governanceTemplateId}`\n        const checklistItemsResponse = await fetch(checklistItemsApiUrl)\n        const allChecklistItems = await checklistItemsResponse.json()\n\n        // Add workflow names to all checklist items\n        const availableDependencies = allChecklistItems\n          .filter((item) => item?.workflowTemplateId)\n          .map((item) => ({\n            _id: item._id,\n            name: item.name || 'Unnamed Item',\n            workflowName: workflow.name\n          }))\n\n        return h.view('checklist-item-templates/views/detail', {\n          pageTitle: 'Edit Checklist Item Template',\n          error: 'Unable to update checklist item template. Please try again.',\n          workflow,\n          workflowTemplateId,\n          checklistItem: { _id: id },\n          availableDependencies,\n          value: {\n            name: request.payload.name || '',\n            description: request.payload.description || '',\n            type: request.payload.type || '',\n            dependenciesRequires: Array.isArray(\n              request.payload.dependenciesRequires\n            )\n              ? request.payload.dependenciesRequires\n              : request.payload.dependenciesRequires\n                ? [request.payload.dependenciesRequires]\n                : []\n          }\n        })\n      } catch (fetchError) {\n        request.logger.error('Error fetching dependencies:', fetchError)\n        return h.view('checklist-item-templates/views/detail', {\n          pageTitle: 'Edit Checklist Item Template',\n          error: 'Unable to update checklist item template. Please try again.',\n          value: {\n            name: request.payload.name || '',\n            description: request.payload.description || '',\n            type: request.payload.type || '',\n            dependenciesRequires: Array.isArray(\n              request.payload.dependenciesRequires\n            )\n              ? request.payload.dependenciesRequires\n              : request.payload.dependenciesRequires\n                ? [request.payload.dependenciesRequires]\n                : []\n          },\n          checklistItem: { _id: id },\n          availableDependencies: []\n        })\n      }\n    }\n  },\n\n  async new(request, h) {\n    const { workflowTemplateId, governanceTemplateId } = request.params\n    request.logger.info('Starting new checklist item handler with params:', {\n      workflowTemplateId,\n      governanceTemplateId\n    })\n\n    try {\n      // Fetch current workflow template details\n      request.logger.info('Fetching current workflow template:', {\n        workflowTemplateId,\n        apiUrl: `${config.get('apiServer')}/api/v1/workflow-templates/${workflowTemplateId}`\n      })\n      const workflowResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/workflow-templates/${workflowTemplateId}`\n      )\n\n      if (!workflowResponse.ok) {\n        throw new Error('Failed to fetch workflow template')\n      }\n\n      const workflow = await workflowResponse.json()\n      request.logger.info('Received current workflow template:', {\n        workflowId: workflow._id,\n        workflowName: workflow.name,\n        workflow: JSON.stringify(workflow)\n      })\n\n      // Fetch all workflows in the governance template\n      const workflowsApiUrl = `${config.get('apiServer')}/api/v1/workflow-templates?governanceTemplateId=${governanceTemplateId}`\n      request.logger.info('Fetching all workflows for governance template:', {\n        governanceTemplateId,\n        apiUrl: workflowsApiUrl\n      })\n      const allWorkflowsResponse = await fetch(workflowsApiUrl)\n\n      if (!allWorkflowsResponse.ok) {\n        throw new Error('Failed to fetch workflows')\n      }\n\n      const allWorkflows = await allWorkflowsResponse.json()\n      request.logger.info('Received all workflows:', {\n        count: allWorkflows.length,\n        workflows: JSON.stringify(\n          allWorkflows.map((w) => ({ id: w._id, name: w.name }))\n        )\n      })\n\n      // Create a map of workflow IDs to names for quick lookup\n      const workflowMap = {}\n      allWorkflows.forEach((w) => {\n        if (w?._id && w.name) {\n          workflowMap[w._id] = w.name\n        }\n      })\n\n      request.logger.info('Created workflow map:', {\n        workflowMap: JSON.stringify(workflowMap)\n      })\n\n      // Fetch all checklist items from the governance template for dependencies\n      const checklistItemsApiUrl = `${config.get('apiServer')}/api/v1/checklist-item-templates?governanceTemplateId=${governanceTemplateId}`\n      request.logger.info(\n        'Fetching all checklist items for governance template:',\n        {\n          governanceTemplateId,\n          apiUrl: checklistItemsApiUrl\n        }\n      )\n      const checklistItemsResponse = await fetch(checklistItemsApiUrl)\n\n      if (!checklistItemsResponse.ok) {\n        throw new Error('Failed to fetch checklist items')\n      }\n\n      const allChecklistItems = await checklistItemsResponse.json()\n      request.logger.info('Received all checklist items:', {\n        count: allChecklistItems.length,\n        items: JSON.stringify(\n          allChecklistItems.map((item) => ({\n            id: item._id,\n            name: item.name,\n            workflowId: item.workflowTemplateId\n          }))\n        )\n      })\n\n      // Add workflow names to all checklist items\n      const availableDependencies = allChecklistItems\n        .filter((item) => item?.workflowTemplateId)\n        .map((item) => ({\n          _id: item._id,\n          name: item.name || 'Unnamed Item',\n          workflowName:\n            workflowMap[item.workflowTemplateId] || 'Unknown Workflow'\n        }))\n\n      request.logger.info('Available dependencies:', {\n        count: availableDependencies.length,\n        currentWorkflowId: workflowTemplateId,\n        dependencies: JSON.stringify(availableDependencies)\n      })\n\n      const templateData = {\n        pageTitle: 'Create New Checklist Item',\n        workflow,\n        workflowTemplateId,\n        governanceTemplateId,\n        availableDependencies,\n        value: {\n          name: '',\n          description: '',\n          type: '',\n          dependenciesRequires: []\n        }\n      }\n\n      request.logger.info('Rendering new checklist item template with data:', {\n        pageTitle: templateData.pageTitle,\n        workflowId: workflow._id,\n        workflowName: workflow.name,\n        value: templateData.value,\n        availableDependenciesCount: availableDependencies.length,\n        templateData: JSON.stringify(templateData)\n      })\n\n      return h.view('checklist-item-templates/views/new', templateData)\n    } catch (error) {\n      request.logger.error('Error loading new checklist item form:', error)\n\n      const errorTemplateData = {\n        pageTitle: 'Create New Checklist Item',\n        error: 'Unable to load workflow template. Please try again.',\n        value: {\n          name: '',\n          description: '',\n          type: '',\n          dependenciesRequires: []\n        },\n        workflow: null,\n        workflowTemplateId,\n        governanceTemplateId,\n        availableDependencies: []\n      }\n\n      request.logger.info('Rendering error template with data:', {\n        pageTitle: errorTemplateData.pageTitle,\n        error: errorTemplateData.error,\n        value: errorTemplateData.value,\n        templateData: JSON.stringify(errorTemplateData)\n      })\n\n      return h.view('checklist-item-templates/views/new', errorTemplateData)\n    }\n  },\n\n  async create(request, h) {\n    const { workflowTemplateId, governanceTemplateId } = request.params\n    const {\n      name,\n      description,\n      type,\n      dependenciesRequires = []\n    } = request.payload\n\n    try {\n      request.logger.info(\n        `Creating checklist item template for workflow ${workflowTemplateId}`\n      )\n\n      const apiUrl = `${config.get('apiServer')}/api/v1/checklist-item-templates`\n      const requestBody = {\n        workflowTemplateId,\n        name,\n        description,\n        type,\n        dependencies_requires: (Array.isArray(dependenciesRequires)\n          ? dependenciesRequires\n          : [dependenciesRequires]\n        )\n          .filter(Boolean)\n          .map((dep) => (typeof dep === 'object' ? dep._id : dep))\n      }\n\n      request.logger.info(\n        `Making POST request to ${apiUrl} with body:`,\n        JSON.stringify(requestBody)\n      )\n\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      })\n\n      if (!response.ok) {\n        const errorText = await response.text()\n        request.logger.error(\n          `API call failed with status: ${response.status}, body: ${errorText}`\n        )\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      const createdItem = await response.json()\n      request.logger.info(\n        `Successfully created checklist item template with ID: ${createdItem._id}`\n      )\n\n      return h.redirect(`/workflow-templates/${workflowTemplateId}`)\n    } catch (error) {\n      request.logger.error('Error creating checklist item template:', error)\n\n      // Fetch workflow template details again for the error case\n      try {\n        const workflowResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/workflow-templates/${workflowTemplateId}`\n        )\n        const workflow = await workflowResponse.json()\n\n        // Fetch existing checklist items for dependencies\n        const checklistItemsResponse = await fetch(\n          `${config.get('apiServer')}/api/v1/checklist-item-templates?workflowTemplateId=${workflowTemplateId}`\n        )\n        const checklistItems = await checklistItemsResponse.json()\n\n        // Add workflow names to checklist items\n        const availableDependencies = checklistItems\n          .filter((item) => item?.workflowTemplateId)\n          .map((item) => ({\n            _id: item._id,\n            name: item.name || 'Unnamed Item',\n            workflowName: workflow.name\n          }))\n\n        return h.view('checklist-item-templates/views/new', {\n          pageTitle: 'Create New Checklist Item',\n          error: 'Unable to create checklist item. Please try again.',\n          value: {\n            name: request.payload.name || '',\n            description: request.payload.description || '',\n            type: request.payload.type || '',\n            dependenciesRequires: Array.isArray(\n              request.payload.dependenciesRequires\n            )\n              ? request.payload.dependenciesRequires\n              : [request.payload.dependenciesRequires].filter(Boolean)\n          },\n          workflow,\n          workflowTemplateId,\n          governanceTemplateId,\n          availableDependencies\n        })\n      } catch (fetchError) {\n        // If we can't fetch the workflow details, throw to central error handler\n        request.logger.error('Error fetching workflow details:', fetchError)\n        throw Boom.badImplementation('Unable to load form data')\n      }\n    }\n  },\n\n  async deleteConfirmation(request, h) {\n    try {\n      const { id } = request.params\n\n      // Fetch checklist item template details\n      const checklistItemResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/checklist-item-templates/${id}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      )\n\n      if (!checklistItemResponse.ok) {\n        throw new Error(\n          `API call failed with status: ${checklistItemResponse.status}`\n        )\n      }\n\n      const checklistItem = await checklistItemResponse.json()\n\n      return h.view('checklist-item-templates/views/delete-confirmation', {\n        pageTitle: 'Delete Checklist Item Template',\n        checklistItem\n      })\n    } catch (error) {\n      request.logger.error(\n        'Error fetching checklist item template for deletion:',\n        error\n      )\n      return h.view('checklist-item-templates/views/delete-confirmation', {\n        pageTitle: 'Delete Checklist Item Template',\n        error:\n          'Unable to load checklist item template details. Please try again.',\n        checklistItem: { _id: request.params.id }\n      })\n    }\n  },\n\n  async delete(request, h) {\n    const { id } = request.params\n\n    try {\n      request.logger.info(`Deleting checklist item template ${id}`)\n\n      // First get the checklist item to get the workflow ID\n      const checklistItemResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/checklist-item-templates/${id}`\n      )\n\n      if (!checklistItemResponse.ok) {\n        throw new Error('Failed to fetch checklist item template')\n      }\n\n      const checklistItem = await checklistItemResponse.json()\n      const workflowTemplateId = checklistItem.workflowTemplateId\n\n      // Make the delete API call\n      const deleteResponse = await fetch(\n        `${config.get('apiServer')}/api/v1/checklist-item-templates/${id}`,\n        {\n          method: 'DELETE'\n        }\n      )\n\n      if (!deleteResponse.ok) {\n        throw new Error('Failed to delete checklist item template')\n      }\n\n      // Redirect back to the workflow template page\n      return h.redirect(`/workflow-templates/${workflowTemplateId}`)\n    } catch (error) {\n      request.logger.error('Error deleting checklist item template:', error)\n      return Boom.badImplementation('Error deleting checklist item template')\n    }\n  },\n\n  async updateOrder(request, h) {\n    try {\n      const { id } = request.params\n      const { order } = request.payload || {}\n\n      request.logger.info(\n        `Updating order for checklist item template ${id} to ${order}`\n      )\n\n      const apiUrl = `${config.get('apiServer')}/api/v1/checklist-item-templates/${id}`\n      const requestBody = {\n        order: parseInt(order, 10)\n      }\n\n      request.logger.info(\n        `Making PUT request to ${apiUrl} with body:`,\n        requestBody\n      )\n\n      const response = await fetch(apiUrl, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      })\n\n      if (!response.ok) {\n        const errorText = await response.text()\n        request.logger.error(\n          `API call failed with status: ${response.status}, body: ${errorText}`\n        )\n        throw new Error(`API call failed with status: ${response.status}`)\n      }\n\n      // Get the checklist item to get the workflow ID for redirection\n      const checklistItemResponse = await fetch(apiUrl)\n      if (!checklistItemResponse.ok) {\n        throw new Error('Failed to fetch checklist item template after update')\n      }\n\n      const checklistItem = await checklistItemResponse.json()\n      const workflowTemplateId = checklistItem.workflowTemplateId\n\n      // Redirect back to the workflow template page\n      return h.redirect(`/workflow-templates/${workflowTemplateId}`)\n    } catch (error) {\n      request.logger.error(\n        'Error updating checklist item template order:',\n        error\n      )\n      return Boom.badImplementation(\n        'Error updating checklist item template order'\n      )\n    }\n  }\n}\n\n\n--- src/server/checklist-item-templates/index.js ---\nimport { checklistItemTemplatesController } from './controller.js'\n\n/**\n * @type {import('@hapi/hapi').ServerRegisterPluginObject<void>}\n */\nexport const checklistItemTemplates = {\n  plugin: {\n    name: 'checklist-item-templates',\n    register(server) {\n      server.route([\n        {\n          method: 'GET',\n          path: '/checklist-item-templates/{id}',\n          handler: checklistItemTemplatesController.detail.bind(\n            checklistItemTemplatesController\n          ),\n          options: {\n            description: 'View checklist item template details',\n            auth: false\n          }\n        },\n        {\n          method: ['POST', 'PUT'],\n          path: '/checklist-item-templates/{id}',\n          handler: checklistItemTemplatesController.update.bind(\n            checklistItemTemplatesController\n          ),\n          options: {\n            description: 'Update checklist item template',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/governance-templates/{governanceTemplateId}/workflows/{workflowTemplateId}/checklist-items/new',\n          handler: checklistItemTemplatesController.new.bind(\n            checklistItemTemplatesController\n          ),\n          options: {\n            description: 'New checklist item template form',\n            auth: false\n          }\n        },\n        {\n          method: 'POST',\n          path: '/governance-templates/{governanceTemplateId}/workflows/{workflowTemplateId}/checklist-items',\n          handler: checklistItemTemplatesController.create.bind(\n            checklistItemTemplatesController\n          ),\n          options: {\n            description: 'Create new checklist item template',\n            auth: false\n          }\n        },\n        {\n          method: 'GET',\n          path: '/checklist-item-templates/{id}/delete',\n          handler: checklistItemTemplatesController.deleteConfirmation.bind(\n            checklistItemTemplatesController\n          ),\n          options: {\n            description: 'Checklist item template delete confirmation',\n            auth: false\n          }\n        },\n        {\n          method: 'POST',\n          path: '/checklist-item-templates/{id}/delete',\n          handler: checklistItemTemplatesController.delete.bind(\n            checklistItemTemplatesController\n          ),\n          options: {\n            description: 'Delete checklist item template',\n            auth: false\n          }\n        },\n        {\n          method: ['POST', 'PUT'],\n          path: '/api/v1/checklist-item-templates/{id}',\n          handler: checklistItemTemplatesController.updateOrder.bind(\n            checklistItemTemplatesController\n          ),\n          options: {\n            description: 'Update checklist item template order',\n            auth: false\n          }\n        }\n      ])\n    }\n  }\n}\n\n\n--- src/server/checklist-item-templates/views/delete-confirmation.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n{% from \"govuk/components/warning-text/macro.njk\" import govukWarningText %}\n\n{% block pageTitle %}Delete Checklist Item Template - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-two-thirds\">\n        <a href=\"/checklist-item-templates/{{ checklistItem._id }}\" class=\"govuk-back-link\">Back to checklist item</a>\n\n        {% if error %}\n          <div class=\"govuk-error-summary\" role=\"alert\" tabindex=\"-1\">\n            <h2 class=\"govuk-error-summary__title\">Error</h2>\n            <div class=\"govuk-error-summary__body\">\n              <p>{{ error }}</p>\n            </div>\n          </div>\n        {% endif %}\n\n        <h1 class=\"govuk-heading-xl\">Delete Checklist Item Template</h1>\n        \n        {{ govukWarningText({\n          text: \"This action cannot be undone.\",\n          iconFallbackText: \"Warning\"\n        }) }}\n\n        <p class=\"govuk-body\">Are you sure you want to delete the checklist item template: <strong>{{ checklistItem.name }}</strong>?</p>\n\n        <form method=\"POST\" action=\"/checklist-item-templates/{{ checklistItem._id }}/delete\" novalidate>\n          <div class=\"govuk-button-group\">\n            {{ govukButton({\n              text: \"Yes, delete checklist item\",\n              classes: \"govuk-button--warning\",\n              attributes: {\n                \"data-testid\": \"confirm-delete-button\"\n              }\n            }) }}\n\n            <a href=\"/checklist-item-templates/{{ checklistItem._id }}\" class=\"govuk-link\">\n              Cancel\n            </a>\n          </div>\n        </form>\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/checklist-item-templates/views/detail.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/input/macro.njk\" import govukInput %}\n{% from \"govuk/components/textarea/macro.njk\" import govukTextarea %}\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n{% from \"govuk/components/error-summary/macro.njk\" import govukErrorSummary %}\n{% from \"govuk/components/radios/macro.njk\" import govukRadios %}\n{% from \"govuk/components/checkboxes/macro.njk\" import govukCheckboxes %}\n\n{% block pageTitle %}{{ pageTitle }} - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-two-thirds\">\n        <a href=\"/workflow-templates/{{ workflowTemplateId }}\" class=\"govuk-back-link\">Back to workflow</a>\n\n        {% if error %}\n          {{ govukErrorSummary({\n            titleText: \"There is a problem\",\n            errorList: [\n              {\n                text: error,\n                href: \"#name\"\n              }\n            ]\n          }) }}\n        {% endif %}\n\n        <h1 class=\"govuk-heading-xl\">Edit Checklist Item</h1>\n        \n        {% if workflow %}\n          <p class=\"govuk-body\">Editing checklist item in workflow: {{ workflow.name }}</p>\n        {% endif %}\n\n        <div class=\"govuk-button-group\">\n          {{ govukButton({\n            text: \"Delete Checklist Item\",\n            classes: \"govuk-button--warning\",\n            href: \"/checklist-item-templates/\" + checklistItem._id + \"/delete\",\n            attributes: {\n              \"data-testid\": \"delete-checklist-item-button-\" + checklistItem._id\n            }\n          }) }}\n        </div>\n\n        <form method=\"POST\" action=\"/checklist-item-templates/{{ checklistItem._id }}\" novalidate>\n          {{ govukInput({\n            label: {\n              text: \"Item Name\",\n              classes: \"govuk-label--m\"\n            },\n            id: \"name\",\n            name: \"name\",\n            value: value.name,\n            errorMessage: { text: \"Enter an item name\" } if error else undefined,\n            attributes: {\n              \"data-testid\": \"item-name\"\n            }\n          }) }}\n\n          {{ govukTextarea({\n            label: {\n              text: \"Description\",\n              classes: \"govuk-label--m\"\n            },\n            id: \"description\",\n            name: \"description\",\n            value: value.description,\n            attributes: {\n              \"data-testid\": \"item-description\"\n            }\n          }) }}\n\n          {{ govukRadios({\n            idPrefix: \"type\",\n            name: \"type\",\n            value: value.type,\n            fieldset: {\n              legend: {\n                text: \"Item Type\",\n                classes: \"govuk-fieldset__legend--m\"\n              }\n            },\n            items: [\n              {\n                value: \"approval\",\n                text: \"Approval\"\n              },\n              {\n                value: \"document\",\n                text: \"Document\"\n              },\n              {\n                value: \"task\",\n                text: \"Task\"\n              }\n            ]\n          }) }}\n\n          {% if availableDependencies and availableDependencies.length > 0 %}\n            {% set dependencyItems = [] %}\n            {% for item in availableDependencies %}\n              {% if item._id != checklistItem._id %}\n                {% set dependencyItems = dependencyItems.concat([{\n                  value: item._id,\n                  text: item.name + \" (from workflow: \" + item.workflowName + \")\",\n                  checked: value.dependenciesRequires and (item._id | string in value.dependenciesRequires)\n                }]) %}\n              {% endif %}\n            {% endfor %}\n\n            {% if dependencyItems.length > 0 %}\n              <div class=\"govuk-form-group govuk-!-margin-bottom-6\">\n                {{ govukCheckboxes({\n                  name: \"dependenciesRequires\",\n                  idPrefix: \"dependenciesRequires\",\n                  fieldset: {\n                    legend: {\n                      text: \"Dependencies\",\n                      classes: \"govuk-fieldset__legend--m\"\n                    }\n                  },\n                  hint: {\n                    text: \"Select the checklist items that must be completed before this item can be started\"\n                  },\n                  items: dependencyItems\n                }) }}\n              </div>\n            {% endif %}\n          {% endif %}\n\n          {{ govukButton({\n            text: \"Save changes\",\n            attributes: {\n              \"data-testid\": \"submit-button\"\n            }\n          }) }}\n        </form>\n\n        {# Debug output #}\n        {% if workflow %}\n          <!-- Debug: Workflow ID: {{ workflow._id }} -->\n          <!-- Debug: Workflow Name: {{ workflow.name }} -->\n          <!-- Debug: Available Dependencies Count: {{ availableDependencies | length }} -->\n          <!-- Debug: Dependencies: {{ availableDependencies | dump }} -->\n          <!-- Debug: Value: {{ value | dump }} -->\n        {% else %}\n          <!-- Debug: No workflow data available -->\n        {% endif %}\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} \n\n--- src/server/checklist-item-templates/views/new.njk ---\n{% extends \"layouts/page.njk\" %}\n\n{% from \"govuk/components/input/macro.njk\" import govukInput %}\n{% from \"govuk/components/textarea/macro.njk\" import govukTextarea %}\n{% from \"govuk/components/button/macro.njk\" import govukButton %}\n{% from \"govuk/components/error-summary/macro.njk\" import govukErrorSummary %}\n{% from \"govuk/components/radios/macro.njk\" import govukRadios %}\n{% from \"govuk/components/checkboxes/macro.njk\" import govukCheckboxes %}\n\n{% block pageTitle %}{{ pageTitle }} - Defra SDLC Governance Checklist{% endblock %}\n\n{% block content %}\n{% set value = value or { name: \"\", description: \"\", type: \"\", dependenciesRequires: [] } %}\n<div class=\"govuk-width-container\">\n  <main class=\"govuk-main-wrapper\" id=\"main-content\" role=\"main\">\n    <div class=\"govuk-grid-row\">\n      <div class=\"govuk-grid-column-two-thirds\">\n        <a href=\"/workflow-templates/{{ workflowTemplateId }}\" class=\"govuk-back-link\">Back to workflow</a>\n\n        {% if error %}\n          {{ govukErrorSummary({\n            titleText: \"There is a problem\",\n            errorList: [\n              {\n                text: error,\n                href: \"#name\"\n              }\n            ]\n          }) }}\n        {% endif %}\n\n        <h1 class=\"govuk-heading-xl\">Create New Checklist Item</h1>\n        \n        {% if workflow %}\n          <p class=\"govuk-body\">Creating checklist item in workflow: {{ workflow.name }}</p>\n        {% endif %}\n\n        <form method=\"POST\" action=\"/governance-templates/{{ governanceTemplateId }}/workflows/{{ workflowTemplateId }}/checklist-items\" novalidate>\n          {{ govukInput({\n            label: {\n              text: \"Item Name\",\n              classes: \"govuk-label--m\"\n            },\n            id: \"name\",\n            name: \"name\",\n            value: value.name,\n            errorMessage: { text: \"Enter an item name\" } if error else undefined,\n            attributes: {\n              \"data-testid\": \"item-name\"\n            }\n          }) }}\n\n          {{ govukTextarea({\n            label: {\n              text: \"Description\",\n              classes: \"govuk-label--m\"\n            },\n            id: \"description\",\n            name: \"description\",\n            value: value.description,\n            attributes: {\n              \"data-testid\": \"item-description\"\n            }\n          }) }}\n\n          {{ govukRadios({\n            idPrefix: \"type\",\n            name: \"type\",\n            value: value.type,\n            fieldset: {\n              legend: {\n                text: \"Item Type\",\n                classes: \"govuk-fieldset__legend--m\"\n              }\n            },\n            items: [\n              {\n                value: \"approval\",\n                text: \"Approval\"\n              },\n              {\n                value: \"document\",\n                text: \"Document\"\n              },\n              {\n                value: \"task\",\n                text: \"Task\"\n              }\n            ]\n          }) }}\n\n          {% if availableDependencies and availableDependencies.length > 0 %}\n            {% set dependencyItems = [] %}\n            {% for item in availableDependencies %}\n              {% set dependencyItems = dependencyItems.concat([{\n                value: item._id,\n                text: item.name + \" (from workflow: \" + item.workflowName + \")\",\n                checked: value.dependenciesRequires and (item._id | string in value.dependenciesRequires)\n              }]) %}\n            {% endfor %}\n\n            <div class=\"govuk-form-group govuk-!-margin-bottom-6\">\n              {{ govukCheckboxes({\n                name: \"dependenciesRequires\",\n                idPrefix: \"dependenciesRequires\",\n                fieldset: {\n                  legend: {\n                    text: \"Dependencies\",\n                    classes: \"govuk-fieldset__legend--m\"\n                  }\n                },\n                hint: {\n                  text: \"Select the checklist items that must be completed before this item can be started\"\n                },\n                items: dependencyItems\n              }) }}\n            </div>\n          {% endif %}\n\n          {{ govukButton({\n            text: \"Create checklist item\",\n            attributes: {\n              \"data-testid\": \"submit-button\"\n            }\n          }) }}\n        </form>\n\n        {# Debug output #}\n        {% if workflow %}\n          <!-- Debug: Workflow ID: {{ workflow._id }} -->\n          <!-- Debug: Workflow Name: {{ workflow.name }} -->\n          <!-- Debug: Available Dependencies Count: {{ availableDependencies | length }} -->\n          <!-- Debug: Dependencies: {{ availableDependencies | dump }} -->\n          <!-- Debug: Value: {{ value | dump }} -->\n        {% else %}\n          <!-- Debug: No workflow data available -->\n        {% endif %}\n      </div>\n    </div>\n  </main>\n</div>\n{% endblock %} "
    },
    {
      "chunk_id": "layout_and_navigation",
      "description": "Layout and navigation components",
      "files": [
        "src/server/common/templates/layouts/page.njk",
        "src/server/common/templates/partials/navigation/navigation.njk",
        "src/server/common/templates/partials/navigation/_navigation.scss",
        "src/server/error/index.njk"
      ],
      "content": "\n\n--- src/server/common/templates/layouts/page.njk ---\n{% extends \"govuk/template.njk\" %}\n\n{# Import GOVUK components globally #}\n{% from \"govuk/components/breadcrumbs/macro.njk\" import govukBreadcrumbs %}\n\n{# Import custom components globally #}\n{% from \"heading/macro.njk\" import appHeading %}\n\n{% set mainClasses = \"app-main-wrapper\" %}\n\n{% block head %}\n  <link href=\"{{ getAssetPath('stylesheets/application.scss') }}\" rel=\"stylesheet\">\n{% endblock %}\n\n{% block header %}\n  {{ govukHeader({\n    homepageUrl: \"https://www.gov.uk/\",\n    classes: \"app-header\",\n    containerClasses: \"govuk-width-container\",\n    serviceName: serviceName,\n    serviceUrl: serviceUrl,\n    useTudorCrown: true\n  }) }}\n  {% include \"partials/navigation/navigation.njk\" %}\n{% endblock %}\n\n{% block pageTitle %}\n  {{ pageTitle }} | {{ serviceName }}\n{% endblock %}\n\n{% block beforeContent %}\n  {% if breadcrumbs.length > 1 %}\n    {{ govukBreadcrumbs({\n      items: breadcrumbs\n    }) }}\n  {% endif %}\n{% endblock %}\n\n{% block content %}{% endblock %}\n\n{% block footer %}\n  {{ govukFooter({\n    meta: {\n      items: [\n        {\n          href: \"https://www.gov.uk/help/privacy-notice\",\n          text: \"Privacy\"\n        },\n        {\n          href: \"https://www.gov.uk/help/cookies\",\n          text: \"Cookies\"\n        },\n        {\n          href: \"https://www.gov.uk/help/accessibility-statement\",\n          text: \"Accessibility statement\"\n        }\n      ]\n    }\n  }) }}\n{% endblock %}\n\n{% block bodyEnd %}\n  <script type=\"module\" src=\"{{ getAssetPath('application.js') }}\"></script>\n{% endblock %}\n\n\n--- src/server/common/templates/partials/navigation/navigation.njk ---\n<nav class=\"app-navigation\" role=\"navigation\">\n  <div class=\"govuk-width-container\">\n    <ul class=\"app-navigation__list\">\n      {% for item in navigation %}\n        <li class=\"app-navigation__list-item\">\n          <a class=\"app-navigation__link{% if item.isActive %} app-navigation__link--active{% endif %}\"\n             href=\"{{ item.url }}\">\n            {{ item.text }}\n          </a>\n        </li>\n      {% endfor %}\n    </ul>\n  </div>\n</nav>\n\n\n--- src/server/common/templates/partials/navigation/_navigation.scss ---\n@use \"govuk-frontend\" as *;\n@use \"variables/colours\" as *;\n\n$navigation-height: 60px;\n$border-bottom-width: 4px;\n\n.app-navigation {\n  border-bottom: 1px solid govuk-colour(\"mid-grey\");\n  background-color: $app-light-grey;\n}\n\n.app-navigation__list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  @include govuk-media-query($from: tablet) {\n    display: flex;\n    height: $navigation-height;\n    height: govuk-px-to-rem($navigation-height);\n  }\n}\n\n.app-navigation__list-item {\n  margin: 0 govuk-spacing(2) 0 0;\n\n  > a:focus {\n    box-shadow: none;\n    border-bottom: $border-bottom-width solid govuk-colour(\"black\");\n  }\n}\n\n.app-navigation__link {\n  border: 0;\n  margin: govuk-spacing(2) 0 govuk-spacing(1);\n  padding-bottom: govuk-spacing(1);\n  display: inline-block;\n  text-decoration: none;\n  border-bottom: 4px solid transparent;\n\n  @include govuk-link-style-no-visited-state;\n  @include govuk-font(24, \"bold\");\n\n  @include govuk-media-query($from: tablet) {\n    padding-bottom: 0;\n    margin: 0;\n    display: flex;\n    height: $navigation-height - $border-bottom-width;\n    height: govuk-px-to-rem($navigation-height - $border-bottom-width);\n    align-items: center;\n  }\n\n  &:hover {\n    color: govuk-colour(\"black\");\n    border-bottom: $border-bottom-width solid govuk-colour(\"black\");\n  }\n}\n\n.app-navigation__link--active {\n  border-bottom: $border-bottom-width solid govuk-colour(\"blue\");\n\n  &:hover {\n    color: govuk-colour(\"dark-blue\");\n    border-bottom: $border-bottom-width solid govuk-colour(\"dark-blue\");\n  }\n}\n\n\n--- src/server/error/index.njk ---\n{% extends 'layouts/page.njk' %}\n\n{% block content %}\n  {{ appHeading({\n    text: heading\n  }) }}\n\n  <div class=\"govuk-grid-row\">\n    <div class=\"govuk-grid-column-two-thirds\">\n      <p>{{ message }}</p>\n    </div>\n  </div>\n{% endblock %}\n"
    },
    {
      "chunk_id": "documentation_and_configuration",
      "description": "Project documentation and configuration files",
      "files": [
        "README.md",
        "LICENCE",
        "sonar-project.properties",
        "compose/aws.env",
        "compose/start-localstack.sh",
        "scripts/git_cleanup.sh",
        "scripts/start_dev_server.sh",
        "src/client/common/README.md",
        "src/server/common/README.md"
      ],
      "content": "\n\n--- README.md ---\n# ai-sdlc-governance-frontend\n\n[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=DEFRA_ai-sdlc-governance-frontend&metric=security_rating)](https://sonarcloud.io/summary/new_code?id=DEFRA_ai-sdlc-governance-frontend)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=DEFRA_ai-sdlc-governance-frontend&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=DEFRA_ai-sdlc-governance-frontend)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=DEFRA_ai-sdlc-governance-frontend&metric=coverage)](https://sonarcloud.io/summary/new_code?id=DEFRA_ai-sdlc-governance-frontend)\n\nCore delivery platform Node.js Frontend Template.\n\n- [Requirements](#requirements)\n  - [Node.js](#nodejs)\n- [Server-side Caching](#server-side-caching)\n- [Redis](#redis)\n- [Local Development](#local-development)\n  - [Setup](#setup)\n  - [Development](#development)\n  - [Production](#production)\n  - [Npm scripts](#npm-scripts)\n  - [Update dependencies](#update-dependencies)\n  - [Formatting](#formatting)\n    - [Windows prettier issue](#windows-prettier-issue)\n- [Docker](#docker)\n  - [Development image](#development-image)\n  - [Production image](#production-image)\n  - [Docker Compose](#docker-compose)\n  - [Dependabot](#dependabot)\n  - [SonarCloud](#sonarcloud)\n- [Licence](#licence)\n  - [About the licence](#about-the-licence)\n\n## Requirements\n\n### Node.js\n\nPlease install [Node.js](http://nodejs.org/) `>= v18` and [npm](https://nodejs.org/) `>= v9`. You will find it\neasier to use the Node Version Manager [nvm](https://github.com/creationix/nvm)\n\nTo use the correct version of Node.js for this application, via nvm:\n\n```bash\ncd ai-sdlc-governance-frontend\nnvm use\n```\n\n## Governance Template Admin\n\nThe Governance Template admin interface can be accessed by navigating to the `/governance-templates` page. This interface allows administrators to manage and configure governance templates for the system.\n\n## Server-side Caching\n\nWe use Catbox for server-side caching. By default the service will use CatboxRedis when deployed and CatboxMemory for\nlocal development.\nYou can override the default behaviour by setting the `SESSION_CACHE_ENGINE` environment variable to either `redis` or\n`memory`.\n\nPlease note: CatboxMemory (`memory`) is _not_ suitable for production use! The cache will not be shared between each\ninstance of the service and it will not persist between restarts.\n\n## Redis\n\nRedis is an in-memory key-value store. Every instance of a service has access to the same Redis key-value store similar\nto how services might have a database (or MongoDB). All frontend services are given access to a namespaced prefixed that\nmatches the service name. e.g. `my-service` will have access to everything in Redis that is prefixed with `my-service`.\n\nIf your service does not require a session cache to be shared between instances or if you don't require Redis, you can\ndisable setting `SESSION_CACHE_ENGINE=false` or changing the default value in `~/src/config/index.js`.\n\n## Proxy\n\nWe are using forward-proxy which is set up by default. To make use of this: `import { fetch } from 'undici'` then because of the `setGlobalDispatcher(new ProxyAgent(proxyUrl))` calls will use the ProxyAgent Dispatcher\n\nIf you are not using Wreck, Axios or Undici or a similar http that uses `Request`. Then you may have to provide the proxy dispatcher:\n\nTo add the dispatcher to your own client:\n\n```javascript\nimport { ProxyAgent } from 'undici'\n\nreturn await fetch(url, {\n  dispatcher: new ProxyAgent({\n    uri: proxyUrl,\n    keepAliveTimeout: 10,\n    keepAliveMaxTimeout: 10\n  })\n})\n```\n\n## Local Development\n\n### Setup\n\nInstall application dependencies:\n\n```bash\nnpm install\n```\n\n### Development\n\nTo run the application in `development` mode run:\n\n```bash\nnpm run dev\n```\n\n### Production\n\nTo mimic the application running in `production` mode locally run:\n\n```bash\nnpm start\n```\n\n### Npm scripts\n\nAll available Npm scripts can be seen in [package.json](./package.json)\nTo view them in your command line run:\n\n```bash\nnpm run\n```\n\n### Update dependencies\n\nTo update dependencies use [npm-check-updates](https://github.com/raineorshine/npm-check-updates):\n\n> The following script is a good start. Check out all the options on\n> the [npm-check-updates](https://github.com/raineorshine/npm-check-updates)\n\n```bash\nncu --interactive --format group\n```\n\n### Formatting\n\n#### Windows prettier issue\n\nIf you are having issues with formatting of line breaks on Windows update your global git config by running:\n\n```bash\ngit config --global core.autocrlf false\n```\n\n## Docker\n\n### Development image\n\nBuild:\n\n```bash\ndocker build --target development --no-cache --tag ai-sdlc-governance-frontend:development .\n```\n\nRun:\n\n```bash\ndocker run -p 3000:3000 ai-sdlc-governance-frontend:development\n```\n\n### Production image\n\nBuild:\n\n```bash\ndocker build --no-cache --tag ai-sdlc-governance-frontend .\n```\n\nRun:\n\n```bash\ndocker run -p 3000:3000 ai-sdlc-governance-frontend\n```\n\n### Docker Compose\n\nA local environment with:\n\n- Localstack for AWS services (S3, SQS)\n- Redis\n- MongoDB\n- This service.\n- A commented out backend example.\n\n```bash\ndocker compose up --build -d\n```\n\n### Dependabot\n\nWe have added an example dependabot configuration file to the repository. You can enable it by renaming\nthe [.github/example.dependabot.yml](.github/example.dependabot.yml) to `.github/dependabot.yml`\n\n### SonarCloud\n\nInstructions for setting up SonarCloud can be found in [sonar-project.properties](./sonar-project.properties).\n\n## Licence\n\nTHIS INFORMATION IS LICENSED UNDER THE CONDITIONS OF THE OPEN GOVERNMENT LICENCE found at:\n\n<http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3>\n\nThe following attribution statement MUST be cited in your products and applications when using this information.\n\n> Contains public sector information licensed under the Open Government license v3\n\n### About the licence\n\nThe Open Government Licence (OGL) was developed by the Controller of Her Majesty's Stationery Office (HMSO) to enable\ninformation providers in the public sector to license the use and re-use of their information under a common open\nlicence.\n\nIt is designed to encourage use and re-use of information freely and flexibly, with only a few conditions.\n\n\n--- LICENCE ---\nThe Open Government Licence (OGL) Version 3\n\nCopyright (c) 2023 Defra\n\nThis source code is licensed under the Open Government Licence v3.0. To view this\nlicence, visit www.nationalarchives.gov.uk/doc/open-government-licence/version/3\nor write to the Information Policy Team, The National Archives, Kew, Richmond,\nSurrey, TW9 4DU.\n\n\n--- sonar-project.properties ---\n# To set up Sonar cloud follow https://github.com/DEFRA/cdp-documentation/blob/main/howto/sonarcloud.md\n# Update properties in this file as per the howto instructions\n# Uncomment properties in this .github/workflows/check-pull-request.yml\n# Uncomment properties in this .github/workflows/publish.yml\n# Uncomment properties in this .github/workflows/publish-hotfix.yml\n\nsonar.projectKey=DEFRA_ai-sdlc-governance-frontend\nsonar.organization=defra\n\nsonar.links.homepage=https://github.com/DEFRA/ai-sdlc-governance-frontend\nsonar.links.ci=https://github.com/DEFRA/ai-sdlc-governance-frontend/actions\nsonar.links.scm=https://github.com/DEFRA/ai-sdlc-governance-frontend\nsonar.links.issue=https://github.com/DEFRA/ai-sdlc-governance-frontend/issues\n\nsonar.sources=src/\nsonar.exclusions=src/**/*.test.js\nsonar.tests=src/\nsonar.test.inclusions=src/**/*.test.js\n\nsonar.javascript.lcov.reportPaths=./coverage/lcov.info\n\nsonar.cpd.exclusions=src/**/*.test.js\n\n\n--- compose/aws.env ---\nAWS_REGION=eu-west-2\nAWS_DEFAULT_REGION=eu-west-2\nAWS_ACCESS_KEY_ID=test\nAWS_SECRET_ACCESS_KEY=test\n\n\n--- compose/start-localstack.sh ---\n#!/bin/bash\nexport AWS_REGION=eu-west-2\nexport AWS_DEFAULT_REGION=eu-west-2\nexport AWS_ACCESS_KEY_ID=test\nexport AWS_SECRET_ACCESS_KEY=test\n\n# S3 buckets\n# aws --endpoint-url=http://localhost:4566 s3 mb s3://my-bucket\n\n# SQS queues\n# aws --endpoint-url=http://localhost:4566 sqs create-queue --queue-name my-queue\n\n\n--- scripts/git_cleanup.sh ---\n#!/bin/bash\n\n# git-sync.sh - Synchronize local Git repository with remote branches\n\n# Exit on error\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Print with color\nprint_message() {\n    local color=$1\n    local message=$2\n    echo -e \"${color}${message}${NC}\"\n}\n\n# Check if we're in a git repository\nif ! git rev-parse --git-dir > /dev/null 2>&1; then\n    print_message \"$RED\" \"Error: Not a git repository\"\n    exit 1\nfi\n\n# Check for uncommitted changes\nif ! git diff-index --quiet HEAD --; then\n    print_message \"$RED\" \"Error: You have uncommitted changes. Please commit or stash them first.\"\n    exit 1\nfi\n\n# Get current branch\nCURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)\nprint_message \"$GREEN\" \"Current branch: $CURRENT_BRANCH\"\n\n# Fetch latest from remote and prune\nprint_message \"$YELLOW\" \"Fetching from remote and pruning...\"\ngit fetch origin --prune\n\n# Switch to main branch if not already on it\nif [ \"$CURRENT_BRANCH\" != \"main\" ]; then\n    print_message \"$YELLOW\" \"Switching to main branch...\"\n    git checkout main\nfi\n\n# Delete all local branches except main\nprint_message \"$YELLOW\" \"Deleting local branches except main...\"\ngit branch | grep -v '^*' | grep -v '^  main$' | xargs git branch -D 2>/dev/null || true\n\n# Create local branches for each remote branch\nprint_message \"$YELLOW\" \"Creating local branches from remote...\"\ngit branch -r | grep -v '\\->' | sed \"s,origin/,,\" | grep -v '^main$' | while read branch; do\n    print_message \"$GREEN\" \"Creating local branch: $branch\"\n    git checkout -B \"$branch\" \"origin/$branch\"\ndone\n\n# Switch back to original branch\nprint_message \"$YELLOW\" \"Switching back to $CURRENT_BRANCH...\"\ngit checkout \"$CURRENT_BRANCH\"\n\nprint_message \"$GREEN\" \"Sync complete! Current branches:\"\ngit branch\n\n--- scripts/start_dev_server.sh ---\n#!/bin/bash\n\nexport NODE_ENV=development\nexport LOG_LEVEL=debug\nclear && npm run dev\n\n--- src/client/common/README.md ---\n# Client common work\n\nFor common work that is Client specific\n\n\n--- src/server/common/README.md ---\n# Server common work\n\nFor common work that is Server specific\n"
    }
  ],
  "analyzed_code_chunks": [
    {
      "chunk_id": "core_application_setup",
      "summary": "This code chunk represents the core application setup for a Node.js-based web application using the Hapi framework. It includes server configuration, routing setup, session management, logging, and various middleware integrations. The application is designed to serve as a frontend for a governance checklist system, with features for projects, templates, and workflow management. It also includes development and production build configurations, along with Docker and docker-compose setups for local development and deployment.",
      "data_model": null,
      "interfaces": "# Interfaces\n\n## API Endpoints\n\nThe application exposes several API endpoints through the Hapi server:\n\n- `/health`: Health check endpoint\n- `/`: Home page\n- `/about`: About page\n- `/governance-templates`: Governance templates\n- `/workflow-templates`: Workflow templates\n- `/checklist-item-templates`: Checklist item templates\n- `/projects`: Projects management\n\n## User Interfaces\n\nThe application uses Nunjucks as a templating engine for server-side rendering of HTML pages. The frontend assets (JavaScript and CSS) are built using Webpack.\n\n## Static File Serving\n\nThe application serves static files from the `.public` directory.\n\n## Session Management\n\nThe application uses Hapi-yar for session management, with support for both in-memory and Redis-based session storage.\n\n## Logging\n\nThe application uses Pino for logging, with support for both development (pretty-printed) and production (ECS format) logging.",
      "business_logic": null,
      "dependencies": "# Dependencies\n\n## Main Framework and Libraries\n\n- Node.js (v22+)\n- Hapi (v21.3.12): Web framework for Node.js\n- Nunjucks (v3.2.4): Templating engine\n- Convict (v6.2.4): Configuration management\n- Pino (v9.5.0): Logging library\n- Redis (via ioredis v5.4.1): For session storage in production\n- Webpack (v5.96.1): Asset bundling and build tool\n\n## Development Dependencies\n\n- Babel (v7.26.0): JavaScript compiler\n- ESLint (v8.57.0): Linting tool\n- Jest (v29.7.0): Testing framework\n- TypeScript (v5.6.3): Type checking\n- Prettier (v3.3.3): Code formatting\n\n## External Services\n\n- LocalStack: For simulating AWS services locally\n- MongoDB: Database (configured in docker-compose, but not directly used in the provided code)\n\n## API Integrations\n\nThe application is set up to communicate with a backend API server, configured through the `API_SERVER` environment variable.\n\n## Version Control\n\nThe project uses Git for version control, with Husky for pre-commit hooks.",
      "configuration": "# Configuration\n\n## Main Configuration (src/config/config.js)\n\nUses Convict for configuration management. Key configuration options include:\n\n- `port`: Server port (default: 3000)\n- `env`: Application environment (production, development, test)\n- `serviceName`: Application name\n- `log`: Logging configuration (level, format, redaction)\n- `session`: Session management configuration (cache engine, cookie settings)\n- `redis`: Redis configuration for session storage\n- `nunjucks`: Template engine configuration\n- `apiServer`: Backend API server URL\n\n## Environment Variables\n\nSupports various environment variables, including:\n\n- `NODE_ENV`: Application environment\n- `PORT`: Server port\n- `REDIS_HOST`: Redis host for session storage\n- `API_SERVER`: Backend API server URL\n\n## Build Configuration\n\n- `babel.config.cjs`: Babel configuration for transpilation\n- `webpack.config.js`: Webpack configuration for asset bundling\n- `postcss.config.js`: PostCSS configuration for CSS processing\n- `stylelint.config.js`: Stylelint configuration for CSS linting\n- `tsconfig.json`: TypeScript configuration\n- `jest.config.js`: Jest configuration for testing\n\n## Docker Configuration\n\n- `Dockerfile`: Multi-stage Docker build for development and production\n- `compose.yml`: Docker Compose configuration for local development setup",
      "infrastructure": "# Infrastructure\n\n## Docker\n\nThe application uses a multi-stage Dockerfile for both development and production builds:\n\n- Development stage: Based on `defradigital/node-development:latest-22`\n- Production stage: Based on `defradigital/node:latest-22`\n\nThe Dockerfile sets up the application, installs dependencies, and builds the application for production.\n\n## Docker Compose\n\nThe `compose.yml` file defines the local development environment, including:\n\n- LocalStack: For simulating AWS services\n- Redis: For session storage\n- MongoDB: Database (not directly used in the provided code)\n- Frontend service: The main application\n\n## Deployment\n\nWhile not explicitly defined in the provided code, the application is designed to be deployed in a containerized environment, likely using Kubernetes or a similar orchestration platform.\n\n## CI/CD\n\nThe presence of GitHub Actions reporter in the Jest configuration suggests that the project uses GitHub Actions for continuous integration. However, the specific CI/CD pipeline configuration is not provided in the given code chunk.",
      "non_functional": "# Non-Functional Aspects\n\n## Security\n\n- HTTPS and HSTS configuration in Hapi server setup\n- Secure session management with configurable cookie settings\n- Content Security Policy (CSP) headers\n- XSS protection enabled\n- CSRF protection (implied by the use of Hapi)\n\n## Performance\n\n- Redis-based session caching for improved performance in production\n- Asset bundling and minification using Webpack for optimized frontend performance\n- Configurable static asset caching\n\n## Reliability\n\n- Health check endpoint for monitoring application status\n- Unhandled rejection handling for improved error resilience\n\n## Logging and Monitoring\n\n- Structured logging using Pino with environment-specific formats\n- Request logging middleware\n- Support for distributed tracing\n\n## Testing\n\n- Jest setup for unit and integration testing\n- Test coverage reporting configured\n\n## Error Handling\n\n- Global error handling middleware (catchAll)\n- Custom error pages (implied by the error handling setup)\n\n## Compliance and Privacy\n\n- Configurable log redaction for sensitive data\n\n## Development Workflow\n\n- ESLint and Prettier for code quality and consistency\n- Husky for pre-commit hooks to enforce code quality checks\n- TypeScript for static type checking\n\n## Scalability\n\n- Containerized application design for easy scaling and deployment\n- Support for clustered environments (implied by the use of Redis for session storage)"
    },
    {
      "chunk_id": "authentication_and_session_management",
      "summary": "This code chunk implements authentication and session management for a server application. It provides a flexible caching system for session storage, supporting both Redis and in-memory options. The code includes configuration for session management, Redis client setup, and associated unit tests. It utilizes the Hapi framework with the Yar plugin for session handling, and implements error logging and connection management for Redis.",
      "data_model": null,
      "interfaces": null,
      "business_logic": null,
      "dependencies": "The code relies on several external dependencies:\n\n1. @hapi/catbox-redis: Used for Redis-based caching.\n2. @hapi/catbox-memory: Used for in-memory caching.\n3. @hapi/yar: Hapi plugin for session management.\n4. ioredis: Redis client for Node.js, used for connecting to Redis servers.\n5. jest: Testing framework used for unit tests.\n\nInternal dependencies:\n1. config: Configuration module used to retrieve application settings.\n2. logging/logger: Custom logging module for creating logger instances.\n\nThe code uses these dependencies to implement session caching, Redis client setup, and testing. It also demonstrates version compatibility considerations by mocking certain modules in the test files.",
      "configuration": "The code includes several configuration elements:\n\n1. Redis configuration:\n   - host: Redis server host\n   - username: Redis username (optional)\n   - password: Redis password (optional)\n   - keyPrefix: Prefix for Redis keys\n   - useSingleInstanceCache: Boolean to determine if single instance or cluster is used\n   - useTLS: Boolean to enable TLS for Redis connection\n\n2. Session configuration:\n   - cache.name: Name of the cache\n   - cache.ttl: Time-to-live for cache entries\n   - cookie.password: Password for cookie encryption\n   - cookie.ttl: Time-to-live for cookies\n   - cookie.secure: Boolean to set secure flag on cookies\n\n3. Environment-specific configuration:\n   - isProduction: Boolean to determine if the application is running in production mode\n\nThe configuration is retrieved using a `config` object, likely from a centralized configuration file or environment variables. Sensitive data like passwords are handled through this configuration system.",
      "infrastructure": null,
      "non_functional": "The code addresses several non-functional aspects:\n\n1. Performance and Reliability:\n   - Supports both Redis and in-memory caching for session management, allowing for scalability and performance optimization.\n   - Implements Redis Cluster support for high availability and better performance in distributed environments.\n\n2. Security:\n   - Uses secure cookie options with encryption passwords.\n   - Supports TLS for Redis connections.\n   - Implements proper error handling for cache and Redis connection issues.\n\n3. Logging and Monitoring:\n   - Utilizes a custom logger for info and error logging.\n   - Logs Redis connection status and errors.\n\n4. Testing:\n   - Includes comprehensive unit tests for cache engine selection and Redis client setup.\n   - Uses Jest for testing and mocking external dependencies.\n\n5. Error Handling:\n   - Implements error logging for Redis connection issues.\n   - Sets `errorOnCacheNotReady` option to true for immediate error reporting on cache issues.\n\n6. Environment-specific Behavior:\n   - Warns against using in-memory cache in production environments.\n   - Supports different configurations for development and production environments.\n\n7. Configurability:\n   - Allows for flexible configuration of Redis and session management settings.\n\nThese non-functional aspects contribute to the overall reliability, security, and maintainability of the authentication and session management system."
    },
    {
      "chunk_id": "logging_and_monitoring",
      "summary": "This code chunk implements logging, monitoring, and error handling for a server application. It sets up a logging system using Pino and Elastic Common Schema (ECS) format, configures error handling and custom error pages, implements metrics collection using AWS Embedded Metrics, and provides a health check endpoint. The code also includes extensive unit tests for these functionalities.",
      "data_model": null,
      "interfaces": "- Health check endpoint:\n  - GET /health\n  - Response: { message: 'success' }\n  - Status code: 200 OK\n\n- Error handling pages:\n  - Various error pages (404 Not Found, 403 Forbidden, 401 Unauthorized, 400 Bad Request, 500 Internal Server Error)\n  - Custom error page template: 'error/index'",
      "business_logic": null,
      "dependencies": "- External libraries:\n  - @elastic/ecs-pino-format: For Elastic Common Schema (ECS) log formatting\n  - pino: For logging\n  - hapi-pino: Hapi plugin for request logging\n  - aws-embedded-metrics: For metrics collection\n  - hapi-pulse: For graceful server shutdown\n\n- Internal dependencies:\n  - config: Application configuration\n  - @defra/hapi-tracing: For trace ID retrieval",
      "configuration": "- Log configuration:\n  - Configurable log level, format, and redaction paths\n  - Development mode configuration for log file output\n  - Service name and version configuration\n\n- Metrics configuration:\n  - Toggle for enabling/disabling metrics collection\n\n- Environment-specific configuration:\n  - isDevelopment flag for development-specific behavior",
      "infrastructure": null,
      "non_functional": "1. Logging and Monitoring:\n   - Structured logging using Pino and Elastic Common Schema (ECS) format\n   - Request logging with hapi-pino\n   - Configurable log redaction for sensitive data\n   - Trace ID inclusion in logs for request tracing\n   - Metrics collection using AWS Embedded Metrics\n   - Health check endpoint for monitoring application status\n\n2. Error Handling:\n   - Custom error pages for different HTTP status codes\n   - Centralized error handling with the catchAll function\n   - Error stack logging for 5xx errors\n\n3. Performance and Reliability:\n   - Graceful server shutdown using hapi-pulse plugin\n   - Configurable timeout for graceful shutdown (10 seconds default)\n\n4. Security:\n   - Log redaction for sensitive information\n\n5. Testing:\n   - Extensive unit tests for error handling, metrics, and health check endpoint\n   - Mocking of external dependencies in tests\n\n6. Observability:\n   - Structured logging for easier log analysis\n   - Metrics collection for monitoring application performance"
    },
    {
      "chunk_id": "security_and_networking",
      "summary": "This code chunk implements security configurations and networking setup for a server application. It includes functionality for managing SSL/TLS certificates, setting up a secure context for HTTPS connections, and configuring HTTP proxies. The code also provides utility functions for handling environment variables and status codes.",
      "data_model": null,
      "interfaces": null,
      "business_logic": null,
      "dependencies": "The code chunk has the following dependencies:\n\n1. Node.js built-in modules:\n   - `node:tls`: For creating secure TLS/SSL connections\n\n2. External libraries:\n   - `@hapi/hapi`: A web framework for building server-side applications\n   - `undici`: HTTP/1.1 client, used for proxy configuration\n   - `global-agent`: Used for global proxy configuration\n   - `hapi-pino`: Logging plugin for Hapi (mocked in tests)\n\n3. Internal dependencies:\n   - `~/src/config/config.js`: Configuration module\n   - `~/src/server/common/helpers/logging/logger.js`: Logging utility\n   - `~/src/server/common/helpers/logging/request-logger.js`: Request logging helper\n\nThe code also uses Jest for testing, as evident from the test files and mocking patterns.",
      "configuration": "The code chunk includes several configuration-related elements:\n\n1. Environment variables:\n   - `TRUSTSTORE_*`: Used to store base64-encoded SSL/TLS certificates\n   - `HTTP_PROXY`: Used to set up a global HTTP proxy\n\n2. Configuration options:\n   - `isSecureContextEnabled`: Boolean flag to enable/disable custom secure context\n   - `httpProxy`: URL for the HTTP proxy\n\n3. Constants:\n   - `statusCodes`: An object containing HTTP status codes\n\nThe configuration is managed through a `config` object imported from `~/src/config/config.js`, which provides methods like `get()` and `set()` for accessing and modifying configuration values.\n\nSensitive data handling:\n- SSL/TLS certificates are stored as base64-encoded strings in environment variables, which helps to keep them secure and separate from the codebase.",
      "infrastructure": null,
      "non_functional": "The code chunk addresses several non-functional aspects:\n\n1. Security:\n   - Implements custom secure context for HTTPS connections\n   - Manages SSL/TLS certificates through environment variables\n   - Sets up HTTP proxies for secure communication\n\n2. Performance and Reliability:\n   - Uses efficient buffer operations for certificate handling\n   - Implements global proxy settings to ensure consistent network behavior\n\n3. Error Handling:\n   - Logs information about missing TRUSTSTORE certificates\n   - Provides informative logs about proxy and secure context setup\n\n4. Logging:\n   - Uses a custom logger (likely based on Pino, as hapi-pino is used in tests)\n   - Logs important information about security and proxy setup\n\n5. Testing:\n   - Comprehensive unit tests for secure context and proxy setup\n   - Uses Jest for testing framework\n   - Implements mocking for external dependencies and environment variables\n\n6. Modularity and Maintainability:\n   - Code is organized into small, focused modules\n   - Clear separation of concerns between different functionalities\n\n7. Configurability:\n   - Allows enabling/disabling of secure context through configuration\n   - Supports dynamic proxy configuration through environment variables\n\n8. Compliance:\n   - Implements proper handling of SSL/TLS certificates, which is crucial for regulatory compliance in many industries"
    },
    {
      "chunk_id": "template_engine_and_view_helpers",
      "summary": "This code chunk implements a template engine configuration and view helpers for a web application. It sets up Nunjucks as the templating engine, configures filters and global functions, and provides context for rendering views. The code includes navigation building, date and currency formatting, and asset path management. It also contains test files to ensure the proper functioning of these components.",
      "data_model": null,
      "interfaces": "The code defines several interfaces:\n\n1. Template rendering interface:\n   - Uses Nunjucks templating engine\n   - Configures template paths and options\n   - Provides custom filters and global functions\n\n2. View context interface:\n   - Provides `context` function that returns an object with:\n     - `assetPath`: Path to static assets\n     - `serviceName`: Name of the service\n     - `serviceUrl`: URL of the service\n     - `breadcrumbs`: Array for breadcrumb navigation\n     - `navigation`: Array of navigation items\n     - `getAssetPath`: Function to get the path of an asset\n\n3. Navigation interface:\n   - `buildNavigation` function that returns an array of navigation items\n   - Each item has `text`, `url`, and `isActive` properties\n\n4. Custom Nunjucks filters:\n   - `formatDate`: Formats dates\n   - `formatCurrency`: Formats currency values\n   - `map`: Maps an array of objects to an array of values for a specific attribute\n\n5. Custom Nunjucks globals:\n   - `assign`: Lodash's assign function for object manipulation in templates\n\n6. Component rendering interface:\n   - `appHeading` macro for rendering page headings with optional captions",
      "business_logic": "The business logic in this code chunk primarily revolves around view rendering and helper functions:\n\n1. Navigation building:\n   - `buildNavigation` function creates a navigation structure based on the current request path\n   - Determines which navigation item is active based on the current URL\n\n2. Date formatting:\n   - `formatDate` function converts dates to a specified format\n   - Handles both string and Date object inputs\n\n3. Currency formatting:\n   - `formatCurrency` function formats numbers as currency\n   - Supports different locales and currencies\n\n4. Asset path management:\n   - `getAssetPath` function resolves asset paths using a webpack manifest\n   - Fallbacks to a default path if the manifest is not available\n\n5. Array mapping:\n   - `map` function allows mapping of object arrays to extract specific attributes\n   - Supports nested object properties\n\nThese functions provide essential utilities for rendering views and formatting data in the application's user interface.",
      "dependencies": "The code has several external dependencies:\n\n1. Node.js built-in modules:\n   - `node:url`: For file URL handling\n   - `node:path`: For file path operations\n   - `node:fs`: For file system operations\n\n2. Third-party libraries:\n   - `nunjucks`: Templating engine\n   - `@hapi/vision`: Hapi plugin for view rendering\n   - `date-fns`: Date manipulation library\n   - `lodash`: Utility library (only the `assign` function is used)\n   - `cheerio`: HTML parsing library (used in tests)\n\n3. Application-specific dependencies:\n   - `~/src/config/config.js`: Application configuration\n   - `~/src/server/common/helpers/logging/logger.js`: Logging utility\n\n4. Testing libraries:\n   - Jest: JavaScript testing framework\n\n5. Frontend dependencies:\n   - `govuk-frontend`: Government Digital Service (GDS) design system\n\nThe code also relies on internal modules for filters, globals, and components, which are imported and configured within the Nunjucks setup.",
      "configuration": "The configuration in this code chunk includes:\n\n1. Nunjucks template engine configuration:\n   - Template paths: \n     - `node_modules/govuk-frontend/dist/`\n     - `src/views`\n     - `src/server/common/templates`\n     - `src/server/common/components`\n   - Options:\n     - `autoescape`: true\n     - `throwOnUndefined`: false\n     - `trimBlocks`: true\n     - `lstripBlocks`: true\n     - `watch`: Configurable (from `config.get('nunjucks.watch')`)\n     - `noCache`: Configurable (from `config.get('nunjucks.noCache')`)\n\n2. Hapi Vision plugin configuration:\n   - Engine: Nunjucks (.njk files)\n   - Relative path: 'server'\n   - Cache settings: Based on production mode (`config.get('isProduction')`)\n\n3. Asset configuration:\n   - Asset path: Configurable (from `config.get('assetPath')`)\n   - Webpack manifest: Read from `.public/assets-manifest.json`\n\n4. Service configuration:\n   - Service name: Configurable (from `config.get('serviceName')`)\n   - Service URL: '/'\n\n5. Environment-specific configuration:\n   - Production mode check: `config.get('isProduction')`\n\n6. Test environment configuration:\n   - Separate Nunjucks environment for testing\n   - Mock configurations for file reading and logging\n\nThe configuration is flexible, allowing for different settings in development and production environments, and uses a central `config` object for managing application-wide settings.",
      "infrastructure": null,
      "non_functional": "Non-functional aspects of this code chunk include:\n\n1. Performance considerations:\n   - Caching of the webpack manifest file to reduce file system reads\n   - Configurable template caching based on production mode\n\n2. Error handling:\n   - Graceful handling of missing webpack manifest file with error logging\n   - Null checks and default values in various functions to prevent runtime errors\n\n3. Testing:\n   - Extensive unit tests for various components and functions\n   - Use of Jest for testing framework\n   - Mock implementations for file system and logging operations in tests\n\n4. Code organization:\n   - Separation of concerns with different files for filters, globals, and components\n   - Modular structure allowing easy extension of filters and globals\n\n5. Maintainability:\n   - Use of JSDoc comments for better code documentation and type hinting\n   - Consistent coding style and formatting\n\n6. Compatibility:\n   - Support for different locales in date and currency formatting\n\n7. Accessibility:\n   - Use of GOV.UK Frontend components, which are designed with accessibility in mind\n\n8. Logging:\n   - Error logging for critical operations like reading the webpack manifest\n\nWhile not explicitly mentioned, the use of a templating engine and modular structure contributes to the overall maintainability and scalability of the application."
    },
    {
      "chunk_id": "static_asset_management",
      "summary": "This code chunk implements static asset management and serving for a web application. It sets up routes for serving static files, including a favicon and other assets, using Hapi.js server. The chunk also includes client-side JavaScript for initializing GOV.UK Frontend components and SASS stylesheets for custom styling. It demonstrates a setup for handling static assets in a Node.js-based web application with a focus on government website styling.",
      "data_model": null,
      "interfaces": "# Interfaces\n\n## Server-side Routes\n\n1. Favicon Route\n   - Method: GET\n   - Path: `/favicon.ico`\n   - Response: 204 No Content with `image/x-icon` content type\n\n2. Static Assets Route\n   - Method: GET\n   - Path: `${config.get('assetPath')}/{param*}`\n   - Serves files from the current directory\n\n## Client-side Components\n\nThe following GOV.UK Frontend components are initialized:\n- Button\n- Checkboxes\n- ErrorSummary\n- Header\n- Radios\n- SkipLink\n\nThese components provide standardized UI elements for government websites.",
      "business_logic": null,
      "dependencies": "# Dependencies\n\n1. Server-side:\n   - @hapi/hapi: Web framework for Node.js\n   - Configuration module (imported from '~/src/config/config.js')\n   - Status codes constants (imported from '~/src/server/common/constants/status-codes.js')\n\n2. Client-side:\n   - govuk-frontend: GOV.UK design system implementation\n\n3. Build tools:\n   - SASS compiler (implied by the presence of .scss files)\n\n4. Testing:\n   - Jest (implied by the use of `describe`, `test`, and `expect` functions)\n\nVersion information is not provided in the given code snippet.",
      "configuration": "# Configuration\n\n1. Server Configuration:\n   - `staticCacheTimeout`: Configures the expiration time for static asset caching\n   - `assetPath`: Defines the base path for serving static assets\n\n2. SASS Configuration:\n   - `$govuk-assets-path`: Set to \"/public/assets/\"\n   - `$govuk-new-organisation-colours`: Set to true\n   - `$govuk-global-styles`: Set to true\n\nThese configurations are used to set up static file serving and customize the GOV.UK Frontend styles.",
      "infrastructure": "# Infrastructure\n\n1. Static File Serving:\n   - The server is configured to serve static files from the current directory\n   - A specific route is set up for serving the favicon\n\n2. Asset Pipeline:\n   - SASS files are organized in a modular structure, suggesting a build process that compiles these into CSS\n   - Client-side JavaScript is set up to initialize GOV.UK Frontend components\n\n3. Testing Setup:\n   - Server tests are implemented using Jest\n   - The `startServer` helper is used to create a test server instance\n\n4. Build Process:\n   - A build step is mentioned in a comment, indicating that `npm run build` is executed in the postinstall hook of package.json\n\nThis setup suggests a Node.js-based application with a focus on government website standards and static asset management.",
      "non_functional": "# Non-Functional Aspects\n\n1. Performance:\n   - Static asset caching is implemented with configurable timeout\n   - Use of CDN for serving GOV.UK Frontend assets (implied by the asset path configuration)\n\n2. Security:\n   - Authentication is explicitly disabled for static asset routes\n   - Cache privacy is set to 'private' for static assets\n\n3. Testing:\n   - Unit tests are implemented for the static file serving functionality\n   - Server injection is used for testing HTTP endpoints\n\n4. Maintainability:\n   - Modular SASS structure for better organization of styles\n   - Use of GOV.UK Frontend components for consistent UI\n\n5. Accessibility:\n   - Inclusion of SkipLink component suggests consideration for keyboard navigation\n\n6. Standards Compliance:\n   - Adherence to GOV.UK design standards and components\n\n7. Error Handling:\n   - Proper HTTP status codes are used (e.g., 204 for favicon)\n\nThese non-functional aspects contribute to the overall quality, performance, and compliance of the application."
    },
    {
      "chunk_id": "home_page",
      "summary": "This code chunk implements the home page functionality for a Governance Checklist Tool. It includes a server-side controller, a route definition, a view template, and a test file. The home page displays a welcome message, introduces the tool's purpose, and provides a button to view projects. The implementation uses the Hapi.js framework for the server and Nunjucks for templating.",
      "data_model": null,
      "interfaces": "# Interfaces\n\n## User Interface\n- The home page UI is defined in `src/server/home/index.njk`\n- It extends a base layout `layouts/page.njk`\n- Displays a heading, welcome message, and a \"View Projects\" button\n\n## API Endpoint\n- GET /\n  - Handled by `homeController.handler`\n  - Returns: HTML page rendered using the `home/index` view\n  - Response: \n    - Page title: \"Home\"\n    - Heading: \"Home\"\n\n## Server Plugin\n- Plugin name: \"home\"\n- Registers the GET / route with the server",
      "business_logic": "# Business Logic\n\nThe business logic in this chunk is minimal, primarily focused on rendering the home page:\n\n1. The `homeController.handler` function:\n   - Renders the home page view\n   - Sets the page title and heading to \"Home\"\n\n2. The home page content:\n   - Introduces the Governance Checklist Tool\n   - Explains the tool's purpose: standardizing and managing governance processes across projects\n   - Mentions key features: creating and managing version-controlled governance templates, instantiating project-specific workflows, and tracking compliance\n\n3. The \"View Projects\" button provides navigation to the projects page, implying that project management is a core feature of the application.\n\nThe business logic is simple and primarily serves to introduce the tool and direct users to the main functionality.",
      "dependencies": "# Dependencies\n\n1. Server-side Framework:\n   - @hapi/hapi: Used for creating and managing the server and routes\n\n2. Templating Engine:\n   - Nunjucks: Used for rendering the home page template (index.njk)\n\n3. Testing Framework:\n   - Jest: Implied by the use of `describe`, `test`, `expect` in the test file\n\n4. Internal Dependencies:\n   - `~/src/server/index.js`: Used to create the server in tests\n   - `~/src/server/common/constants/status-codes.js`: Used for HTTP status codes in tests\n\n5. GDS (Government Digital Service) Components:\n   - The use of `govuk-` classes and `appHeading` suggests the use of GDS design system components\n\n6. View Helpers:\n   - `appHeading`: A custom view helper used to render the page heading\n\nNote: Exact versions of these dependencies are not specified in the provided code chunk.",
      "configuration": null,
      "infrastructure": null,
      "non_functional": "# Non-Functional Aspects\n\n1. Testing:\n   - Unit tests are implemented for the home controller in `src/server/home/controller.test.js`\n   - Tests cover:\n     - Server initialization\n     - Expected response for the home page\n     - HTTP status code verification\n\n2. Error Handling:\n   - No explicit error handling is implemented in the provided code\n\n3. Performance:\n   - The home page is a simple static page, which should load quickly\n   - Server-side rendering is used, which can be beneficial for initial page load times\n\n4. Accessibility:\n   - Use of GDS design system components suggests adherence to accessibility standards\n   - The \"View Projects\" button includes appropriate ARIA attributes (role=\"button\")\n\n5. Maintainability:\n   - Code is organized into separate files for controller, routes, and view\n   - JSDoc comments are used to document types and imports\n\n6. Scalability:\n   - The use of a plugin architecture (Hapi.js) allows for easy addition of new features\n\n7. Security:\n   - No obvious security measures are implemented in this chunk, but security would typically be handled at the server or framework level\n\n8. Compliance:\n   - The use of GDS components suggests compliance with UK government digital standards\n\nNote: This analysis is based solely on the provided code chunk and may not reflect the entire application's non-functional characteristics."
    },
    {
      "chunk_id": "about_page",
      "summary": "This code chunk implements an \"About\" page for a web application using the Hapi.js framework and following GDS (Government Digital Service) styling guidelines. It includes a controller to handle GET requests to the '/about' route, a test file to ensure proper functionality, a plugin setup file to register the route, and a Nunjucks template for rendering the page content. The page displays information about the Core delivery platform Node.js Frontend Template, adhering to DEFRA and GOV.UK best practices.",
      "data_model": null,
      "interfaces": "# Interfaces\n\n## User Interface (UI)\n- The About page is rendered using a Nunjucks template (`src/server/about/index.njk`).\n- It extends a base layout (`layouts/page.njk`).\n- The page includes a heading with a caption and a two-column layout for the main content.\n\n## API Endpoint\n- **Method**: GET\n- **Path**: `/about`\n- **Handler**: `aboutController.handler`\n- **Response**: Renders the 'about/index' view with the following context:\n  - `pageTitle`: 'About'\n  - `heading`: 'About'\n  - `breadcrumbs`: An array of breadcrumb objects\n\n## Server Plugin\n- Plugin Name: 'about'\n- Registers the GET '/about' route with the server",
      "business_logic": "# Business Logic\n\nThe business logic in this code chunk is minimal and primarily focused on rendering the About page:\n\n1. The `aboutController.handler` function is responsible for handling GET requests to the '/about' route.\n2. It sets up the context for the view, including:\n   - Page title\n   - Heading\n   - Breadcrumbs for navigation\n3. The Nunjucks template (`index.njk`) contains the actual content of the About page, which includes:\n   - A heading with a caption describing the Core delivery platform Node.js Frontend Template\n   - A paragraph explaining that the starter kit is based on DEFRA and GOV.UK best practices\n   - Links to DEFRA software development standards and GOV.UK design system\n\nThe business logic here is mainly about presenting information to the user and ensuring proper navigation within the application.",
      "dependencies": "# Dependencies\n\n1. Hapi.js Framework:\n   - The code uses the Hapi.js server framework for handling HTTP requests and routing.\n   - Import: `@hapi/hapi` (implied from the use of `ServerRoute` and `ServerRegisterPluginObject` types)\n\n2. Nunjucks:\n   - Used for templating (implied from the use of `.njk` files)\n\n3. Testing Libraries:\n   - Jest: Used for running tests (implied from the use of `describe`, `test`, `expect`)\n\n4. Internal Dependencies:\n   - `~/src/server/index.js`: Contains the `createServer` function\n   - `~/src/server/common/constants/status-codes.js`: Contains `statusCodes` constants\n\n5. GOV.UK Frontend:\n   - Implied from the use of `govuk-` classes and the mention of GOV.UK design system\n\n6. DEFRA Frontend:\n   - Implied from the mention of DEFRA best practices and software development standards\n\n7. Node.js:\n   - The entire application is built on Node.js (implied from the use of ES modules and Node.js-style imports)\n\nVersion information is not explicitly provided in the given code chunk.",
      "configuration": null,
      "infrastructure": null,
      "non_functional": "# Non-Functional Aspects\n\n1. Testing:\n   - Unit tests are implemented for the About page controller in `src/server/about/controller.test.js`.\n   - Tests cover the expected response and status code for GET requests to the '/about' route.\n   - The testing setup includes server initialization and cleanup (stop) in `beforeAll` and `afterAll` hooks.\n\n2. Code Organization:\n   - The code follows a modular structure with separate files for the controller, route setup, and view template.\n   - The use of ES modules (`import`/`export`) promotes better code organization and maintainability.\n\n3. Accessibility:\n   - The use of GOV.UK Design System components (implied by the `govuk-` classes) suggests adherence to accessibility standards.\n\n4. Performance:\n   - The About page appears to be a static page, which should lead to good performance as there's no dynamic data fetching.\n\n5. Maintainability:\n   - The use of a templating system (Nunjucks) allows for easy updates to the page content without modifying the server code.\n   - The separation of the route handler (controller) from the route registration (plugin) improves maintainability.\n\n6. Standards Compliance:\n   - The code adheres to DEFRA and GOV.UK best practices, as mentioned in the page content.\n\n7. Documentation:\n   - JSDoc comments are used to document the purpose of functions and type imports.\n   - The About page content itself serves as documentation for the project's basis and standards.\n\n8. Error Handling:\n   - No explicit error handling is visible in this code chunk, which could be a potential area for improvement.\n\n9. Logging and Monitoring:\n   - No explicit logging or monitoring is implemented in this code chunk, which could be another area for enhancement."
    },
    {
      "chunk_id": "project_management",
      "summary": "This code implements a project management functionality for a Defra SDLC Governance Checklist application. It provides features for creating, listing, viewing, and deleting projects, as well as managing associated workflows and checklist items. The system integrates with an external API for data persistence and retrieval, and uses server-side rendering with Nunjucks templates for the user interface.",
      "data_model": "The code implies the following data model:\n\n```mermaid\nerDiagram\n    Project {\n        string _id\n        string name\n        string description\n        string governanceTemplateId\n    }\n    GovernanceTemplate {\n        string _id\n        string name\n        string version\n    }\n    WorkflowInstance {\n        string _id\n        string name\n        int orderNumber\n        string projectId\n    }\n    ChecklistItemInstance {\n        string _id\n        string name\n        string type\n        string status\n        int orderNumber\n        string workflowInstanceId\n    }\n    Project ||--o{ WorkflowInstance : has\n    Project ||--|| GovernanceTemplate : uses\n    WorkflowInstance ||--o{ ChecklistItemInstance : contains\n```\n\n- Project: Represents a project with name, description, and associated governance template.\n- GovernanceTemplate: Represents a template for project governance with name and version.\n- WorkflowInstance: Represents a workflow associated with a project, having a name and order number.\n- ChecklistItemInstance: Represents an item in a workflow checklist, with name, type (e.g., document, approval), status, and order number.\n\nThe code doesn't directly interact with a database but instead uses an external API for data persistence and retrieval.",
      "interfaces": "1. User Interfaces (UI):\n   - Project list view (/projects)\n   - New project form (/projects/new)\n   - Project detail view (/projects/{id})\n   - Project deletion confirmation (/projects/{id}/delete)\n   - Project dependencies diagram (/projects/{id}/diagram)\n\n2. API Endpoints:\n   - GET /api/v1/projects: Retrieve all projects\n   - GET /api/v1/projects/{id}: Retrieve a specific project\n   - POST /api/v1/projects: Create a new project\n   - DELETE /api/v1/projects/{id}: Delete a project\n   - GET /api/v1/governance-templates: Retrieve all governance templates\n   - GET /api/v1/governance-templates/{id}: Retrieve a specific governance template\n   - GET /api/v1/workflow-templates: Retrieve workflow templates for a governance template\n   - GET /api/v1/workflow-instances: Retrieve workflow instances for a project\n   - GET /api/v1/checklist-item-instances: Retrieve checklist items for a workflow instance\n   - PUT /api/v1/checklist-item-instances/{id}: Update a checklist item's status\n\n3. Server Routes:\n   - GET /projects: List all projects\n   - GET /projects/new: New project form\n   - POST /projects: Create a new project\n   - GET /projects/{id}: View project details\n   - GET /projects/{id}/delete: Show project deletion confirmation\n   - POST /projects/{id}/delete: Delete a project\n   - POST /checklist-item-instances/{id}/status: Update checklist item status\n   - GET /projects/{id}/diagram: View project dependencies diagram\n\nThe interfaces use server-side rendering with Nunjucks templates for the UI and communicate with an external API for data operations.",
      "business_logic": "The business logic in this code chunk includes:\n\n1. Project Management:\n   - Creating new projects with associated governance templates and workflows\n   - Listing existing projects\n   - Viewing project details, including associated workflows and checklist items\n   - Deleting projects\n\n2. Workflow Management:\n   - Associating workflows with projects based on selected governance templates\n   - Displaying workflow instances for each project\n\n3. Checklist Item Management:\n   - Displaying checklist items for each workflow\n   - Updating the status of checklist items (complete/incomplete)\n   - Handling dependencies between checklist items\n\n4. Governance Template Integration:\n   - Fetching and displaying available governance templates when creating a project\n   - Associating a governance template with a project\n\n5. Diagram Generation:\n   - Creating a visual representation of project workflows and checklist item dependencies\n\n6. Form Validation:\n   - Client-side validation for project creation form\n   - Server-side validation for required fields\n\n7. Error Handling:\n   - Displaying error messages for failed API calls or validation errors\n   - Graceful degradation when data cannot be fetched\n\nThe business logic is primarily implemented in the controller functions and client-side JavaScript, with a clear separation between the presentation layer (Nunjucks templates) and the data access layer (API calls).",
      "dependencies": "1. External Libraries and Frameworks:\n   - Hapi.js: Server framework for Node.js\n   - Nunjucks: Templating engine for server-side rendering\n   - Mermaid.js: Diagramming and charting library\n\n2. API Dependencies:\n   - External API server (config.get('apiServer')) for data persistence and retrieval\n   - API endpoints used:\n     - /api/v1/projects\n     - /api/v1/governance-templates\n     - /api/v1/workflow-templates\n     - /api/v1/workflow-instances\n     - /api/v1/checklist-item-instances\n\n3. Frontend Dependencies:\n   - GOV.UK Design System: For styling and UI components (implied by the use of 'govuk' classes)\n\n4. Node.js built-in modules:\n   - fetch: For making HTTP requests to the API server\n\n5. Configuration Dependencies:\n   - config module: For accessing configuration values (e.g., config.get('apiServer'))\n\n6. Asset Dependencies:\n   - JavaScript files: mermaid.min.js for diagram rendering\n\nThe code relies heavily on the external API for data operations, indicating a microservices or separated backend/frontend architecture. Version compatibility between the frontend and API should be considered for future maintenance.",
      "configuration": "1. API Server Configuration:\n   - The API server URL is accessed using config.get('apiServer')\n   - This suggests the use of a configuration management system, likely using environment variables or configuration files\n\n2. Server Routes Configuration:\n   - Routes are defined in the 'projects' plugin registration\n   - Each route specifies HTTP method, path, handler function, and options (including authentication settings)\n\n3. Mermaid.js Configuration:\n   - Mermaid is initialized with specific settings for flowchart rendering:\n     - startOnLoad: true\n     - theme: 'default'\n     - securityLevel: 'loose'\n     - flowchart: { useMaxWidth: false, htmlLabels: true, curve: 'basis' }\n\n4. Asset Path Configuration:\n   - Asset paths are retrieved using a getAssetPath function, suggesting a centralized asset management system\n\n5. Authentication Configuration:\n   - All routes are currently set with auth: false, indicating no authentication is required\n\n6. Error Handling Configuration:\n   - Error messages are displayed using the GOV.UK Design System error summary component\n\nWhile the code doesn't show direct handling of environment variables or configuration files, the use of a config.get() function suggests that these are likely managed elsewhere in the application.",
      "infrastructure": "The code doesn't directly contain infrastructure-related elements. However, based on the architecture and dependencies, we can infer the following:\n\n1. Server Infrastructure:\n   - The application is likely deployed on a Node.js server environment\n   - It uses Hapi.js as the server framework\n\n2. API Integration:\n   - The application integrates with a separate API server, suggesting a microservices architecture or at least a separated backend/frontend setup\n\n3. Frontend Rendering:\n   - Server-side rendering is used with Nunjucks templates\n\n4. Static Asset Serving:\n   - The application serves static assets (e.g., JavaScript files like mermaid.min.js)\n\n5. Potential for Containerization:\n   - The separated concerns and use of environment-based configuration suggest the application could be containerized (e.g., using Docker)\n\n6. Scalability Considerations:\n   - The separation of the frontend and API suggests the application is designed for potential horizontal scaling\n\nWhile not explicitly defined in the code, these infrastructure elements are implied by the application's architecture and could be further detailed in deployment scripts or configuration files not present in this code chunk.",
      "non_functional": "1. Performance Considerations:\n   - Multiple API calls are made for each request, which could impact response times\n   - Client-side rendering of complex diagrams using Mermaid.js may affect performance on large projects\n\n2. Error Handling and Recovery:\n   - Comprehensive error handling for API calls with appropriate error messages displayed to users\n   - Graceful degradation when data cannot be fetched, showing empty states or error messages\n\n3. Security Considerations:\n   - No authentication is currently implemented (auth: false for all routes)\n   - CSRF protection is not evident and should be considered\n   - Input validation is performed on the client-side, but server-side validation should also be implemented\n\n4. Logging:\n   - Error logging is implemented using request.logger.error()\n   - More comprehensive logging could be beneficial for debugging and monitoring\n\n5. Usability and Accessibility:\n   - Use of GOV.UK Design System components suggests adherence to accessibility standards\n   - Progressive enhancement is implemented (e.g., JavaScript-enhanced forms with fallback)\n\n6. Scalability:\n   - Separation of frontend and API allows for independent scaling\n   - Potential bottlenecks in API calls for complex projects with many workflows and checklist items\n\n7. Maintainability:\n   - Clear separation of concerns between routes, controllers, and views\n   - Use of templating engine (Nunjucks) for consistent UI rendering\n\n8. Testing:\n   - No explicit testing strategy is visible in the code\n   - Data-testid attributes suggest preparation for frontend testing\n\nWhile the code addresses some non-functional requirements, there are areas for improvement, particularly in security, comprehensive server-side validation, and potentially implementing caching to reduce API calls."
    },
    {
      "chunk_id": "governance_template_management",
      "summary": "This code implements a governance template management system for a Defra SDLC Governance Checklist application. It provides functionality to create, view, edit, delete, and manage governance templates, including associated workflows and checklist items. The system includes a web interface for users to interact with templates, view dependency diagrams, and manage the order of workflows within a template.",
      "data_model": "The code implies a data model for governance templates, workflows, and checklist items, but doesn't explicitly define it. Based on the usage, we can infer the following structure:\n\n```mermaid\nerDiagram\n    GovernanceTemplate ||--o{ WorkflowTemplate : contains\n    WorkflowTemplate ||--o{ ChecklistItemTemplate : contains\n    GovernanceTemplate {\n        string _id\n        string name\n        string version\n        string description\n    }\n    WorkflowTemplate {\n        string _id\n        string name\n        string description\n        int order\n    }\n    ChecklistItemTemplate {\n        string _id\n        string name\n        string type\n        int orderNumber\n    }\n```\n\nGovernanceTemplate:\n- _id: Unique identifier\n- name: Name of the template\n- version: Version of the template\n- description: Optional description\n\nWorkflowTemplate:\n- _id: Unique identifier\n- name: Name of the workflow\n- description: Optional description of the workflow\n- order: Order of the workflow within the governance template\n\nChecklistItemTemplate:\n- _id: Unique identifier\n- name: Name of the checklist item\n- type: Type of the checklist item\n- orderNumber: Order of the item within the workflow\n\nRelationships:\n- A GovernanceTemplate can have multiple WorkflowTemplates\n- A WorkflowTemplate can have multiple ChecklistItemTemplates\n- ChecklistItemTemplates can have dependencies on other ChecklistItemTemplates",
      "interfaces": "1. Web UI:\n   - List governance templates: GET /governance-templates\n   - Create new template: GET /governance-templates/new, POST /governance-templates\n   - View template details: GET /governance-templates/{id}\n   - View template dependencies diagram: GET /governance-templates/{id}/diagram\n   - Delete template confirmation: GET /governance-templates/{id}/delete\n   - Delete template: POST /governance-templates/{id}/delete\n   - Reorder workflow: POST /governance-templates/{id}/workflows/{workflowId}/reorder\n\n2. API Endpoints:\n   - GET /api/v1/governance-templates: List all governance templates\n   - GET /api/v1/governance-templates/{id}: Get specific governance template\n   - POST /api/v1/governance-templates: Create new governance template\n   - DELETE /api/v1/governance-templates/{id}: Delete governance template\n   - GET /api/v1/workflow-templates?governanceTemplateId={id}: Get workflows for a governance template\n   - GET /api/v1/checklist-item-templates?workflowTemplateId={id}: Get checklist items for a workflow\n   - PATCH /api/v1/workflow-templates/{id}/reorder: Reorder workflow within a governance template\n\nThe interfaces use RESTful conventions and include both HTML views for web UI and JSON responses for API endpoints.",
      "business_logic": "The business logic in this code focuses on governance template management:\n\n1. Template CRUD operations:\n   - List all templates\n   - Create new templates with name, version, and description\n   - View template details, including associated workflows\n   - Delete templates (with confirmation)\n\n2. Workflow management:\n   - Display workflows associated with a template\n   - Reorder workflows within a template\n\n3. Dependency management:\n   - Generate and display a dependency diagram for templates, workflows, and checklist items\n\n4. Error handling:\n   - Graceful error handling for API calls and user interactions\n   - Displaying error messages to users\n\n5. Data validation:\n   - Basic validation for required fields (e.g., template name, version)\n\n6. Workflow ordering:\n   - Maintain and update the order of workflows within a template\n\nThe business logic is primarily implemented in the controller functions, separating concerns between data fetching, processing, and view rendering.",
      "dependencies": "1. External libraries and frameworks:\n   - Hapi.js: Web framework for routing and server setup\n   - Nunjucks: Templating engine for rendering views\n   - GOV.UK Design System: For UI components and styling\n   - Mermaid.js: For generating dependency diagrams\n\n2. API calls:\n   - Calls to an external API server for data operations (e.g., fetching, creating, updating, and deleting templates, workflows, and checklist items)\n\n3. Configuration:\n   - Uses a config module for accessing configuration values (e.g., API server URL)\n\n4. Frontend dependencies:\n   - JavaScript for client-side interactions\n   - CSS for styling (likely from GOV.UK Design System)\n\n5. HTTP client:\n   - Uses the fetch API for making HTTP requests to the backend API\n\n6. Logging:\n   - Uses a logging system (request.logger) for error logging\n\nThe code relies heavily on the external API server for data persistence and retrieval, indicating a separation of concerns between the frontend application and the backend data services.",
      "configuration": "The code uses a configuration module, accessed via `config.get()`. Key configuration items include:\n\n1. API server URL: Accessed via `config.get('apiServer')`\n\n2. Environment-specific configurations:\n   - The code likely uses different API server URLs for development, staging, and production environments\n\n3. Server routes configuration:\n   - Defined in the `governanceTemplates` plugin, specifying paths, handlers, and authentication requirements\n\n4. View templates:\n   - Nunjucks templates are used for rendering views, with template paths specified in the controller\n\n5. Asset paths:\n   - JavaScript and CSS assets are referenced, likely configured elsewhere in the application\n\n6. Mermaid.js configuration:\n   - Initialization settings for the Mermaid diagram library\n\nWhile not explicitly shown, the application likely uses environment variables or configuration files to manage these settings across different deployment environments.",
      "infrastructure": "The code doesn't directly include infrastructure-as-code or deployment configurations. However, we can infer some infrastructure requirements:\n\n1. Web server:\n   - The application runs on a web server, likely Node.js, using the Hapi.js framework\n\n2. API server:\n   - A separate API server is required, as indicated by API calls to `${config.get('apiServer')}/api/v1/...`\n\n3. Database:\n   - While not directly referenced, the persistence of templates, workflows, and checklist items implies a database backend, likely managed by the API server\n\n4. Static asset serving:\n   - The application serves static assets (JavaScript, CSS) for the frontend\n\n5. Environment separation:\n   - The use of a configuration module suggests different environments (development, staging, production) with varying settings\n\n6. Potential containerization:\n   - While not explicit, the application structure would be suitable for containerization using Docker\n\n7. Logging:\n   - The use of `request.logger` implies a logging infrastructure\n\nActual deployment, CI/CD, and cloud service configurations are not present in the provided code.",
      "non_functional": "1. Error handling and recovery:\n   - Comprehensive try-catch blocks for API calls and data processing\n   - Graceful error display to users\n   - Fallback behavior when data fetching fails (e.g., displaying empty lists)\n\n2. Logging:\n   - Use of `request.logger` for error logging\n   - Logging of significant events (e.g., number of workflow templates found)\n\n3. Security:\n   - Routes are configured with `auth: false`, indicating no authentication is currently implemented\n   - CSRF protection may be needed for form submissions\n\n4. Performance:\n   - Client-side rendering of complex diagrams using Mermaid.js\n   - Potential for performance issues with large numbers of templates or complex dependency graphs\n\n5. User experience:\n   - Use of GOV.UK Design System for consistent and accessible UI\n   - Responsive design considerations (e.g., overflow handling for diagrams)\n\n6. Maintainability:\n   - Separation of concerns between controllers, views, and routing\n   - Use of templating engine for easier view management\n\n7. Scalability:\n   - Reliance on external API server may present scalability challenges\n   - No evident caching mechanisms for frequently accessed data\n\n8. Accessibility:\n   - Use of GOV.UK Design System components, which are designed with accessibility in mind\n   - ARIA labels used in some UI elements (e.g., reordering buttons)\n\n9. Testing:\n   - Presence of `data-testid` attributes suggests preparation for frontend testing\n\nWhile these non-functional aspects are addressed to some extent, there's room for improvement in areas like security, performance optimization, and comprehensive testing strategies."
    },
    {
      "chunk_id": "workflow_template_management",
      "summary": "This code implements a workflow template management system for a governance checklist application. It provides functionality to create, view, delete, and manage workflow templates and their associated checklist items. The system includes features for creating new workflow templates, viewing template details, managing dependencies between checklist items, and visualizing these dependencies in a diagram. It also handles the ordering of workflow templates and checklist items within a governance template.",
      "data_model": "The code implies the existence of several data models, though they are not explicitly defined in the provided code. The main entities appear to be:\n\n1. WorkflowTemplate\n2. ChecklistItemTemplate\n3. GovernanceTemplate\n\n```mermaid\nerDiagram\n    GovernanceTemplate ||--o{ WorkflowTemplate : contains\n    WorkflowTemplate ||--o{ ChecklistItemTemplate : contains\n    ChecklistItemTemplate }o--o{ ChecklistItemTemplate : depends_on\n```\n\nWorkflowTemplate:\n- _id: String (unique identifier)\n- name: String\n- description: String\n- governanceTemplateId: String (reference to GovernanceTemplate)\n- order: Number\n\nChecklistItemTemplate:\n- _id: String (unique identifier)\n- name: String\n- type: String\n- description: String\n- workflowTemplateId: String (reference to WorkflowTemplate)\n- dependencies_requires: Array of ChecklistItemTemplate references\n- dependencies_requiredBy: Array of ChecklistItemTemplate references\n- order: Number\n\nGovernanceTemplate:\n- _id: String (unique identifier)\n- (other fields not visible in this code snippet)\n\nThe data flow involves creating, retrieving, updating, and deleting these entities through API calls to an external service. The code handles data transformations between the API responses and the views, particularly for managing dependencies and ordering of items.",
      "interfaces": "The code defines several interfaces:\n\n1. User Interfaces (Views):\n   - New workflow template form (`/governance-templates/{governanceTemplateId}/workflows/new`)\n   - Workflow template details (`/workflow-templates/{id}`)\n   - Workflow template delete confirmation (`/workflow-templates/{id}/delete`)\n   - Workflow dependencies diagram (`/governance-templates/{governanceTemplateId}/workflows/{id}/diagram`)\n\n2. API Endpoints:\n   - GET `/api/v1/workflow-templates/{id}`: Retrieve workflow template details\n   - GET `/api/v1/checklist-item-templates?workflowTemplateId={id}`: Retrieve checklist items for a workflow\n   - POST `/api/v1/workflow-templates`: Create a new workflow template\n   - DELETE `/api/v1/workflow-templates/{id}`: Delete a workflow template\n   - PUT `/api/v1/workflow-templates/{id}`: Update workflow template order\n   - POST `/api/v1/checklist-item-templates/{id}`: Update checklist item order\n\n3. Server Routes:\n   - GET `/workflow-templates/{id}`: View workflow template details\n   - GET `/governance-templates/{governanceTemplateId}/workflows/new`: New workflow template form\n   - POST `/governance-templates/{governanceTemplateId}/workflows`: Create new workflow template\n   - GET `/workflow-templates/{id}/delete`: Workflow template delete confirmation\n   - POST `/workflow-templates/{id}/delete`: Delete workflow template\n   - GET `/governance-templates/{governanceTemplateId}/workflows/{id}/diagram`: View workflow dependencies diagram\n   - POST/PUT `/api/v1/workflow-templates/{id}`: Update workflow template order\n\nThe interfaces handle data input/output, form submissions, and API interactions for managing workflow templates and their associated checklist items.",
      "business_logic": "The business logic in this code revolves around the management of workflow templates and their associated checklist items within a governance framework. Key aspects include:\n\n1. Workflow Template Management:\n   - Creation of new workflow templates with name and description\n   - Viewing workflow template details, including associated checklist items\n   - Deletion of workflow templates with confirmation\n   - Updating the order of workflow templates within a governance template\n\n2. Checklist Item Management:\n   - Displaying checklist items associated with a workflow template\n   - Managing dependencies between checklist items (requires and required by)\n   - Updating the order of checklist items within a workflow template\n\n3. Dependency Visualization:\n   - Generating a diagram to visualize dependencies between checklist items\n   - Handling external workflow dependencies\n\n4. Error Handling and User Feedback:\n   - Providing appropriate error messages and redirects on failed operations\n   - Confirming potentially destructive actions (e.g., deletion)\n\n5. Data Integrity:\n   - Ensuring proper relationships between governance templates, workflow templates, and checklist items\n   - Maintaining consistency when updating orders or deleting items\n\nThe business logic is primarily implemented in the controller functions, which handle the flow of data between the views and the API, applying the necessary transformations and checks to maintain the integrity of the workflow management system.",
      "dependencies": "The code has several external dependencies:\n\n1. Web Framework:\n   - Uses a Hapi.js-like server framework (implied by the use of `server.route` and handler functions)\n\n2. Template Engine:\n   - Nunjucks (`.njk` files are used for views)\n\n3. External API:\n   - Makes HTTP requests to an external API server for data operations\n   - Uses `fetch` for making API calls (likely requires a polyfill or is running in a Node.js environment with global fetch)\n\n4. Configuration Management:\n   - Uses a `config` object (imported from '~/src/config/config.js') for managing configuration settings\n\n5. Logging:\n   - Uses a logging system (accessed via `request.logger`)\n\n6. Frontend Libraries:\n   - Mermaid.js for generating dependency diagrams\n   - GOV.UK Frontend components (implied by the use of `govuk` prefixed macros in the templates)\n\n7. Static Asset Management:\n   - Uses `getAssetPath` function for resolving paths to static assets\n\nThe code relies heavily on these external services and libraries for its functionality, particularly the external API for data persistence and retrieval.",
      "configuration": "The code uses a configuration system, though the full details are not visible in the provided snippet. Key aspects of the configuration include:\n\n1. API Server URL:\n   - Accessed via `config.get('apiServer')`\n   - Used for constructing API endpoint URLs\n\n2. Environment-based Configuration:\n   - The use of a `config` object suggests that different environments (development, staging, production) might have different configurations\n\n3. Logging Configuration:\n   - The presence of `request.logger` implies a configured logging system\n\n4. View Engine Configuration:\n   - The use of Nunjucks templates suggests configuration for the view engine\n\n5. Static Asset Configuration:\n   - The `getAssetPath` function implies a configuration for managing static asset URLs\n\n6. Server Routes Configuration:\n   - Routes are defined with various options, including authentication settings (currently set to `false` for all routes)\n\nWhile the specific configuration files are not provided in the snippet, the code's usage of the `config` object and various implied configurations indicates a structured approach to managing application settings across different environments.",
      "infrastructure": "The code doesn't directly define infrastructure elements, but it implies certain infrastructure requirements:\n\n1. Web Server:\n   - The code is designed to run on a web server, likely Node.js, given the use of server-side JavaScript\n\n2. API Server:\n   - References to an external API server suggest a separate service for data persistence and business logic\n\n3. Static File Serving:\n   - The use of static assets (JavaScript, potentially CSS) implies a need for static file serving capabilities\n\n4. Environment Variables:\n   - The use of a configuration system suggests that environment variables might be used for sensitive or environment-specific settings\n\n5. Potential for Containerization:\n   - While not explicitly mentioned, the modular nature of the code and its dependencies would make it suitable for containerization (e.g., using Docker)\n\n6. Database:\n   - Although not directly visible in this code, the data models and API calls imply the existence of a database backend\n\n7. Frontend Build Process:\n   - The use of Nunjucks templates and references to asset paths suggest a build process for frontend assets\n\nWhile the code doesn't include explicit infrastructure-as-code or deployment configurations, it's structured in a way that would be compatible with modern deployment practices, including containerization and cloud-based hosting.",
      "non_functional": "The code exhibits several non-functional aspects:\n\n1. Error Handling:\n   - Comprehensive try-catch blocks for API calls and data processing\n   - User-friendly error messages displayed in the UI\n   - Logging of errors for debugging purposes\n\n2. Logging:\n   - Extensive use of logging throughout the code for tracking operations and errors\n   - Different log levels used (info, error) for appropriate categorization\n\n3. Security:\n   - Authentication is currently disabled for all routes (`auth: false`), which could be a security concern if not addressed\n   - No visible input sanitization or CSRF protection in the provided code\n\n4. Performance:\n   - Multiple API calls in some routes could impact performance, especially for the diagram view\n   - No visible caching mechanisms for API responses\n\n5. User Experience:\n   - Use of back links and confirmation steps for better navigation\n   - Clear error messages and validations for form inputs\n\n6. Maintainability:\n   - Modular code structure with separation of concerns (routes, controllers, views)\n   - Use of a template engine (Nunjucks) for easier view management\n\n7. Scalability:\n   - Separation of frontend and API suggests potential for scaling components independently\n   - No visible rate limiting or pagination for large datasets\n\n8. Accessibility:\n   - Use of GOV.UK Frontend components suggests some level of accessibility compliance\n   - ARIA labels used in some UI elements for better screen reader support\n\n9. Testing:\n   - Presence of `data-testid` attributes suggests preparation for frontend testing\n\nWhile the code addresses several non-functional requirements, there are areas (like security and performance optimization) that may need further attention depending on the specific deployment and usage context of the application."
    },
    {
      "chunk_id": "checklist_item_template_management",
      "summary": "This code chunk implements the management functionality for checklist item templates within a governance checklist system. It provides controllers and views for creating, reading, updating, and deleting (CRUD) checklist item templates, as well as managing their dependencies and order within workflows. The code handles the interaction between the user interface and the API, including error handling and data validation.",
      "data_model": "The code implies a data model for checklist item templates, but doesn't explicitly define it. Based on the API interactions and form fields, we can infer the following data model:\n\n```mermaid\nerDiagram\n    CHECKLIST_ITEM_TEMPLATE {\n        string _id\n        string name\n        string description\n        string type\n        array dependencies_requires\n        number order\n        string workflowTemplateId\n    }\n    WORKFLOW_TEMPLATE {\n        string _id\n        string name\n        string governanceTemplateId\n    }\n    GOVERNANCE_TEMPLATE {\n        string _id\n        string name\n    }\n    CHECKLIST_ITEM_TEMPLATE }o--|| WORKFLOW_TEMPLATE : belongs_to\n    WORKFLOW_TEMPLATE }o--|| GOVERNANCE_TEMPLATE : belongs_to\n    CHECKLIST_ITEM_TEMPLATE }o--o{ CHECKLIST_ITEM_TEMPLATE : depends_on\n```\n\nFields:\n- CHECKLIST_ITEM_TEMPLATE:\n  - _id: Unique identifier (string)\n  - name: Name of the checklist item (string)\n  - description: Description of the checklist item (string)\n  - type: Type of the checklist item (string, enum: \"approval\", \"document\", \"task\")\n  - dependencies_requires: Array of IDs of other checklist items this item depends on\n  - order: Numerical order of the item within its workflow (number)\n  - workflowTemplateId: ID of the workflow this item belongs to (string)\n\n- WORKFLOW_TEMPLATE:\n  - _id: Unique identifier (string)\n  - name: Name of the workflow (string)\n  - governanceTemplateId: ID of the governance template this workflow belongs to (string)\n\n- GOVERNANCE_TEMPLATE:\n  - _id: Unique identifier (string)\n  - name: Name of the governance template (string)\n\nThe code handles data validation and integrity checks when creating or updating checklist item templates, ensuring required fields are present and dependencies are properly formatted.",
      "interfaces": "The code defines several interfaces:\n\n1. User Interfaces (Views):\n   - New checklist item template form (/governance-templates/{governanceTemplateId}/workflows/{workflowTemplateId}/checklist-items/new)\n   - Edit checklist item template form (/checklist-item-templates/{id})\n   - Delete confirmation page (/checklist-item-templates/{id}/delete)\n\n2. API Endpoints:\n   - GET /checklist-item-templates/{id}: Fetch checklist item template details\n   - POST/PUT /checklist-item-templates/{id}: Update checklist item template\n   - GET /governance-templates/{governanceTemplateId}/workflows/{workflowTemplateId}/checklist-items/new: New checklist item template form\n   - POST /governance-templates/{governanceTemplateId}/workflows/{workflowTemplateId}/checklist-items: Create new checklist item template\n   - GET /checklist-item-templates/{id}/delete: Delete confirmation page\n   - POST /checklist-item-templates/{id}/delete: Delete checklist item template\n   - POST/PUT /api/v1/checklist-item-templates/{id}: Update checklist item template order\n\n3. External API Calls:\n   - GET /api/v1/checklist-item-templates/{id}: Fetch checklist item template\n   - GET /api/v1/workflow-templates/{id}: Fetch workflow template\n   - GET /api/v1/workflow-templates?governanceTemplateId={id}: Fetch workflows for a governance template\n   - GET /api/v1/checklist-item-templates?governanceTemplateId={id}: Fetch checklist items for a governance template\n   - POST /api/v1/checklist-item-templates: Create new checklist item template\n   - PUT /api/v1/checklist-item-templates/{id}: Update checklist item template\n   - DELETE /api/v1/checklist-item-templates/{id}: Delete checklist item template\n\nThe interfaces handle form submissions, data fetching, and API interactions for managing checklist item templates within the governance checklist system.",
      "business_logic": "The business logic in this code chunk focuses on managing checklist item templates within a governance checklist system. Key aspects include:\n\n1. CRUD operations for checklist item templates:\n   - Creating new templates with name, description, type, and dependencies\n   - Reading template details, including associated workflow and governance template information\n   - Updating existing templates, including their order within a workflow\n   - Deleting templates with confirmation\n\n2. Dependency management:\n   - Allowing users to select dependencies from other checklist items within the same governance template\n   - Ensuring dependencies are properly formatted and stored\n\n3. Workflow and governance template associations:\n   - Maintaining relationships between checklist items, workflows, and governance templates\n   - Fetching and displaying related information (e.g., workflow names) when managing checklist items\n\n4. Item type categorization:\n   - Categorizing checklist items as \"approval\", \"document\", or \"task\" types\n\n5. Order management:\n   - Allowing updates to the order of checklist items within a workflow\n\n6. Error handling and data validation:\n   - Validating user inputs and API responses\n   - Providing appropriate error messages and fallback behaviors\n\nThe business logic ensures that checklist item templates are properly managed within the context of their associated workflows and governance templates, maintaining data integrity and relationships throughout the system.",
      "dependencies": "The code has several external dependencies:\n\n1. Libraries and Frameworks:\n   - @hapi/hapi: Web framework for Node.js (implied by the plugin structure)\n   - @hapi/boom: HTTP-friendly error objects\n   - nunjucks: Templating engine for rendering views (implied by the .njk file extensions)\n\n2. External API Calls:\n   - Relies on an external API server for data operations, with the base URL stored in the configuration\n\n3. Configuration:\n   - Uses a configuration module (~/src/config/config.js) for accessing environment-specific settings\n\n4. Frontend Components:\n   - Uses GOV.UK Frontend components (e.g., govukButton, govukInput) for consistent UI styling\n\n5. Logging:\n   - Uses a logging system (request.logger) for tracking operations and errors\n\n6. HTTP Fetching:\n   - Uses the fetch API for making HTTP requests to the external API server\n\n7. JSON Parsing:\n   - Relies on JSON.parse and JSON.stringify for data manipulation\n\n8. Error Handling:\n   - Uses try-catch blocks for error handling and Boom for creating HTTP-friendly error responses\n\n9. Routing:\n   - Depends on the Hapi.js routing system for defining API endpoints and view handlers\n\nThese dependencies are crucial for the functioning of the checklist item template management system, handling everything from data fetching and manipulation to view rendering and error handling.",
      "configuration": "The code uses a configuration system, primarily accessed through the `config` object imported from '~/src/config/config.js'. Key configuration aspects include:\n\n1. API Server URL:\n   - Accessed via `config.get('apiServer')`\n   - Used for constructing API endpoint URLs for data operations\n\n2. Environment Variables:\n   - While not explicitly shown, the use of a `config` object suggests that environment variables are likely used to configure the application for different environments (development, staging, production)\n\n3. Logging Configuration:\n   - The code uses `request.logger` for logging, suggesting a configured logging system\n\n4. Route Configuration:\n   - The `index.js` file defines routes with various options, including authentication settings (currently set to `false` for all routes)\n\n5. View Engine Configuration:\n   - The use of `.njk` files indicates that Nunjucks is configured as the view engine\n\n6. Error Handling Configuration:\n   - The consistent use of try-catch blocks and error logging suggests a standardized approach to error handling\n\nWhile the code doesn't show explicit configuration files, the use of the `config` object and consistent patterns throughout the code implies a well-structured configuration system that likely includes environment-specific settings, API endpoints, logging levels, and other application-wide configurations.",
      "infrastructure": null,
      "non_functional": "The code includes several non-functional aspects:\n\n1. Error Handling:\n   - Extensive use of try-catch blocks to handle potential errors in API calls and data processing\n   - Fallback behaviors when data fetching fails, providing error messages to the user\n   - Use of Boom for creating HTTP-friendly error responses\n\n2. Logging:\n   - Consistent use of `request.logger` for logging information and errors\n   - Detailed logging of API calls, received data, and error conditions\n\n3. Performance Considerations:\n   - Fetching of related data (workflows, other checklist items) to populate dependency options\n   - Creation of lookup maps (e.g., workflowMap) to optimize data access\n\n4. Security:\n   - While not explicitly implemented, the route configurations include an `auth` option, suggesting the potential for authentication\n   - No direct exposure of internal API endpoints or sensitive configuration data to the client\n\n5. User Experience:\n   - Provision of back links for easy navigation\n   - Consistent error messaging and display\n   - Pre-populating forms with existing data for edit operations\n\n6. Data Validation:\n   - Client-side and server-side validation of form inputs\n   - Proper handling of array inputs (e.g., dependencies)\n\n7. Modularity and Maintainability:\n   - Separation of concerns between route definitions and controller logic\n   - Use of view templates for rendering HTML, separating presentation from logic\n\n8. Scalability:\n   - Use of external API for data operations, allowing for potential scaling of the backend independently of the frontend\n\nWhile the code demonstrates attention to these non-functional aspects, there's room for improvement in areas such as input sanitization, more robust error handling, and potentially implementing caching for frequently accessed data."
    },
    {
      "chunk_id": "layout_and_navigation",
      "summary": "This code chunk defines the layout and navigation components for a web application using the GOV.UK Design System. It includes a base page layout, navigation bar, and error page template. The layout extends the GOV.UK template, incorporating standard elements like header, footer, and breadcrumbs. The navigation component is customizable and styled to match the GOV.UK design. An error page template is also provided for displaying error messages.",
      "data_model": null,
      "interfaces": "# User Interfaces\n\n1. Base Page Layout (`src/server/common/templates/layouts/page.njk`)\n   - Extends the GOV.UK template\n   - Includes header with service name and navigation\n   - Provides slots for page title, content, and footer\n   - Incorporates breadcrumbs when applicable\n\n2. Navigation Bar (`src/server/common/templates/partials/navigation/navigation.njk`)\n   - Responsive navigation menu\n   - Customizable navigation items with active state\n\n3. Error Page (`src/server/error/index.njk`)\n   - Displays error heading and message\n   - Uses the base page layout\n\n# Styling\n- Custom SCSS for navigation (`src/server/common/templates/partials/navigation/_navigation.scss`)\n- Responsive design with tablet breakpoint\n- Follows GOV.UK design patterns and color scheme",
      "business_logic": null,
      "dependencies": "1. GOV.UK Frontend\n   - Uses GOV.UK template and components (e.g., `govuk/template.njk`, `govukHeader`, `govukFooter`, `govukBreadcrumbs`)\n   - Imports GOVUK SCSS mixins and variables\n\n2. Nunjucks templating engine\n   - Used for server-side rendering of templates (`.njk` files)\n\n3. Custom components\n   - `heading/macro.njk` for custom heading component\n\n4. Asset management\n   - Uses `getAssetPath` function for resolving asset URLs (CSS and JS)\n\n5. SCSS\n   - Uses SCSS for styling, particularly in the navigation component",
      "configuration": "1. Service Configuration\n   - `serviceName`: Name of the service, used in page title and header\n   - `serviceUrl`: URL for the service, used in header\n\n2. Navigation Configuration\n   - `navigation`: Array of navigation items with properties:\n     - `text`: Display text for the navigation item\n     - `url`: URL for the navigation item\n     - `isActive`: Boolean indicating if the item is currently active\n\n3. Breadcrumbs Configuration\n   - `breadcrumbs`: Array of breadcrumb items (optional)\n\n4. Page-specific Configuration\n   - `pageTitle`: Title for individual pages\n\n5. Asset Configuration\n   - Uses `getAssetPath` function to resolve paths for stylesheets and JavaScript files",
      "infrastructure": null,
      "non_functional": "1. Accessibility\n   - Uses GOV.UK Design System components, which are designed to meet accessibility standards\n   - Includes skip link in the GOV.UK template for keyboard navigation\n   - Provides an accessibility statement link in the footer\n\n2. Performance\n   - Uses server-side rendering with Nunjucks for faster initial page loads\n   - Loads CSS in the head and JavaScript at the end of the body for optimal rendering\n\n3. Maintainability\n   - Modular structure with separate files for layout, navigation, and error pages\n   - Uses Nunjucks macros and includes for reusable components\n   - Follows GOV.UK naming conventions and BEM methodology for CSS classes\n\n4. Responsive Design\n   - Navigation component adapts to different screen sizes (mobile and tablet+)\n   - Uses GOV.UK Frontend's responsive grid system\n\n5. Branding and Consistency\n   - Adheres to GOV.UK design patterns and color scheme\n   - Uses the Tudor Crown in the header (configurable)\n\n6. Error Handling\n   - Provides a template for displaying error messages (`error/index.njk`)\n\n7. Privacy and Compliance\n   - Includes links to privacy notice, cookies policy, and accessibility statement in the footer"
    },
    {
      "chunk_id": "documentation_and_configuration",
      "summary": "This code chunk contains project documentation and configuration files for the ai-sdlc-governance-frontend application. It includes a comprehensive README.md with setup instructions, development guidelines, and deployment information. The project uses Node.js, npm, and Docker for development and production environments. It also includes configuration for SonarCloud, Dependabot, and various scripts for local development and git management.",
      "data_model": null,
      "interfaces": null,
      "business_logic": null,
      "dependencies": "The project has the following dependencies:\n\n1. Node.js (>= v18)\n2. npm (>= v9)\n3. Redis (for server-side caching in production)\n4. Docker (for containerization)\n5. Catbox (for server-side caching)\n6. Undici (for HTTP requests with proxy support)\n7. LocalStack (for simulating AWS services locally)\n8. MongoDB (mentioned in Docker Compose setup)\n9. SonarCloud (for code quality and security analysis)\n10. Dependabot (for dependency management)\n\nExternal services:\n- AWS services (S3, SQS) simulated locally with LocalStack\n- GitHub Actions (for CI/CD)",
      "configuration": "Configuration details include:\n\n1. Environment variables:\n   - NODE_ENV: Sets the environment (development/production)\n   - LOG_LEVEL: Controls logging verbosity\n   - SESSION_CACHE_ENGINE: Configures the caching mechanism (redis/memory)\n\n2. Docker Compose configuration:\n   - Includes services for LocalStack, Redis, MongoDB, and the main application\n\n3. AWS configuration (for local development):\n   - AWS_REGION\n   - AWS_DEFAULT_REGION\n   - AWS_ACCESS_KEY_ID\n   - AWS_SECRET_ACCESS_KEY\n\n4. SonarCloud configuration:\n   - Defined in sonar-project.properties\n   - Includes project key, organization, and various analysis settings\n\n5. npm scripts:\n   - Defined in package.json (not visible in the provided chunk)\n   - Mentioned scripts: npm run dev, npm start\n\n6. Git configuration:\n   - Recommendation to set core.autocrlf to false on Windows\n\n7. Proxy configuration:\n   - Uses ProxyAgent from Undici for HTTP requests",
      "infrastructure": "Infrastructure elements include:\n\n1. Docker:\n   - Dockerfile with multi-stage build (development and production targets)\n   - Docker Compose for local development environment\n\n2. Cloud services:\n   - AWS services (S3, SQS) simulated locally with LocalStack\n   - Potential for actual AWS deployment (not explicitly defined)\n\n3. CI/CD:\n   - GitHub Actions mentioned for CI/CD pipelines\n   - SonarCloud integration for code quality and security analysis\n\n4. Local development environment:\n   - Scripts for starting development server and managing git repositories\n   - Docker Compose setup for local services (LocalStack, Redis, MongoDB)\n\n5. Caching:\n   - Redis used for server-side caching in production\n   - In-memory caching (CatboxMemory) for local development\n\n6. Proxy:\n   - Forward-proxy setup using Undici's ProxyAgent",
      "non_functional": "Non-functional aspects include:\n\n1. Security:\n   - SonarCloud integration for security analysis\n   - Proxy setup for HTTP requests\n\n2. Performance:\n   - Server-side caching using Redis or in-memory cache\n\n3. Reliability:\n   - Docker containerization for consistent environments\n\n4. Monitoring and Logging:\n   - LOG_LEVEL environment variable for controlling log verbosity\n\n5. Testing:\n   - Test inclusions and exclusions defined in SonarCloud configuration\n\n6. Code Quality:\n   - SonarCloud integration for code quality analysis\n   - Prettier for code formatting\n\n7. Dependency Management:\n   - Dependabot for automated dependency updates\n\n8. Compliance:\n   - Open Government Licence v3.0 for code licensing\n\n9. Scalability:\n   - Docker and Docker Compose setup for potential scaling\n\n10. Maintainability:\n    - Structured project layout\n    - Documentation for setup and development processes"
    }
  ],
  "report_sections": {
    "data_model": "# Data Model Report\n\n## Logical Data Models and Entities\n\nThe codebase reveals a hierarchical structure for managing AI project governance. The main entities identified are:\n\n1. GovernanceTemplate\n2. WorkflowTemplate\n3. ChecklistItemTemplate\n4. Project\n5. WorkflowInstance\n6. ChecklistItemInstance\n\nThese entities form a structure where GovernanceTemplates contain WorkflowTemplates, which in turn contain ChecklistItemTemplates. Projects use GovernanceTemplates and instantiate WorkflowInstances and ChecklistItemInstances based on the templates.\n\n## Mermaid ERD Diagram\n\n```mermaid\nerDiagram\n    GovernanceTemplate ||--o{ WorkflowTemplate : contains\n    WorkflowTemplate ||--o{ ChecklistItemTemplate : contains\n    ChecklistItemTemplate }o--o{ ChecklistItemTemplate : depends_on\n    Project ||--|| GovernanceTemplate : uses\n    Project ||--o{ WorkflowInstance : has\n    WorkflowInstance ||--o{ ChecklistItemInstance : contains\n    GovernanceTemplate {\n        string _id\n        string name\n        string version\n        string description\n    }\n    WorkflowTemplate {\n        string _id\n        string name\n        string description\n        int order\n        string governanceTemplateId\n    }\n    ChecklistItemTemplate {\n        string _id\n        string name\n        string description\n        string type\n        array dependencies_requires\n        array dependencies_requiredBy\n        int orderNumber\n        string workflowTemplateId\n    }\n    Project {\n        string _id\n        string name\n        string description\n        string governanceTemplateId\n    }\n    WorkflowInstance {\n        string _id\n        string name\n        int orderNumber\n        string projectId\n    }\n    ChecklistItemInstance {\n        string _id\n        string name\n        string type\n        string status\n        int orderNumber\n        string workflowInstanceId\n    }\n```\n\n## Detailed Breakdown of Models\n\n### GovernanceTemplate\n- _id: string (unique identifier)\n- name: string\n- version: string\n- description: string (optional)\n\nRelationships:\n- Contains multiple WorkflowTemplates\n\n### WorkflowTemplate\n- _id: string (unique identifier)\n- name: string\n- description: string (optional)\n- order: number (order within the governance template)\n- governanceTemplateId: string (reference to GovernanceTemplate)\n\nRelationships:\n- Belongs to a GovernanceTemplate\n- Contains multiple ChecklistItemTemplates\n\n### ChecklistItemTemplate\n- _id: string (unique identifier)\n- name: string\n- description: string\n- type: string (enum: \"approval\", \"document\", \"task\")\n- dependencies_requires: array of ChecklistItemTemplate references\n- dependencies_requiredBy: array of ChecklistItemTemplate references\n- orderNumber: number (order within the workflow)\n- workflowTemplateId: string (reference to WorkflowTemplate)\n\nRelationships:\n- Belongs to a WorkflowTemplate\n- Can depend on other ChecklistItemTemplates\n\n### Project\n- _id: string (unique identifier)\n- name: string\n- description: string\n- governanceTemplateId: string (reference to GovernanceTemplate)\n\nRelationships:\n- Uses a GovernanceTemplate\n- Has multiple WorkflowInstances\n\n### WorkflowInstance\n- _id: string (unique identifier)\n- name: string\n- orderNumber: number\n- projectId: string (reference to Project)\n\nRelationships:\n- Belongs to a Project\n- Contains multiple ChecklistItemInstances\n\n### ChecklistItemInstance\n- _id: string (unique identifier)\n- name: string\n- type: string\n- status: string\n- orderNumber: number\n- workflowInstanceId: string (reference to WorkflowInstance)\n\nRelationships:\n- Belongs to a WorkflowInstance\n\n## Data Flow and Transformations\n\nThe codebase doesn't directly interact with a database but instead uses an external API for data persistence and retrieval. The data flow typically involves:\n\n1. Fetching data from the API\n2. Transforming API responses into view-friendly formats\n3. Handling user inputs and form submissions\n4. Transforming user inputs into API-compatible formats\n5. Sending data back to the API for persistence\n\nSpecific transformations include:\n- Managing dependencies between ChecklistItemTemplates\n- Handling ordering of WorkflowTemplates and ChecklistItemTemplates\n- Converting between API data structures and form input structures\n\n## Data Validation and Integrity Checks\n\nThe codebase implements several validation and integrity checks:\n\n1. Form Validation:\n   - Ensures required fields are present (e.g., name, type for ChecklistItemTemplates)\n   - Validates the format of input data (e.g., dependencies are properly formatted)\n\n2. Dependency Management:\n   - Checks for circular dependencies between ChecklistItemTemplates\n   - Ensures dependencies are valid within the same WorkflowTemplate\n\n3. Order Management:\n   - Maintains correct ordering of WorkflowTemplates within GovernanceTemplates\n   - Maintains correct ordering of ChecklistItemTemplates within WorkflowTemplates\n\n4. Type Checking:\n   - Ensures ChecklistItemTemplate types are valid (e.g., \"approval\", \"document\", \"task\")\n\n5. Relationship Integrity:\n   - Validates that referenced entities exist (e.g., WorkflowTemplate exists when creating a ChecklistItemTemplate)\n\nThese checks are performed both on the client-side before sending requests to the API and are likely reinforced on the server-side (though server-side validation is not visible in the provided frontend code).",
    "interfaces": "# Interfaces Report\n\n## User Interfaces (UI)\n\n1. Home Page\n   - Path: `/`\n   - Description: Displays a welcome message and a \"View Projects\" button\n\n2. About Page\n   - Path: `/about`\n   - Description: Provides information about the service with a two-column layout\n\n3. Projects Management\n   - Project List: `/projects`\n   - New Project Form: `/projects/new`\n   - Project Details: `/projects/{id}`\n   - Project Deletion Confirmation: `/projects/{id}/delete`\n   - Project Dependencies Diagram: `/projects/{id}/diagram`\n\n4. Governance Templates\n   - List Templates: `/governance-templates`\n   - Create New Template: `/governance-templates/new`\n   - Template Details: `/governance-templates/{id}`\n   - Template Dependencies Diagram: `/governance-templates/{id}/diagram`\n   - Delete Template Confirmation: `/governance-templates/{id}/delete`\n\n5. Workflow Templates\n   - New Workflow Template Form: `/governance-templates/{governanceTemplateId}/workflows/new`\n   - Workflow Template Details: `/workflow-templates/{id}`\n   - Workflow Template Delete Confirmation: `/workflow-templates/{id}/delete`\n   - Workflow Dependencies Diagram: `/governance-templates/{governanceTemplateId}/workflows/{id}/diagram`\n\n6. Checklist Item Templates\n   - New Checklist Item Form: `/governance-templates/{governanceTemplateId}/workflows/{workflowTemplateId}/checklist-items/new`\n   - Edit Checklist Item Form: `/checklist-item-templates/{id}`\n   - Delete Confirmation: `/checklist-item-templates/{id}/delete`\n\n7. Error Pages\n   - Various error pages (404 Not Found, 403 Forbidden, 401 Unauthorized, 400 Bad Request, 500 Internal Server Error)\n\n## API Endpoints\n\n1. Health Check\n   - GET `/health`\n   - Response: `{ message: 'success' }`\n   - Status code: 200 OK\n\n2. Projects\n   - GET `/api/v1/projects`: Retrieve all projects\n   - GET `/api/v1/projects/{id}`: Retrieve a specific project\n   - POST `/api/v1/projects`: Create a new project\n   - DELETE `/api/v1/projects/{id}`: Delete a project\n\n3. Governance Templates\n   - GET `/api/v1/governance-templates`: List all governance templates\n   - GET `/api/v1/governance-templates/{id}`: Get specific governance template\n   - POST `/api/v1/governance-templates`: Create new governance template\n   - DELETE `/api/v1/governance-templates/{id}`: Delete governance template\n\n4. Workflow Templates\n   - GET `/api/v1/workflow-templates`: Retrieve workflow templates for a governance template\n   - GET `/api/v1/workflow-templates/{id}`: Retrieve workflow template details\n   - POST `/api/v1/workflow-templates`: Create a new workflow template\n   - DELETE `/api/v1/workflow-templates/{id}`: Delete a workflow template\n   - PUT `/api/v1/workflow-templates/{id}`: Update workflow template order\n   - PATCH `/api/v1/workflow-templates/{id}/reorder`: Reorder workflow within a governance template\n\n5. Workflow Instances\n   - GET `/api/v1/workflow-instances`: Retrieve workflow instances for a project\n\n6. Checklist Item Templates\n   - GET `/api/v1/checklist-item-templates`: Retrieve checklist items for a workflow\n   - POST `/api/v1/checklist-item-templates`: Create new checklist item template\n   - PUT `/api/v1/checklist-item-templates/{id}`: Update checklist item template\n   - DELETE `/api/v1/checklist-item-templates/{id}`: Delete checklist item template\n\n7. Checklist Item Instances\n   - GET `/api/v1/checklist-item-instances`: Retrieve checklist items for a workflow instance\n   - PUT `/api/v1/checklist-item-instances/{id}`: Update a checklist item's status\n\n## Static File Serving\n\n- The application serves static files from the `.public` directory\n- Favicon: GET `/favicon.ico`\n- Static Assets: GET `${config.get('assetPath')}/{param*}`\n\n## Session Management\n\n- The application uses Hapi-yar for session management\n- Supports both in-memory and Redis-based session storage\n\n## Logging\n\n- Uses Pino for logging\n- Supports development (pretty-printed) and production (ECS format) logging\n\nThis report covers the main external interfaces exposed by the codebase, including user interfaces, API endpoints, and other relevant interfaces. Internal implementation details have been excluded.",
    "business_logic": "# Business Logic Report\n\n## Core Business Rules and Domain Logic\n\nThe codebase implements a governance checklist tool with the following core business rules and domain logic:\n\n1. Governance Templates: These are the top-level structures that contain workflows and checklist items. They represent standardized governance processes across projects.\n\n2. Workflow Templates: These are collections of related checklist items within a governance template. They can be ordered and reordered within the template.\n\n3. Checklist Item Templates: These are individual tasks, approvals, or documents that need to be completed as part of a workflow. They can have dependencies on other checklist items.\n\n4. Projects: These are instances of governance templates applied to specific initiatives. They contain workflow instances and checklist items derived from the templates.\n\n5. Dependencies: Checklist items can have dependencies on other items, creating a hierarchical structure within workflows.\n\n6. Item Types: Checklist items are categorized as \"approval\", \"document\", or \"task\" types, each potentially requiring different handling.\n\n7. Ordering: Both workflows within governance templates and checklist items within workflows have a specific order that can be managed.\n\n## Business Process Flows\n\nThe main business process flows in the application include:\n\n1. Governance Template Creation and Management:\n   - Create new templates with name, version, and description\n   - Associate workflows with templates\n   - Manage the order of workflows within templates\n   - View and delete existing templates\n\n2. Workflow Template Management:\n   - Create new workflow templates within governance templates\n   - Associate checklist items with workflows\n   - Manage the order of checklist items within workflows\n   - View and delete existing workflow templates\n\n3. Checklist Item Template Management:\n   - Create new checklist item templates with name, description, type, and dependencies\n   - Associate checklist items with workflow templates\n   - Manage dependencies between checklist items\n   - View, update, and delete existing checklist item templates\n\n4. Project Management:\n   - Create new projects based on governance templates\n   - Instantiate workflows and checklist items for specific projects\n   - Track the status of checklist items within project workflows\n   - View and manage existing projects\n\n5. Dependency Visualization:\n   - Generate diagrams to visualize relationships between templates, workflows, and checklist items\n\n## Business Rules\n\nKey business rules implemented in the system include:\n\n1. Governance templates must have a unique name and version combination.\n2. Workflows must be associated with a governance template.\n3. Checklist items must be associated with a workflow template.\n4. Checklist item dependencies can only be established within the same governance template.\n5. Projects must be based on an existing governance template.\n6. Checklist item statuses (complete/incomplete) can only be updated within the context of a project.\n7. Deletion of templates, workflows, or checklist items requires user confirmation to prevent accidental data loss.\n8. The order of workflows within templates and checklist items within workflows must be maintained and updatable.\n\n## Separation of Concerns between Business Logic and Other Layers\n\nThe codebase demonstrates a clear separation of concerns:\n\n1. Presentation Layer:\n   - Nunjucks templates handle the view rendering\n   - Client-side JavaScript manages user interactions and form validations\n\n2. Business Logic Layer:\n   - Controller functions implement the core business logic\n   - Helper functions (e.g., for navigation building, date formatting) support the business logic\n\n3. Data Access Layer:\n   - API calls are used to interact with the backend services\n   - Data transformations are performed in the controller functions\n\n4. Error Handling:\n   - Consistent error handling and user feedback mechanisms are implemented across layers\n\nThis separation allows for easier maintenance, testing, and potential future refactoring of the application.\n\n## Domain-Driven Design Patterns\n\nWhile not explicitly following all Domain-Driven Design (DDD) patterns, the codebase exhibits some DDD-inspired structures:\n\n1. Aggregates:\n   - Governance templates act as aggregate roots, containing workflows and checklist items\n   - Projects are also aggregate roots, containing instances of workflows and checklist items\n\n2. Entities:\n   - Governance templates, workflows, checklist items, and projects are all treated as entities with unique identifiers\n\n3. Value Objects:\n   - Date and currency formatting functions suggest the use of value objects for these concepts\n\n4. Repositories:\n   - While not explicitly shown, the API calls suggest the presence of repository-like structures for data access\n\n5. Services:\n   - The controller functions act as application services, orchestrating the business logic\n\n6. Ubiquitous Language:\n   - The codebase uses consistent terminology (e.g., \"governance template\", \"workflow\", \"checklist item\") throughout, suggesting an attempt at a ubiquitous language\n\nTo fully embrace DDD, the codebase could benefit from more explicit domain modeling and potentially introducing domain events for better decoupling of business processes.",
    "dependencies": "# Dependencies Report\n\n## External Dependencies (Libraries and Frameworks)\n\n1. Node.js (v22+ or >= v18)\n2. npm (>= v9)\n3. Hapi (v21.3.12): Web framework for Node.js\n4. Nunjucks (v3.2.4): Templating engine\n5. Convict (v6.2.4): Configuration management\n6. Pino (v9.5.0): Logging library\n7. Redis (via ioredis v5.4.1): For session storage in production\n8. Webpack (v5.96.1): Asset bundling and build tool\n9. Babel (v7.26.0): JavaScript compiler\n10. ESLint (v8.57.0): Linting tool\n11. Jest (v29.7.0): Testing framework\n12. TypeScript (v5.6.3): Type checking\n13. Prettier (v3.3.3): Code formatting\n14. @hapi/catbox-redis: Redis-based caching\n15. @hapi/catbox-memory: In-memory caching\n16. @hapi/yar: Hapi plugin for session management\n17. @elastic/ecs-pino-format: Elastic Common Schema log formatting\n18. hapi-pino: Hapi plugin for request logging\n19. aws-embedded-metrics: Metrics collection\n20. hapi-pulse: Graceful server shutdown\n21. @hapi/vision: Hapi plugin for view rendering\n22. date-fns: Date manipulation library\n23. lodash: Utility library\n24. cheerio: HTML parsing library (used in tests)\n25. govuk-frontend: Government Digital Service (GDS) design system\n26. Mermaid.js: Diagramming and charting library\n27. @hapi/boom: HTTP-friendly error objects\n28. Undici: HTTP/1.1 client with proxy support\n29. global-agent: Global proxy configuration\n\n## API Calls and External Services\n\n1. Backend API server: Configured through the `API_SERVER` environment variable\n   - Endpoints:\n     - /api/v1/projects\n     - /api/v1/governance-templates\n     - /api/v1/workflow-templates\n     - /api/v1/workflow-instances\n     - /api/v1/checklist-item-instances\n2. LocalStack: For simulating AWS services locally (S3, SQS)\n3. MongoDB: Database (configured in docker-compose)\n4. Redis: For server-side caching in production\n5. SonarCloud: Code quality and security analysis\n6. GitHub Actions: CI/CD pipeline\n\n## Database Connections and ORM Usage\n\n1. MongoDB: Configured in docker-compose, but no direct usage in the provided code\n2. Redis: Used for session storage and caching, accessed via ioredis client\n\n## Third-Party Integrations\n\n1. GOV.UK Design System: For UI components and styling\n2. DEFRA Frontend: Implied usage for DEFRA best practices and software development standards\n3. Dependabot: For dependency management\n4. Docker: For containerization\n\n## Other External Dependencies\n\n1. Git: Version control system\n2. Husky: For pre-commit hooks\n\n## Versioning and Compatibility Considerations\n\n1. Node.js version compatibility: The project requires Node.js v22+ or >= v18, which may impact the compatibility of other dependencies.\n2. API version compatibility: The frontend communicates with a backend API (v1), which suggests the need for version management between frontend and backend services.\n3. Redis version compatibility: Ensure the Redis server version is compatible with the ioredis client (v5.4.1) being used.\n4. Browser compatibility: As a frontend application, consider the target browsers and ensure compatibility with the used JavaScript features and CSS styles.\n5. GOV.UK Frontend version: Keep track of the GOV.UK Design System version to ensure consistency with government standards and guidelines.\n6. Hapi ecosystem: Many plugins and extensions are from the Hapi ecosystem (e.g., @hapi/catbox-redis, @hapi/yar). Ensure version compatibility across these related packages.\n7. Testing framework: Jest (v29.7.0) is used for testing. Ensure all test utilities and mocks are compatible with this version.\n8. Webpack and Babel: As build tools, their versions (Webpack v5.96.1, Babel v7.26.0) may affect the compatibility of various plugins and loaders used in the build process.\n9. TypeScript: The use of TypeScript (v5.6.3) may require specific consideration for type definitions and compatibility with other libraries.\n10. LocalStack: Ensure the LocalStack version used for local development matches the AWS services versions used in production as closely as possible.\n\nRegular updates and thorough testing are recommended to maintain compatibility and security across all dependencies. Use of a dependency management tool like Dependabot can help automate this process.",
    "configuration": "# Configuration Report\n\n## Configuration Files\n\n1. **Main Configuration** (`src/config/config.js`)\n   - Uses Convict for configuration management\n\n2. **Build Configuration**\n   - `babel.config.cjs`: Babel configuration for transpilation\n   - `webpack.config.js`: Webpack configuration for asset bundling\n   - `postcss.config.js`: PostCSS configuration for CSS processing\n   - `stylelint.config.js`: Stylelint configuration for CSS linting\n   - `tsconfig.json`: TypeScript configuration\n   - `jest.config.js`: Jest configuration for testing\n\n3. **Docker Configuration**\n   - `Dockerfile`: Multi-stage Docker build for development and production\n   - `compose.yml`: Docker Compose configuration for local development setup\n\n4. **SonarCloud Configuration**\n   - `sonar-project.properties`: Includes project key, organization, and various analysis settings\n\n## Configuration Variables\n\n1. **Main Application Settings**\n   - `port`: Server port (default: 3000)\n   - `env`: Application environment (production, development, test)\n   - `serviceName`: Application name\n   - `serviceUrl`: URL for the service, used in header\n\n2. **Logging Configuration**\n   - `log.level`: Log level\n   - `log.format`: Log format\n   - `log.redaction`: Paths for log redaction\n\n3. **Session Management**\n   - `session.cache.engine`: Cache engine for session storage (redis/memory)\n   - `session.cache.name`: Name of the cache\n   - `session.cache.ttl`: Time-to-live for cache entries\n   - `session.cookie.password`: Password for cookie encryption\n   - `session.cookie.ttl`: Time-to-live for cookies\n   - `session.cookie.secure`: Boolean to set secure flag on cookies\n\n4. **Redis Configuration**\n   - `redis.host`: Redis server host\n   - `redis.username`: Redis username (optional)\n   - `redis.password`: Redis password (optional)\n   - `redis.keyPrefix`: Prefix for Redis keys\n   - `redis.useSingleInstanceCache`: Boolean to determine if single instance or cluster is used\n   - `redis.useTLS`: Boolean to enable TLS for Redis connection\n\n5. **Nunjucks Template Engine**\n   - `nunjucks.watch`: Boolean to enable watch mode\n   - `nunjucks.noCache`: Boolean to disable caching\n\n6. **API Server**\n   - `apiServer`: Backend API server URL\n\n7. **Asset Management**\n   - `assetPath`: Base path for serving static assets\n   - `staticCacheTimeout`: Expiration time for static asset caching\n\n8. **Metrics**\n   - Toggle for enabling/disabling metrics collection\n\n9. **Security**\n   - `isSecureContextEnabled`: Boolean flag to enable/disable custom secure context\n\n10. **Proxy**\n    - `httpProxy`: URL for the HTTP proxy\n\n11. **Mermaid.js Configuration**\n    - Settings for flowchart rendering (theme, security level, etc.)\n\n## Environment Variables\n\n1. `NODE_ENV`: Application environment (production, development, test)\n2. `PORT`: Server port\n3. `REDIS_HOST`: Redis host for session storage\n4. `API_SERVER`: Backend API server URL\n5. `LOG_LEVEL`: Controls logging verbosity\n6. `SESSION_CACHE_ENGINE`: Configures the caching mechanism (redis/memory)\n7. `TRUSTSTORE_*`: Used to store base64-encoded SSL/TLS certificates\n8. `HTTP_PROXY`: Used to set up a global HTTP proxy\n\n### AWS Configuration (for local development)\n9. `AWS_REGION`\n10. `AWS_DEFAULT_REGION`\n11. `AWS_ACCESS_KEY_ID`\n12. `AWS_SECRET_ACCESS_KEY`\n\n## Secrets Management and Sensitive Data Handling\n\n1. **Environment Variables**\n   - Sensitive data like API keys, passwords, and certificates are stored as environment variables\n   - SSL/TLS certificates are stored as base64-encoded strings in `TRUSTSTORE_*` environment variables\n\n2. **Configuration System**\n   - Uses a centralized configuration system (likely Convict) to manage sensitive data\n   - Accessed through methods like `config.get()` and `config.set()`\n\n3. **Redis Security**\n   - Optional username and password for Redis authentication\n   - TLS support for secure Redis connections\n\n4. **Session Security**\n   - Configurable cookie settings including encryption password and secure flag\n\n5. **Production Mode**\n   - Different configurations for development and production environments\n   - Production mode enables additional security measures\n\n6. **Proxy Configuration**\n   - Uses ProxyAgent from Undici for secure HTTP requests\n\n7. **Git Configuration**\n   - Recommendation to set `core.autocrlf` to false on Windows to prevent sensitive data leaks\n\nBy utilizing environment variables, a centralized configuration system, and environment-specific settings, the application aims to keep sensitive data secure and separate from the codebase.",
    "infrastructure": "# Infrastructure Report\n\n## Deployment Configuration and Infrastructure as Code (IaC)\n\nThe project utilizes Docker for containerization and Docker Compose for local development environment setup. While explicit Infrastructure as Code (IaC) tools like Terraform or CloudFormation are not directly mentioned, the presence of Docker configurations suggests a containerized approach to deployment.\n\nKey components:\n- Dockerfile with multi-stage builds for development and production\n- Docker Compose file (`compose.yml`) for local development environment\n- Configuration management using environment variables and a dedicated configuration module\n\n## Deployment and Environment Setup\n\nThe application is designed for deployment in a containerized environment, likely using Kubernetes or a similar orchestration platform. The setup includes:\n\n1. Web Server:\n   - Node.js-based application using the Hapi.js framework\n   - Configured to serve static files and handle server-side rendering with Nunjucks templates\n\n2. API Server:\n   - Separate API server, indicating a microservices architecture or decoupled backend/frontend setup\n\n3. Database:\n   - MongoDB included in the local development setup\n   - Actual database usage in production is not explicitly defined in the provided code\n\n4. Caching:\n   - Redis used for server-side caching in production\n   - In-memory caching (CatboxMemory) for local development\n\n5. Environment Separation:\n   - Configuration module suggests different settings for development, staging, and production environments\n\n6. Static Asset Management:\n   - SASS files compiled into CSS\n   - Client-side JavaScript for GOV.UK Frontend components\n   - Build process mentioned in package.json postinstall hook\n\n7. Proxy:\n   - Forward-proxy setup using Undici's ProxyAgent\n\n## Cloud Services Integration\n\nWhile the production cloud environment is not explicitly defined, the application is designed to work with cloud services:\n\n1. AWS Services:\n   - LocalStack used to simulate AWS services (S3, SQS) in the local development environment\n   - Suggests potential use of actual AWS services in production\n\n2. Scalability:\n   - The separation of frontend and API services indicates design for potential horizontal scaling\n\n## Containerization and Orchestration\n\nThe application is fully containerized:\n\n1. Docker:\n   - Multi-stage Dockerfile for both development and production builds\n   - Development stage based on `defradigital/node-development:latest-22`\n   - Production stage based on `defradigital/node:latest-22`\n\n2. Docker Compose:\n   - Used for local development environment\n   - Includes services for LocalStack, Redis, MongoDB, and the frontend application\n\n3. Orchestration:\n   - While not explicitly mentioned, the containerized nature of the application suggests it's prepared for orchestration platforms like Kubernetes\n\n## CI/CD Pipeline Setup\n\nThe project includes elements indicating a CI/CD pipeline:\n\n1. GitHub Actions:\n   - Mentioned in the Jest configuration, suggesting its use for continuous integration\n   - Specific pipeline configuration not provided in the given code\n\n2. Testing:\n   - Jest used for server-side testing\n   - Test server setup available for integration tests\n\n3. Code Quality and Security:\n   - SonarCloud integration mentioned for code quality and security analysis\n\n4. Build Process:\n   - NPM scripts for building the application\n   - Likely integrated into the CI/CD pipeline for automated builds\n\nWhile the complete CI/CD configuration is not provided, these elements suggest a robust pipeline for continuous integration, testing, and potentially automated deployment.",
    "non_functional": "# Non-Functional Aspects Report\n\n## Performance and Reliability Aspects\n\n1. **Caching Mechanisms:**\n   - Redis-based session caching for improved performance in production\n   - Configurable static asset caching with timeout settings\n   - Server-side caching using Redis or in-memory cache\n\n2. **Frontend Optimization:**\n   - Asset bundling and minification using Webpack\n   - CSS loaded in the head and JavaScript at the end of the body for optimal rendering\n   - Server-side rendering with Nunjucks for faster initial page loads\n\n3. **Backend Performance:**\n   - Support for Redis Cluster for high availability and better performance in distributed environments\n   - Efficient buffer operations for certificate handling\n\n4. **Reliability Features:**\n   - Health check endpoint for monitoring application status\n   - Graceful server shutdown using hapi-pulse plugin with configurable timeout\n   - Unhandled rejection handling for improved error resilience\n   - Docker containerization for consistent environments\n\n5. **Scalability:**\n   - Containerized application design for easy scaling and deployment\n   - Support for clustered environments (implied by Redis session storage)\n   - Separation of frontend and API allows for independent scaling\n\n6. **Potential Performance Issues:**\n   - Multiple API calls for each request in project management\n   - Client-side rendering of complex diagrams using Mermaid.js may affect performance on large projects\n   - No evident caching mechanisms for API responses in some areas\n\n## Security Considerations and Potential Vulnerabilities\n\n1. **Implemented Security Measures:**\n   - HTTPS and HSTS configuration in Hapi server setup\n   - Secure session management with configurable cookie settings\n   - Content Security Policy (CSP) headers\n   - XSS protection enabled\n   - CSRF protection (implied by the use of Hapi)\n   - Custom secure context for HTTPS connections\n   - SSL/TLS certificate management through environment variables\n\n2. **Authentication and Authorization:**\n   - Secure cookie options with encryption passwords\n   - Support for TLS in Redis connections\n   - Authentication currently disabled for some routes (`auth: false`), which needs to be addressed\n\n3. **Input Validation and Sanitization:**\n   - Client-side validation implemented, but server-side validation should be enhanced\n\n4. **Security Analysis:**\n   - SonarCloud integration for ongoing security analysis\n\n5. **Potential Vulnerabilities:**\n   - Lack of explicit CSRF protection in some form submissions\n   - Absence of rate limiting or pagination for large datasets\n   - No evident input sanitization in some areas\n\n## Volume and Load Considerations\n\n1. **Scalability Features:**\n   - Redis Cluster support for handling high loads\n   - Containerized application design for easy horizontal scaling\n\n2. **Potential Bottlenecks:**\n   - Multiple API calls for complex projects with many workflows and checklist items\n   - Client-side rendering of complex diagrams may impact performance under high load\n\n3. **Load Distribution:**\n   - Separation of frontend and API allows for independent scaling of components\n\n4. **Caching Strategies:**\n   - Redis-based caching for sessions and data\n   - Static asset caching with configurable timeouts\n\n## Significant Error Handling and Recovery Mechanisms\n\n1. **Global Error Handling:**\n   - Centralized error handling with the catchAll function\n   - Custom error pages for different HTTP status codes\n\n2. **API and Data Processing Errors:**\n   - Comprehensive try-catch blocks for API calls and data processing\n   - Graceful error display to users with fallback behaviors\n\n3. **Logging of Errors:**\n   - Error stack logging for 5xx errors\n   - Use of structured logging for easier error analysis\n\n4. **Client-Side Error Handling:**\n   - Progressive enhancement in forms with fallback for non-JavaScript environments\n\n5. **Recovery Mechanisms:**\n   - Graceful degradation when data cannot be fetched, showing empty states or error messages\n\n## Logging, Monitoring, and Alerting\n\n1. **Logging Infrastructure:**\n   - Structured logging using Pino with Elastic Common Schema (ECS) format\n   - Request logging with hapi-pino\n   - Configurable log redaction for sensitive data\n   - Different log levels (info, error) for appropriate categorization\n\n2. **Monitoring:**\n   - Health check endpoint for monitoring application status\n   - Metrics collection using AWS Embedded Metrics\n\n3. **Tracing:**\n   - Trace ID inclusion in logs for request tracing\n   - Support for distributed tracing\n\n4. **Alerting:**\n   - While not explicitly mentioned, the logging and monitoring setup provides a foundation for implementing alerting systems\n\n5. **Configurability:**\n   - LOG_LEVEL environment variable for controlling log verbosity\n\n## Compliance Considerations\n\n1. **Government Standards:**\n   - Adherence to GOV.UK design standards and components\n   - Compliance with UK government digital standards\n\n2. **Accessibility Compliance:**\n   - Use of GOV.UK Design System components, designed to meet accessibility standards\n   - Inclusion of accessibility statement and skip links for keyboard navigation\n\n3. **Data Protection:**\n   - Configurable log redaction for sensitive data\n   - Links to privacy notice and cookies policy in the footer\n\n4. **Licensing:**\n   - Open Government Licence v3.0 for code licensing\n\n5. **Security Standards:**\n   - Implementation of security headers and HTTPS configuration\n\n## Data and Privacy Considerations\n\n1. **Data Protection:**\n   - Configurable log redaction for sensitive information\n   - Secure session management with encrypted cookies\n\n2. **User Privacy:**\n   - Inclusion of privacy notice and cookies policy links\n   - Use of 'private' cache setting for static assets\n\n3. **Data Handling:**\n   - Server-side rendering to minimize exposure of sensitive data to the client\n   - Careful management of API responses to prevent data leakage\n\n4. **Consent Management:**\n   - While not explicitly mentioned, the footer links suggest a framework for managing user consent and privacy preferences\n\n## Testing Strategies and Code Coverage\n\n1. **Testing Frameworks:**\n   - Jest setup for unit and integration testing\n   - Server injection used for testing HTTP endpoints\n\n2. **Test Coverage:**\n   - Test coverage reporting configured\n   - SonarCloud integration for code quality and coverage analysis\n\n3. **Types of Tests:**\n   - Unit tests for individual components and functions\n   - Integration tests for API endpoints and server setup\n   - Mocking of external dependencies in tests\n\n4. **Frontend Testing:**\n   - Presence of `data-testid` attributes suggests preparation for frontend testing\n\n5. **Continuous Integration:**\n   - Integration with SonarCloud for ongoing code quality and security analysis\n\n6. **Areas for Improvement:**\n   - Expansion of test coverage for complex user interactions\n   - Implementation of end-to-end testing for critical user journeys\n\nThis report provides a comprehensive overview of the non-functional aspects of the codebase, highlighting both strengths and areas for potential improvement across various dimensions of software quality and operational excellence."
  },
  "consolidated_report": "# Code Analysis Report\n\n## Repository Information\n- **Repository URL:** https://github.com/DEFRA/ai-sdlc-governance-frontend\n- **Languages Used:** javascript\n\n## 1. Data Model Report\n\n### 1.1. Logical Data Models and Entities\n\nThe codebase reveals a hierarchical structure for managing AI project governance. The main entities identified are:\n\n1. GovernanceTemplate\n2. WorkflowTemplate\n3. ChecklistItemTemplate\n4. Project\n5. WorkflowInstance\n6. ChecklistItemInstance\n\nThese entities form a structure where GovernanceTemplates contain WorkflowTemplates, which in turn contain ChecklistItemTemplates. Projects use GovernanceTemplates and instantiate WorkflowInstances and ChecklistItemInstances based on the templates.\n\n### 1.2. Mermaid ERD Diagram\n\n```mermaid\nerDiagram\n    GovernanceTemplate ||--o{ WorkflowTemplate : contains\n    WorkflowTemplate ||--o{ ChecklistItemTemplate : contains\n    ChecklistItemTemplate }o--o{ ChecklistItemTemplate : depends_on\n    Project ||--|| GovernanceTemplate : uses\n    Project ||--o{ WorkflowInstance : has\n    WorkflowInstance ||--o{ ChecklistItemInstance : contains\n    GovernanceTemplate {\n        string _id\n        string name\n        string version\n        string description\n    }\n    WorkflowTemplate {\n        string _id\n        string name\n        string description\n        int order\n        string governanceTemplateId\n    }\n    ChecklistItemTemplate {\n        string _id\n        string name\n        string description\n        string type\n        array dependencies_requires\n        array dependencies_requiredBy\n        int orderNumber\n        string workflowTemplateId\n    }\n    Project {\n        string _id\n        string name\n        string description\n        string governanceTemplateId\n    }\n    WorkflowInstance {\n        string _id\n        string name\n        int orderNumber\n        string projectId\n    }\n    ChecklistItemInstance {\n        string _id\n        string name\n        string type\n        string status\n        int orderNumber\n        string workflowInstanceId\n    }\n```\n\n### 1.3. Detailed Breakdown of Models\n\n#### GovernanceTemplate\n- _id: string (unique identifier)\n- name: string\n- version: string\n- description: string (optional)\n\nRelationships:\n- Contains multiple WorkflowTemplates\n\n#### WorkflowTemplate\n- _id: string (unique identifier)\n- name: string\n- description: string (optional)\n- order: number (order within the governance template)\n- governanceTemplateId: string (reference to GovernanceTemplate)\n\nRelationships:\n- Belongs to a GovernanceTemplate\n- Contains multiple ChecklistItemTemplates\n\n#### ChecklistItemTemplate\n- _id: string (unique identifier)\n- name: string\n- description: string\n- type: string (enum: \"approval\", \"document\", \"task\")\n- dependencies_requires: array of ChecklistItemTemplate references\n- dependencies_requiredBy: array of ChecklistItemTemplate references\n- orderNumber: number (order within the workflow)\n- workflowTemplateId: string (reference to WorkflowTemplate)\n\nRelationships:\n- Belongs to a WorkflowTemplate\n- Can depend on other ChecklistItemTemplates\n\n#### Project\n- _id: string (unique identifier)\n- name: string\n- description: string\n- governanceTemplateId: string (reference to GovernanceTemplate)\n\nRelationships:\n- Uses a GovernanceTemplate\n- Has multiple WorkflowInstances\n\n#### WorkflowInstance\n- _id: string (unique identifier)\n- name: string\n- orderNumber: number\n- projectId: string (reference to Project)\n\nRelationships:\n- Belongs to a Project\n- Contains multiple ChecklistItemInstances\n\n#### ChecklistItemInstance\n- _id: string (unique identifier)\n- name: string\n- type: string\n- status: string\n- orderNumber: number\n- workflowInstanceId: string (reference to WorkflowInstance)\n\nRelationships:\n- Belongs to a WorkflowInstance\n\n### 1.4. Data Flow and Transformations\n\nThe codebase doesn't directly interact with a database but instead uses an external API for data persistence and retrieval. The data flow typically involves:\n\n1. Fetching data from the API\n2. Transforming API responses into view-friendly formats\n3. Handling user inputs and form submissions\n4. Transforming user inputs into API-compatible formats\n5. Sending data back to the API for persistence\n\nSpecific transformations include:\n- Managing dependencies between ChecklistItemTemplates\n- Handling ordering of WorkflowTemplates and ChecklistItemTemplates\n- Converting between API data structures and form input structures\n\n### 1.5. Data Validation and Integrity Checks\n\nThe codebase implements several validation and integrity checks:\n\n1. Form Validation:\n   - Ensures required fields are present (e.g., name, type for ChecklistItemTemplates)\n   - Validates the format of input data (e.g., dependencies are properly formatted)\n\n2. Dependency Management:\n   - Checks for circular dependencies between ChecklistItemTemplates\n   - Ensures dependencies are valid within the same WorkflowTemplate\n\n3. Order Management:\n   - Maintains correct ordering of WorkflowTemplates within GovernanceTemplates\n   - Maintains correct ordering of ChecklistItemTemplates within WorkflowTemplates\n\n4. Type Checking:\n   - Ensures ChecklistItemTemplate types are valid (e.g., \"approval\", \"document\", \"task\")\n\n5. Relationship Integrity:\n   - Validates that referenced entities exist (e.g., WorkflowTemplate exists when creating a ChecklistItemTemplate)\n\nThese checks are performed both on the client-side before sending requests to the API and are likely reinforced on the server-side (though server-side validation is not visible in the provided frontend code).\n\n## 2. Interfaces Report\n\n### 2.1. User Interfaces (UI)\n\n1. Home Page\n   - Path: `/`\n   - Description: Displays a welcome message and a \"View Projects\" button\n\n2. About Page\n   - Path: `/about`\n   - Description: Provides information about the service with a two-column layout\n\n3. Projects Management\n   - Project List: `/projects`\n   - New Project Form: `/projects/new`\n   - Project Details: `/projects/{id}`\n   - Project Deletion Confirmation: `/projects/{id}/delete`\n   - Project Dependencies Diagram: `/projects/{id}/diagram`\n\n4. Governance Templates\n   - List Templates: `/governance-templates`\n   - Create New Template: `/governance-templates/new`\n   - Template Details: `/governance-templates/{id}`\n   - Template Dependencies Diagram: `/governance-templates/{id}/diagram`\n   - Delete Template Confirmation: `/governance-templates/{id}/delete`\n\n5. Workflow Templates\n   - New Workflow Template Form: `/governance-templates/{governanceTemplateId}/workflows/new`\n   - Workflow Template Details: `/workflow-templates/{id}`\n   - Workflow Template Delete Confirmation: `/workflow-templates/{id}/delete`\n   - Workflow Dependencies Diagram: `/governance-templates/{governanceTemplateId}/workflows/{id}/diagram`\n\n6. Checklist Item Templates\n   - New Checklist Item Form: `/governance-templates/{governanceTemplateId}/workflows/{workflowTemplateId}/checklist-items/new`\n   - Edit Checklist Item Form: `/checklist-item-templates/{id}`\n   - Delete Confirmation: `/checklist-item-templates/{id}/delete`\n\n7. Error Pages\n   - Various error pages (404 Not Found, 403 Forbidden, 401 Unauthorized, 400 Bad Request, 500 Internal Server Error)\n\n### 2.2. API Endpoints\n\n1. Health Check\n   - GET `/health`\n   - Response: `{ message: 'success' }`\n   - Status code: 200 OK\n\n2. Projects\n   - GET `/api/v1/projects`: Retrieve all projects\n   - GET `/api/v1/projects/{id}`: Retrieve a specific project\n   - POST `/api/v1/projects`: Create a new project\n   - DELETE `/api/v1/projects/{id}`: Delete a project\n\n3. Governance Templates\n   - GET `/api/v1/governance-templates`: List all governance templates\n   - GET `/api/v1/governance-templates/{id}`: Get specific governance template\n   - POST `/api/v1/governance-templates`: Create new governance template\n   - DELETE `/api/v1/governance-templates/{id}`: Delete governance template\n\n4. Workflow Templates\n   - GET `/api/v1/workflow-templates`: Retrieve workflow templates for a governance template\n   - GET `/api/v1/workflow-templates/{id}`: Retrieve workflow template details\n   - POST `/api/v1/workflow-templates`: Create a new workflow template\n   - DELETE `/api/v1/workflow-templates/{id}`: Delete a workflow template\n   - PUT `/api/v1/workflow-templates/{id}`: Update workflow template order\n   - PATCH `/api/v1/workflow-templates/{id}/reorder`: Reorder workflow within a governance template\n\n5. Workflow Instances\n   - GET `/api/v1/workflow-instances`: Retrieve workflow instances for a project\n\n6. Checklist Item Templates\n   - GET `/api/v1/checklist-item-templates`: Retrieve checklist items for a workflow\n   - POST `/api/v1/checklist-item-templates`: Create new checklist item template\n   - PUT `/api/v1/checklist-item-templates/{id}`: Update checklist item template\n   - DELETE `/api/v1/checklist-item-templates/{id}`: Delete checklist item template\n\n7. Checklist Item Instances\n   - GET `/api/v1/checklist-item-instances`: Retrieve checklist items for a workflow instance\n   - PUT `/api/v1/checklist-item-instances/{id}`: Update a checklist item's status\n\n### 2.3. Static File Serving\n\n- The application serves static files from the `.public` directory\n- Favicon: GET `/favicon.ico`\n- Static Assets: GET `${config.get('assetPath')}/{param*}`\n\n### 2.4. Session Management\n\n- The application uses Hapi-yar for session management\n- Supports both in-memory and Redis-based session storage\n\n### 2.5. Logging\n\n- Uses Pino for logging\n- Supports development (pretty-printed) and production (ECS format) logging\n\nThis report covers the main external interfaces exposed by the codebase, including user interfaces, API endpoints, and other relevant interfaces. Internal implementation details have been excluded.\n\n## 3. Business Logic Report\n\n### 3.1. Core Business Rules and Domain Logic\n\nThe codebase implements a governance checklist tool with the following core business rules and domain logic:\n\n1. Governance Templates: These are the top-level structures that contain workflows and checklist items. They represent standardized governance processes across projects.\n\n2. Workflow Templates: These are collections of related checklist items within a governance template. They can be ordered and reordered within the template.\n\n3. Checklist Item Templates: These are individual tasks, approvals, or documents that need to be completed as part of a workflow. They can have dependencies on other checklist items.\n\n4. Projects: These are instances of governance templates applied to specific initiatives. They contain workflow instances and checklist items derived from the templates.\n\n5. Dependencies: Checklist items can have dependencies on other items, creating a hierarchical structure within workflows.\n\n6. Item Types: Checklist items are categorized as \"approval\", \"document\", or \"task\" types, each potentially requiring different handling.\n\n7. Ordering: Both workflows within governance templates and checklist items within workflows have a specific order that can be managed.\n\n### 3.2. Business Process Flows\n\nThe main business process flows in the application include:\n\n1. Governance Template Creation and Management:\n   - Create new templates with name, version, and description\n   - Associate workflows with templates\n   - Manage the order of workflows within templates\n   - View and delete existing templates\n\n2. Workflow Template Management:\n   - Create new workflow templates within governance templates\n   - Associate checklist items with workflows\n   - Manage the order of checklist items within workflows\n   - View and delete existing workflow templates\n\n3. Checklist Item Template Management:\n   - Create new checklist item templates with name, description, type, and dependencies\n   - Associate checklist items with workflow templates\n   - Manage dependencies between checklist items\n   - View, update, and delete existing checklist item templates\n\n4. Project Management:\n   - Create new projects based on governance templates\n   - Instantiate workflows and checklist items for specific projects\n   - Track the status of checklist items within project workflows\n   - View and manage existing projects\n\n5. Dependency Visualization:\n   - Generate diagrams to visualize relationships between templates, workflows, and checklist items\n\n### 3.3. Business Rules\n\nKey business rules implemented in the system include:\n\n1. Governance templates must have a unique name and version combination.\n2. Workflows must be associated with a governance template.\n3. Checklist items must be associated with a workflow template.\n4. Checklist item dependencies can only be established within the same governance template.\n5. Projects must be based on an existing governance template.\n6. Checklist item statuses (complete/incomplete) can only be updated within the context of a project.\n7. Deletion of templates, workflows, or checklist items requires user confirmation to prevent accidental data loss.\n8. The order of workflows within templates and checklist items within workflows must be maintained and updatable.\n\n### 3.4. Separation of Concerns between Business Logic and Other Layers\n\nThe codebase demonstrates a clear separation of concerns:\n\n1. Presentation Layer:\n   - Nunjucks templates handle the view rendering\n   - Client-side JavaScript manages user interactions and form validations\n\n2. Business Logic Layer:\n   - Controller functions implement the core business logic\n   - Helper functions (e.g., for navigation building, date formatting) support the business logic\n\n3. Data Access Layer:\n   - API calls are used to interact with the backend services\n   - Data transformations are performed in the controller functions\n\n4. Error Handling:\n   - Consistent error handling and user feedback mechanisms are implemented across layers\n\nThis separation allows for easier maintenance, testing, and potential future refactoring of the application.\n\n### 3.5. Domain-Driven Design Patterns\n\nWhile not explicitly following all Domain-Driven Design (DDD) patterns, the codebase exhibits some DDD-inspired structures:\n\n1. Aggregates:\n   - Governance templates act as aggregate roots, containing workflows and checklist items\n   - Projects are also aggregate roots, containing instances of workflows and checklist items\n\n2. Entities:\n   - Governance templates, workflows, checklist items, and projects are all treated as entities with unique identifiers\n\n3. Value Objects:\n   - Date and currency formatting functions suggest the use of value objects for these concepts\n\n4. Repositories:\n   - While not explicitly shown, the API calls suggest the presence of repository-like structures for data access\n\n5. Services:\n   - The controller functions act as application services, orchestrating the business logic\n\n6. Ubiquitous Language:\n   - The codebase uses consistent terminology (e.g., \"governance template\", \"workflow\", \"checklist item\") throughout, suggesting an attempt at a ubiquitous language\n\nTo fully embrace DDD, the codebase could benefit from more explicit domain modeling and potentially introducing domain events for better decoupling of business processes.\n\n## 4. Dependencies Report\n\n### 4.1. External Dependencies (Libraries and Frameworks)\n\n1. Node.js (v22+ or >= v18)\n2. npm (>= v9)\n3. Hapi (v21.3.12): Web framework for Node.js\n4. Nunjucks (v3.2.4): Templating engine\n5. Convict (v6.2.4): Configuration management\n6. Pino (v9.5.0): Logging library\n7. Redis (via ioredis v5.4.1): For session storage in production\n8. Webpack (v5.96.1): Asset bundling and build tool\n9. Babel (v7.26.0): JavaScript compiler\n10. ESLint (v8.57.0): Linting tool\n11. Jest (v29.7.0): Testing framework\n12. TypeScript (v5.6.3): Type checking\n13. Prettier (v3.3.3): Code formatting\n14. @hapi/catbox-redis: Redis-based caching\n15. @hapi/catbox-memory: In-memory caching\n16. @hapi/yar: Hapi plugin for session management\n17. @elastic/ecs-pino-format: Elastic Common Schema log formatting\n18. hapi-pino: Hapi plugin for request logging\n19. aws-embedded-metrics: Metrics collection\n20. hapi-pulse: Graceful server shutdown\n21. @hapi/vision: Hapi plugin for view rendering\n22. date-fns: Date manipulation library\n23. lodash: Utility library\n24. cheerio: HTML parsing library (used in tests)\n25. govuk-frontend: Government Digital Service (GDS) design system\n26. Mermaid.js: Diagramming and charting library\n27. @hapi/boom: HTTP-friendly error objects\n28. Undici: HTTP/1.1 client with proxy support\n29. global-agent: Global proxy configuration\n\n### 4.2. API Calls and External Services\n\n1. Backend API server: Configured through the `API_SERVER` environment variable\n   - Endpoints:\n     - /api/v1/projects\n     - /api/v1/governance-templates\n     - /api/v1/workflow-templates\n     - /api/v1/workflow-instances\n     - /api/v1/checklist-item-instances\n2. LocalStack: For simulating AWS services locally (S3, SQS)\n3. MongoDB: Database (configured in docker-compose)\n4. Redis: For server-side caching in production\n5. SonarCloud: Code quality and security analysis\n6. GitHub Actions: CI/CD pipeline\n\n### 4.3. Database Connections and ORM Usage\n\n1. MongoDB: Configured in docker-compose, but no direct usage in the provided code\n2. Redis: Used for session storage and caching, accessed via ioredis client\n\n### 4.4. Third-Party Integrations\n\n1. GOV.UK Design System: For UI components and styling\n2. DEFRA Frontend: Implied usage for DEFRA best practices and software development standards\n3. Dependabot: For dependency management\n4. Docker: For containerization\n\n### 4.5. Other External Dependencies\n\n1. Git: Version control system\n2. Husky: For pre-commit hooks\n\n### 4.6. Versioning and Compatibility Considerations\n\n1. Node.js version compatibility: The project requires Node.js v22+ or >= v18, which may impact the compatibility of other dependencies.\n2. API version compatibility: The frontend communicates with a backend API (v1), which suggests the need for version management between frontend and backend services.\n3. Redis version compatibility: Ensure the Redis server version is compatible with the ioredis client (v5.4.1) being used.\n4. Browser compatibility: As a frontend application, consider the target browsers and ensure compatibility with the used JavaScript features and CSS styles.\n5. GOV.UK Frontend version: Keep track of the GOV.UK Design System version to ensure consistency with government standards and guidelines.\n6. Hapi ecosystem: Many plugins and extensions are from the Hapi ecosystem (e.g., @hapi/catbox-redis, @hapi/yar). Ensure version compatibility across these related packages.\n7. Testing framework: Jest (v29.7.0) is used for testing. Ensure all test utilities and mocks are compatible with this version.\n8. Webpack and Babel: As build tools, their versions (Webpack v5.96.1, Babel v7.26.0) may affect the compatibility of various plugins and loaders used in the build process.\n9. TypeScript: The use of TypeScript (v5.6.3) may require specific consideration for type definitions and compatibility with other libraries.\n10. LocalStack: Ensure the LocalStack version used for local development matches the AWS services versions used in production as closely as possible.\n\nRegular updates and thorough testing are recommended to maintain compatibility and security across all dependencies. Use of a dependency management tool like Dependabot can help automate this process.\n\n## 5. Configuration Report\n\n### 5.1. Configuration Files\n\n1. **Main Configuration** (`src/config/config.js`)\n   - Uses Convict for configuration management\n\n2. **Build Configuration**\n   - `babel.config.cjs`: Babel configuration for transpilation\n   - `webpack.config.js`: Webpack configuration for asset bundling\n   - `postcss.config.js`: PostCSS configuration for CSS processing\n   - `stylelint.config.js`: Stylelint configuration for CSS linting\n   - `tsconfig.json`: TypeScript configuration\n   - `jest.config.js`: Jest configuration for testing\n\n3. **Docker Configuration**\n   - `Dockerfile`: Multi-stage Docker build for development and production\n   - `compose.yml`: Docker Compose configuration for local development setup\n\n4. **SonarCloud Configuration**\n   - `sonar-project.properties`: Includes project key, organization, and various analysis settings\n\n### 5.2. Configuration Variables\n\n1. **Main Application Settings**\n   - `port`: Server port (default: 3000)\n   - `env`: Application environment (production, development, test)\n   - `serviceName`: Application name\n   - `serviceUrl`: URL for the service, used in header\n\n2. **Logging Configuration**\n   - `log.level`: Log level\n   - `log.format`: Log format\n   - `log.redaction`: Paths for log redaction\n\n3. **Session Management**\n   - `session.cache.engine`: Cache engine for session storage (redis/memory)\n   - `session.cache.name`: Name of the cache\n   - `session.cache.ttl`: Time-to-live for cache entries\n   - `session.cookie.password`: Password for cookie encryption\n   - `session.cookie.ttl`: Time-to-live for cookies\n   - `session.cookie.secure`: Boolean to set secure flag on cookies\n\n4. **Redis Configuration**\n   - `redis.host`: Redis server host\n   - `redis.username`: Redis username (optional)\n   - `redis.password`: Redis password (optional)\n   - `redis.keyPrefix`: Prefix for Redis keys\n   - `redis.useSingleInstanceCache`: Boolean to determine if single instance or cluster is used\n   - `redis.useTLS`: Boolean to enable TLS for Redis connection\n\n5. **Nunjucks Template Engine**\n   - `nunjucks.watch`: Boolean to enable watch mode\n   - `nunjucks.noCache`: Boolean to disable caching\n\n6. **API Server**\n   - `apiServer`: Backend API server URL\n\n7. **Asset Management**\n   - `assetPath`: Base path for serving static assets\n   - `staticCacheTimeout`: Expiration time for static asset caching\n\n8. **Metrics**\n   - Toggle for enabling/disabling metrics collection\n\n9. **Security**\n   - `isSecureContextEnabled`: Boolean flag to enable/disable custom secure context\n\n10. **Proxy**\n    - `httpProxy`: URL for the HTTP proxy\n\n11. **Mermaid.js Configuration**\n    - Settings for flowchart rendering (theme, security level, etc.)\n\n### 5.3. Environment Variables\n\n1. `NODE_ENV`: Application environment (production, development, test)\n2. `PORT`: Server port\n3. `REDIS_HOST`: Redis host for session storage\n4. `API_SERVER`: Backend API server URL\n5. `LOG_LEVEL`: Controls logging verbosity\n6. `SESSION_CACHE_ENGINE`: Configures the caching mechanism (redis/memory)\n7. `TRUSTSTORE_*`: Used to store base64-encoded SSL/TLS certificates\n8. `HTTP_PROXY`: Used to set up a global HTTP proxy\n\n#### AWS Configuration (for local development)\n9. `AWS_REGION`\n10. `AWS_DEFAULT_REGION`\n11. `AWS_ACCESS_KEY_ID`\n12. `AWS_SECRET_ACCESS_KEY`\n\n### 5.4. Secrets Management and Sensitive Data Handling\n\n1. **Environment Variables**\n   - Sensitive data like API keys, passwords, and certificates are stored as environment variables\n   - SSL/TLS certificates are stored as base64-encoded strings in `TRUSTSTORE_*` environment variables\n\n2. **Configuration System**\n   - Uses a centralized configuration system (likely Convict) to manage sensitive data\n   - Accessed through methods like `config.get()` and `config.set()`\n\n3. **Redis Security**\n   - Optional username and password for Redis authentication\n   - TLS support for secure Redis connections\n\n4. **Session Security**\n   - Configurable cookie settings including encryption password and secure flag\n\n5. **Production Mode**\n   - Different configurations for development and production environments\n   - Production mode enables additional security measures\n\n6. **Proxy Configuration**\n   - Uses ProxyAgent from Undici for secure HTTP requests\n\n7. **Git Configuration**\n   - Recommendation to set `core.autocrlf` to false on Windows to prevent sensitive data leaks\n\nBy utilizing environment variables, a centralized configuration system, and environment-specific settings, the application aims to keep sensitive data secure and separate from the codebase.\n\n## 6. Infrastructure Report\n\n### 6.1. Deployment Configuration and Infrastructure as Code (IaC)\n\nThe project utilizes Docker for containerization and Docker Compose for local development environment setup. While explicit Infrastructure as Code (IaC) tools like Terraform or CloudFormation are not directly mentioned, the presence of Docker configurations suggests a containerized approach to deployment.\n\nKey components:\n- Dockerfile with multi-stage builds for development and production\n- Docker Compose file (`compose.yml`) for local development environment\n- Configuration management using environment variables and a dedicated configuration module\n\n### 6.2. Deployment and Environment Setup\n\nThe application is designed for deployment in a containerized environment, likely using Kubernetes or a similar orchestration platform. The setup includes:\n\n1. Web Server:\n   - Node.js-based application using the Hapi.js framework\n   - Configured to serve static files and handle server-side rendering with Nunjucks templates\n\n2. API Server:\n   - Separate API server, indicating a microservices architecture or decoupled backend/frontend setup\n\n3. Database:\n   - MongoDB included in the local development setup\n   - Actual database usage in production is not explicitly defined in the provided code\n\n4. Caching:\n   - Redis used for server-side caching in production\n   - In-memory caching (CatboxMemory) for local development\n\n5. Environment Separation:\n   - Configuration module suggests different settings for development, staging, and production environments\n\n6. Static Asset Management:\n   - SASS files compiled into CSS\n   - Client-side JavaScript for GOV.UK Frontend components\n   - Build process mentioned in package.json postinstall hook\n\n7. Proxy:\n   - Forward-proxy setup using Undici's ProxyAgent\n\n### 6.3. Cloud Services Integration\n\nWhile the production cloud environment is not explicitly defined, the application is designed to work with cloud services:\n\n1. AWS Services:\n   - LocalStack used to simulate AWS services (S3, SQS) in the local development environment\n   - Suggests potential use of actual AWS services in production\n\n2. Scalability:\n   - The separation of frontend and API services indicates design for potential horizontal scaling\n\n### 6.4. Containerization and Orchestration\n\nThe application is fully containerized:\n\n1. Docker:\n   - Multi-stage Dockerfile for both development and production builds\n   - Development stage based on `defradigital/node-development:latest-22`\n   - Production stage based on `defradigital/node:latest-22`\n\n2. Docker Compose:\n   - Used for local development environment\n   - Includes services for LocalStack, Redis, MongoDB, and the frontend application\n\n3. Orchestration:\n   - While not explicitly mentioned, the containerized nature of the application suggests it's prepared for orchestration platforms like Kubernetes\n\n### 6.5. CI/CD Pipeline Setup\n\nThe project includes elements indicating a CI/CD pipeline:\n\n1. GitHub Actions:\n   - Mentioned in the Jest configuration, suggesting its use for continuous integration\n   - Specific pipeline configuration not provided in the given code\n\n2. Testing:\n   - Jest used for server-side testing\n   - Test server setup available for integration tests\n\n3. Code Quality and Security:\n   - SonarCloud integration mentioned for code quality and security analysis\n\n4. Build Process:\n   - NPM scripts for building the application\n   - Likely integrated into the CI/CD pipeline for automated builds\n\nWhile the complete CI/CD configuration is not provided, these elements suggest a robust pipeline for continuous integration, testing, and potentially automated deployment.\n\n## 7. Non-Functional Aspects Report\n\n### 7.1. Performance and Reliability Aspects\n\n1. **Caching Mechanisms:**\n   - Redis-based session caching for improved performance in production\n   - Configurable static asset caching with timeout settings\n   - Server-side caching using Redis or in-memory cache\n\n2. **Frontend Optimization:**\n   - Asset bundling and minification using Webpack\n   - CSS loaded in the head and JavaScript at the end of the body for optimal rendering\n   - Server-side rendering with Nunjucks for faster initial page loads\n\n3. **Backend Performance:**\n   - Support for Redis Cluster for high availability and better performance in distributed environments\n   - Efficient buffer operations for certificate handling\n\n4. **Reliability Features:**\n   - Health check endpoint for monitoring application status\n   - Graceful server shutdown using hapi-pulse plugin with configurable timeout\n   - Unhandled rejection handling for improved error resilience\n   - Docker containerization for consistent environments\n\n5. **Scalability:**\n   - Containerized application design for easy scaling and deployment\n   - Support for clustered environments (implied by Redis session storage)\n   - Separation of frontend and API allows for independent scaling\n\n6. **Potential Performance Issues:**\n   - Multiple API calls for each request in project management\n   - Client-side rendering of complex diagrams using Mermaid.js may affect performance on large projects\n   - No evident caching mechanisms for API responses in some areas\n\n### 7.2. Security Considerations and Potential Vulnerabilities\n\n1. **Implemented Security Measures:**\n   - HTTPS and HSTS configuration in Hapi server setup\n   - Secure session management with configurable cookie settings\n   - Content Security Policy (CSP) headers\n   - XSS protection enabled\n   - CSRF protection (implied by the use of Hapi)\n   - Custom secure context for HTTPS connections\n   - SSL/TLS certificate management through environment variables\n\n2. **Authentication and Authorization:**\n   - Secure cookie options with encryption passwords\n   - Support for TLS in Redis connections\n   - Authentication currently disabled for some routes (`auth: false`), which needs to be addressed\n\n3. **Input Validation and Sanitization:**\n   - Client-side validation implemented, but server-side validation should be enhanced\n\n4. **Security Analysis:**\n   - SonarCloud integration for ongoing security analysis\n\n5. **Potential Vulnerabilities:**\n   - Lack of explicit CSRF protection in some form submissions\n   - Absence of rate limiting or pagination for large datasets\n   - No evident input sanitization in some areas\n\n### 7.3. Volume and Load Considerations\n\n1. **Scalability Features:**\n   - Redis Cluster support for handling high loads\n   - Containerized application design for easy horizontal scaling\n\n2. **Potential Bottlenecks:**\n   - Multiple API calls for complex projects with many workflows and checklist items\n   - Client-side rendering of complex diagrams may impact performance under high load\n\n3. **Load Distribution:**\n   - Separation of frontend and API allows for independent scaling of components\n\n4. **Caching Strategies:**\n   - Redis-based caching for sessions and data\n   - Static asset caching with configurable timeouts\n\n### 7.4. Significant Error Handling and Recovery Mechanisms\n\n1. **Global Error Handling:**\n   - Centralized error handling with the catchAll function\n   - Custom error pages for different HTTP status codes\n\n2. **API and Data Processing Errors:**\n   - Comprehensive try-catch blocks for API calls and data processing\n   - Graceful error display to users with fallback behaviors\n\n3. **Logging of Errors:**\n   - Error stack logging for 5xx errors\n   - Use of structured logging for easier error analysis\n\n4. **Client-Side Error Handling:**\n   - Progressive enhancement in forms with fallback for non-JavaScript environments\n\n5. **Recovery Mechanisms:**\n   - Graceful degradation when data cannot be fetched, showing empty states or error messages\n\n### 7.5. Logging, Monitoring, and Alerting\n\n1. **Logging Infrastructure:**\n   - Structured logging using Pino with Elastic Common Schema (ECS) format\n   - Request logging with hapi-pino\n   - Configurable log redaction for sensitive data\n   - Different log levels (info, error) for appropriate categorization\n\n2. **Monitoring:**\n   - Health check endpoint for monitoring application status\n   - Metrics collection using AWS Embedded Metrics\n\n3. **Tracing:**\n   - Trace ID inclusion in logs for request tracing\n   - Support for distributed tracing\n\n4. **Alerting:**\n   - While not explicitly mentioned, the logging and monitoring setup provides a foundation for implementing alerting systems\n\n5. **Configurability:**\n   - LOG_LEVEL environment variable for controlling log verbosity\n\n### 7.6. Compliance Considerations\n\n1. **Government Standards:**\n   - Adherence to GOV.UK design standards and components\n   - Compliance with UK government digital standards\n\n2. **Accessibility Compliance:**\n   - Use of GOV.UK Design System components, designed to meet accessibility standards\n   - Inclusion of accessibility statement and skip links for keyboard navigation\n\n3. **Data Protection:**\n   - Configurable log redaction for sensitive data\n   - Links to privacy notice and cookies policy in the footer\n\n4. **Licensing:**\n   - Open Government Licence v3.0 for code licensing\n\n5. **Security Standards:**\n   - Implementation of security headers and HTTPS configuration\n\n### 7.7. Data and Privacy Considerations\n\n1. **Data Protection:**\n   - Configurable log redaction for sensitive information\n   - Secure session management with encrypted cookies\n\n2. **User Privacy:**\n   - Inclusion of privacy notice and cookies policy links\n   - Use of 'private' cache setting for static assets\n\n3. **Data Handling:**\n   - Server-side rendering to minimize exposure of sensitive data to the client\n   - Careful management of API responses to prevent data leakage\n\n4. **Consent Management:**\n   - While not explicitly mentioned, the footer links suggest a framework for managing user consent and privacy preferences\n\n### 7.8. Testing Strategies and Code Coverage\n\n1. **Testing Frameworks:**\n   - Jest setup for unit and integration testing\n   - Server injection used for testing HTTP endpoints\n\n2. **Test Coverage:**\n   - Test coverage reporting configured\n   - SonarCloud integration for code quality and coverage analysis\n\n3. **Types of Tests:**\n   - Unit tests for individual components and functions\n   - Integration tests for API endpoints and server setup\n   - Mocking of external dependencies in tests\n\n4. **Frontend Testing:**\n   - Presence of `data-testid` attributes suggests preparation for frontend testing\n\n5. **Continuous Integration:**\n   - Integration with SonarCloud for ongoing code quality and security analysis\n\n6. **Areas for Improvement:**\n   - Expansion of test coverage for complex user interactions\n   - Implementation of end-to-end testing for critical user journeys\n\nThis report provides a comprehensive overview of the non-functional aspects of the codebase, highlighting both strengths and areas for potential improvement across various dimensions of software quality and operational excellence.",
  "product_requirements": "# Product Requirements Document\n\n# AI SDLC Governance Frontend Product Requirements Document\n\n## Context\n\nThe AI SDLC Governance Frontend is a web application designed to manage and track the governance process for AI projects. It provides a structured approach to creating, managing, and monitoring governance templates, workflows, and checklist items throughout the AI development lifecycle. This tool aims to ensure compliance, transparency, and consistency in AI project governance across an organization.\n\n## Data Model\n\n```mermaid\nerDiagram\n    GovernanceTemplate ||--o{ WorkflowTemplate : contains\n    WorkflowTemplate ||--o{ ChecklistItemTemplate : contains\n    ChecklistItemTemplate }o--o{ ChecklistItemTemplate : depends_on\n    Project ||--|| GovernanceTemplate : uses\n    Project ||--o{ WorkflowInstance : has\n    WorkflowInstance ||--o{ ChecklistItemInstance : contains\n    GovernanceTemplate {\n        string _id\n        string name\n        string version\n        string description\n    }\n    WorkflowTemplate {\n        string _id\n        string name\n        string description\n        int order\n        string governanceTemplateId\n    }\n    ChecklistItemTemplate {\n        string _id\n        string name\n        string description\n        string type\n        array dependencies_requires\n        array dependencies_requiredBy\n        int orderNumber\n        string workflowTemplateId\n    }\n    Project {\n        string _id\n        string name\n        string description\n        string governanceTemplateId\n    }\n    WorkflowInstance {\n        string _id\n        string name\n        int orderNumber\n        string projectId\n    }\n    ChecklistItemInstance {\n        string _id\n        string name\n        string type\n        string status\n        int orderNumber\n        string workflowInstanceId\n    }\n```\n\n## Features and User Stories\n\n### 1. Governance Template Management\n\n#### 1.1 List Governance Templates\n- Frontend Story\n- As a governance manager, I want to view a list of all governance templates, so that I can manage and select templates for projects.\n- Design Consideration: Use a table layout with pagination for easy navigation.\n- Acceptance Criteria:\n  Given I am on the governance templates page\n  When the page loads\n  Then I should see a list of all governance templates with their names, versions, and descriptions\n  And the list should be paginated if there are more than 10 templates\n- Architecture Notes: \n  - Fetch data from the `/api/v1/governance-templates` endpoint\n  - Implement client-side pagination if not provided by the API\n- Related Stories: 1.2, 1.3, 1.4\n\n#### 1.2 Create Governance Template\n- Frontend Story\n- As a governance manager, I want to create a new governance template, so that I can define a new governance process for AI projects.\n- Design Consideration: Use a multi-step form for template creation.\n- Acceptance Criteria:\n  Given I am on the governance templates page\n  When I click \"Create New Template\"\n  Then I should be taken to a form to enter template details\n  And when I submit the form with valid data\n  Then a new template should be created and I should be redirected to the template details page\n- Architecture Notes:\n  - Use POST `/api/v1/governance-templates` to create the template\n  - Implement form validation for required fields (name, version)\n- Related Stories: 1.1, 1.3\n\n#### 1.3 View Governance Template Details\n- Frontend Story\n- As a governance manager, I want to view the details of a specific governance template, so that I can review its structure and associated workflows.\n- Design Consideration: Implement a hierarchical view of template, workflows, and checklist items.\n- Acceptance Criteria:\n  Given I am on the governance templates list page\n  When I click on a specific template\n  Then I should be taken to a detailed view of that template\n  And I should see the template's name, version, description, and associated workflows\n- Architecture Notes:\n  - Fetch template details from `/api/v1/governance-templates/{id}`\n  - Fetch associated workflows from `/api/v1/workflow-templates?governanceTemplateId={id}`\n- Related Stories: 1.1, 1.2, 1.4\n\n#### 1.4 Delete Governance Template\n- Frontend Story\n- As a governance manager, I want to delete a governance template that is no longer needed, so that I can keep the template list current and relevant.\n- Design Consideration: Implement a confirmation dialog to prevent accidental deletions.\n- Acceptance Criteria:\n  Given I am viewing a governance template's details\n  When I click the \"Delete Template\" button\n  Then I should see a confirmation dialog\n  And when I confirm the deletion\n  Then the template should be removed and I should be redirected to the templates list\n- Architecture Notes:\n  - Use DELETE `/api/v1/governance-templates/{id}` to remove the template\n  - Ensure all associated workflows and checklist items are also deleted (backend responsibility)\n- Related Stories: 1.1, 1.3\n\n### 2. Workflow Template Management\n\n#### 2.1 List Workflow Templates\n- Frontend Story\n- As a governance manager, I want to view a list of workflow templates within a governance template, so that I can manage the structure of the governance process.\n- Design Consideration: Display workflows in order with drag-and-drop reordering capability.\n- Acceptance Criteria:\n  Given I am viewing a governance template's details\n  When the page loads\n  Then I should see a list of associated workflow templates in their specified order\n  And I should be able to reorder the workflows using drag-and-drop\n- Architecture Notes:\n  - Fetch workflows from `/api/v1/workflow-templates?governanceTemplateId={id}`\n  - Implement drag-and-drop using a library like react-beautiful-dnd\n  - Use PATCH `/api/v1/workflow-templates/{id}/reorder` to update workflow order\n- Related Stories: 2.2, 2.3, 2.4\n\n#### 2.2 Create Workflow Template\n- Frontend Story\n- As a governance manager, I want to create a new workflow template within a governance template, so that I can define a new stage in the governance process.\n- Design Consideration: Use a modal or slide-out panel for the creation form to maintain context.\n- Acceptance Criteria:\n  Given I am viewing a governance template's details\n  When I click \"Add Workflow\"\n  Then a form should appear to enter workflow details\n  And when I submit the form with valid data\n  Then a new workflow should be added to the template\n- Architecture Notes:\n  - Use POST `/api/v1/workflow-templates` to create the workflow\n  - Automatically set the order to be the last in the current list\n- Related Stories: 2.1, 2.3\n\n#### 2.3 Edit Workflow Template\n- Frontend Story\n- As a governance manager, I want to edit an existing workflow template, so that I can update its details or structure as governance requirements change.\n- Design Consideration: Use inline editing for simple fields and a modal for complex changes.\n- Acceptance Criteria:\n  Given I am viewing a workflow template's details\n  When I click an edit button or field\n  Then I should be able to modify the workflow's name, description, or order\n  And when I save the changes\n  Then the workflow should be updated with the new information\n- Architecture Notes:\n  - Use PUT `/api/v1/workflow-templates/{id}` to update the workflow\n  - Implement optimistic UI updates for better user experience\n- Related Stories: 2.1, 2.2, 2.4\n\n#### 2.4 Delete Workflow Template\n- Frontend Story\n- As a governance manager, I want to delete a workflow template that is no longer needed, so that I can streamline the governance process.\n- Design Consideration: Implement a confirmation dialog and warn about potential impacts on existing projects.\n- Acceptance Criteria:\n  Given I am viewing a workflow template's details\n  When I click the \"Delete Workflow\" button\n  Then I should see a confirmation dialog with warnings about the impact\n  And when I confirm the deletion\n  Then the workflow should be removed from the governance template\n- Architecture Notes:\n  - Use DELETE `/api/v1/workflow-templates/{id}` to remove the workflow\n  - Ensure all associated checklist items are also deleted (backend responsibility)\n  - Update the order of remaining workflows if necessary\n- Related Stories: 2.1, 2.3\n\n### 3. Checklist Item Template Management\n\n#### 3.1 List Checklist Item Templates\n- Frontend Story\n- As a governance manager, I want to view a list of checklist item templates within a workflow, so that I can manage the specific tasks and approvals required in each stage of governance.\n- Design Consideration: Display checklist items in a hierarchical view, showing dependencies.\n- Acceptance Criteria:\n  Given I am viewing a workflow template's details\n  When the page loads\n  Then I should see a list of associated checklist item templates in their specified order\n  And I should see the dependencies between checklist items visually represented\n- Architecture Notes:\n  - Fetch checklist items from `/api/v1/checklist-item-templates?workflowTemplateId={id}`\n  - Implement a tree or graph visualization for dependencies\n- Related Stories: 3.2, 3.3, 3.4\n\n#### 3.2 Create Checklist Item Template\n- Frontend Story\n- As a governance manager, I want to create a new checklist item template within a workflow, so that I can define a specific task, approval, or document requirement in the governance process.\n- Design Consideration: Use a form with dynamic fields based on the selected item type (approval, document, task).\n- Acceptance Criteria:\n  Given I am viewing a workflow template's details\n  When I click \"Add Checklist Item\"\n  Then a form should appear to enter checklist item details\n  And I should be able to select the item type and set dependencies\n  And when I submit the form with valid data\n  Then a new checklist item should be added to the workflow\n- Architecture Notes:\n  - Use POST `/api/v1/checklist-item-templates` to create the checklist item\n  - Implement client-side validation for circular dependencies\n  - Automatically set the order to be the last in the current list\n- Related Stories: 3.1, 3.3\n\n#### 3.3 Edit Checklist Item Template\n- Frontend Story\n- As a governance manager, I want to edit an existing checklist item template, so that I can update its details, type, or dependencies as governance requirements evolve.\n- Design Consideration: Use a modal or slide-out panel for editing to show all fields and dependency options.\n- Acceptance Criteria:\n  Given I am viewing a checklist item template's details\n  When I click the edit button\n  Then I should be able to modify the item's name, description, type, and dependencies\n  And when I save the changes\n  Then the checklist item should be updated with the new information\n- Architecture Notes:\n  - Use PUT `/api/v1/checklist-item-templates/{id}` to update the checklist item\n  - Revalidate dependencies to prevent circular references\n  - Update the visual representation of dependencies if changed\n- Related Stories: 3.1, 3.2, 3.4\n\n#### 3.4 Delete Checklist Item Template\n- Frontend Story\n- As a governance manager, I want to delete a checklist item template that is no longer needed, so that I can refine and simplify the governance process.\n- Design Consideration: Implement a confirmation dialog and show impact on dependent items.\n- Acceptance Criteria:\n  Given I am viewing a checklist item template's details\n  When I click the \"Delete Checklist Item\" button\n  Then I should see a confirmation dialog with warnings about dependent items\n  And when I confirm the deletion\n  Then the checklist item should be removed from the workflow\n  And any dependencies referencing this item should be updated\n- Architecture Notes:\n  - Use DELETE `/api/v1/checklist-item-templates/{id}` to remove the checklist item\n  - Update dependencies of other checklist items if necessary (backend responsibility)\n  - Update the order of remaining checklist items if necessary\n- Related Stories: 3.1, 3.3\n\n### 4. Project Management\n\n#### 4.1 List Projects\n- Frontend Story\n- As a project manager, I want to view a list of all AI projects, so that I can monitor and manage ongoing governance processes.\n- Design Consideration: Implement a table view with sorting and filtering options.\n- Acceptance Criteria:\n  Given I am on the projects page\n  When the page loads\n  Then I should see a list of all projects with their names, descriptions, and associated governance templates\n  And I should be able to sort and filter the list based on various criteria\n- Architecture Notes:\n  - Fetch projects from `/api/v1/projects`\n  - Implement client-side sorting and filtering if not provided by the API\n- Related Stories: 4.2, 4.3, 4.4\n\n#### 4.2 Create Project\n- Frontend Story\n- As a project manager, I want to create a new AI project based on a governance template, so that I can start tracking its governance process.\n- Design Consideration: Implement a multi-step form for project creation, including governance template selection.\n- Acceptance Criteria:\n  Given I am on the projects page\n  When I click \"Create New Project\"\n  Then I should be taken through a multi-step form to enter project details and select a governance template\n  And when I submit the form with valid data\n  Then a new project should be created and I should be redirected to the project details page\n- Architecture Notes:\n  - Use POST `/api/v1/projects` to create the project\n  - Fetch available governance templates from `/api/v1/governance-templates` for selection\n- Related Stories: 4.1, 4.3\n\n#### 4.3 View Project Details\n- Frontend Story\n- As a project manager, I want to view the details of a specific AI project, so that I can review its governance progress and manage workflows.\n- Design Consideration: Implement a dashboard-style layout with overview and detailed sections.\n- Acceptance Criteria:\n  Given I am on the projects list page\n  When I click on a specific project\n  Then I should be taken to a detailed view of that project\n  And I should see the project's name, description, associated governance template, and current workflow status\n  And I should see a list of workflow instances with their completion status\n- Architecture Notes:\n  - Fetch project details from `/api/v1/projects/{id}`\n  - Fetch workflow instances from `/api/v1/workflow-instances?projectId={id}`\n  - Implement a progress indicator for overall project governance completion\n- Related Stories: 4.1, 4.2, 4.4, 5.1\n\n#### 4.4 Delete Project\n- Frontend Story\n- As a project manager, I want to delete a project that is no longer active or relevant, so that I can maintain an up-to-date project list.\n- Design Consideration: Implement a confirmation dialog with a requirement to type the project name for deletion.\n- Acceptance Criteria:\n  Given I am viewing a project's details\n  When I click the \"Delete Project\" button\n  Then I should see a confirmation dialog requiring me to type the project name\n  And when I correctly enter the project name and confirm\n  Then the project should be deleted and I should be redirected to the projects list\n- Architecture Notes:\n  - Use DELETE `/api/v1/projects/{id}` to remove the project\n  - Ensure all associated workflow instances and checklist item instances are also deleted (backend responsibility)\n- Related Stories: 4.1, 4.3\n\n### 5. Workflow Instance Management\n\n#### 5.1 View Workflow Instances\n- Frontend Story\n- As a project manager, I want to view the workflow instances for a specific project, so that I can track the progress of each governance stage.\n- Design Consideration: Display workflows in a kanban-style board or a timeline view.\n- Acceptance Criteria:\n  Given I am viewing a project's details\n  When I navigate to the workflows section\n  Then I should see a list of workflow instances derived from the governance template\n  And each workflow should display its completion status and current active checklist items\n- Architecture Notes:\n  - Fetch workflow instances from `/api/v1/workflow-instances?projectId={id}`\n  - Implement a visual indicator for workflow status (e.g., not started, in progress, completed)\n- Related Stories: 4.3, 5.2\n\n#### 5.2 Manage Checklist Item Instances\n- Frontend Story\n- As a project team member, I want to view and update the status of checklist item instances within a workflow, so that I can track and report on governance task completion.\n- Design Consideration: Implement an interactive checklist with status toggles and comment fields.\n- Acceptance Criteria:\n  Given I am viewing a workflow instance\n  When I interact with a checklist item\n  Then I should be able to mark it as complete or incomplete\n  And I should be able to add comments or attachments to the checklist item\n  And the overall workflow status should update based on checklist item completion\n- Architecture Notes:\n  - Fetch checklist item instances from `/api/v1/checklist-item-instances?workflowInstanceId={id}`\n  - Use PUT `/api/v1/checklist-item-instances/{id}` to update checklist item status"
}
